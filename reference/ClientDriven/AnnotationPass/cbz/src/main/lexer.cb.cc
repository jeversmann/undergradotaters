#line 2 "lexer.cb.cc"

#line 4 "lexer.cb.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cb_create_buffer
#define yy_delete_buffer cb_delete_buffer
#define yy_flex_debug cb_flex_debug
#define yy_init_buffer cb_init_buffer
#define yy_flush_buffer cb_flush_buffer
#define yy_load_buffer_state cb_load_buffer_state
#define yy_switch_to_buffer cb_switch_to_buffer
#define yyin cbin
#define yyleng cbleng
#define yylex cblex
#define yylineno cblineno
#define yyout cbout
#define yyrestart cbrestart
#define yytext cbtext
#define yywrap cbwrap
#define yyalloc cballoc
#define yyrealloc cbrealloc
#define yyfree cbfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cbrestart(cbin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cbleng;

extern FILE *cbin, *cbout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cbtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cbtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cbrestart()), so that the user can continue scanning by
	 * just pointing cbin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cbtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cbleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cbwrap()'s to do buffer switches
 * instead of setting up a fresh cbin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cbrestart (FILE *input_file  );
void cb_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cb_create_buffer (FILE *file,int size  );
void cb_delete_buffer (YY_BUFFER_STATE b  );
void cb_flush_buffer (YY_BUFFER_STATE b  );
void cbpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void cbpop_buffer_state (void );

static void cbensure_buffer_stack (void );
static void cb_load_buffer_state (void );
static void cb_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cb_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cb_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cb_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cb_scan_bytes (yyconst char *bytes,int len  );

void *cballoc (yy_size_t  );
void *cbrealloc (void *,yy_size_t  );
void cbfree (void *  );

#define yy_new_buffer cb_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cbensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cb_create_buffer(cbin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cbensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cb_create_buffer(cbin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cbin = (FILE *) 0, *cbout = (FILE *) 0;

typedef int yy_state_type;

extern int cblineno;

int cblineno = 1;

extern char *cbtext;
#define yytext_ptr cbtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cbtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cbleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 109
#define YY_END_OF_BUFFER 110
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[576] =
    {   0,
        0,    0,    0,    0,  110,  109,  108,    1,    2,   69,
      108,  108,   71,   64,  108,   80,   81,   65,   66,   82,
       67,   63,   70,   41,   41,   77,   78,   72,   79,   73,
       76,   40,   40,   61,   62,   74,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   59,   75,   60,   68,    1,  108,    1,   91,
        0,   51,    0,  107,  107,  107,   96,   92,  101,    0,
       46,   48,    0,   94,   84,   97,   85,   98,   83,    0,
        0,   95,    0,   42,    0,    0,   41,   41,    0,   41,
       41,   41,   86,   88,   90,   89,   87,   40,    0,    0,

      102,   40,   40,   40,   40,   40,   40,   40,   11,   40,
       40,   40,   40,   40,   40,   19,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,  103,   93,    1,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
      107,  107,    0,   45,    0,    0,    0,    0,    0,  104,
       44,   44,   44,   44,   42,   42,    0,    0,   41,   41,
       41,   43,   41,   41,   41,   99,  100,    0,   52,    0,
        0,    0,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   17,   40,   40,   20,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,    0,   54,    0,    0,    0,
        0,   53,    0,    0,    0,    0,    0,  107,  107,   45,
        0,   47,    0,    0,    0,   49,    0,    0,    0,    0,
        0,    0,    0,   42,   42,   42,   44,   41,   41,   43,
       43,   41,   41,    0,    0,   50,    0,    0,   40,   40,
       40,    3,   40,    5,    6,   40,   40,   40,   40,   13,
       14,   40,   40,   18,   40,   21,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   33,   40,   40,
        0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  105,  106,   47,

        0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
        0,    0,    0,    0,   44,   42,   42,   43,   43,   43,
        0,    0,    0,    0,    0,    0,    0,    0,   40,   40,
       40,    4,    7,   40,   40,   40,   40,   16,   40,   40,
       40,   24,   40,   40,   40,   40,   40,   40,   31,   40,
       40,   35,    0,    0,    0,    0,    0,    0,    0,    0,
       51,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
       43,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,

        0,   40,   40,   40,   40,   40,   12,   15,   36,   40,
       23,   25,   26,   27,   28,   29,   40,   40,   40,    0,
        0,   55,    0,   53,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
        8,   40,   40,   10,   40,   30,   40,   40,    0,   58,
        0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   40,   37,    9,   22,
       32,   34,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   40,   40,    0,    0,    0,    0,    0,
        0,    0,   40,   38,    0,    0,    0,    0,    0,    0,
       40,    0,   40,    0,   39,    0,    0,    0,    0,    0,
        0,   56,    0,   57,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   31,   30,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   34,   52,   53,   54,   55,
       56,   57,   34,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    1,    1,    6,    1,
        7,    7,    8,    1,    1,    1,    1,    1,    4,    9,
        9,    9,    9,   10,   10,   10,   10,    1,    4,    1,
        1,   10,   11,   11,    9,    9,    9,   11,   10,   10,
       10,   10,   10,   10,   12,   10,   10,   12,   10,   12,
       10,   12,   10,   12,   10,   10,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[684] =
    {   0,
        0,    0,    0,   69, 1227, 4664, 4664,   71, 4664, 1199,
       65,   31, 1194,   68,   77, 4664, 4664, 1182,   65, 4664,
       66,   64, 1178,   98,   78, 4664, 4664,   76, 1172,   78,
     4664,    0,   84, 4664, 4664, 1171, 1148, 1128, 1129,   68,
       51,   73,   56, 1130,   60, 1129, 1133,   90, 1113, 1115,
     1113, 1118, 4664,   55, 4664, 4664,  144,  142,  152, 4664,
      122, 4664,  193,    0, 1099, 1091, 4664, 4664, 4664,  155,
     4664, 4664,  251, 4664, 4664, 4664, 4664, 4664, 4664, 1128,
      149, 4664,  156,  207,  202,  190,  107,  120,    0,  265,
      209,  134, 1117, 4664, 4664, 4664, 1114,    0,  159, 1101,

     4664,  195, 1068, 1080, 1065, 1079, 1065, 1063, 1049, 1046,
     1031, 1029, 1030, 1025, 1022,    0,  123, 1019,   78, 1017,
      126,  143, 1020, 1010,  159,  166, 1013, 4664, 4664,  273,
      300,  312, 1059, 1008, 1002,  994,  213,  252,  254,    0,
      990,  981,  244, 4664,  363, 1019,  264,  313,  325, 4664,
     4664,  308,  326,    0,  336,  236,  337,  345,  243,  239,
      292,  338,  246,  301,  341, 4664, 4664,  226, 4664,  317,
      168,  365,  965,  968,  968,  960,  968,  957,  937,  323,
      946,  933,  926,  915,  919,  917,    0,  898,  902,    0,
      903,  899,  887,  888,  885,  890,  876,  870,  855,  867,

      851,  853,  854,  854,  843,  887, 4664,  839,  823,  833,
      370, 4664,  374,  393,  434,  396,  494,  799,  793, 4664,
      835,  307,  410,  412,  833, 4664,  412,  433,  556,  440,
      618,  436,  486,  343,  375,  377,  522, 4664, 4664,  430,
      391, 4664, 4664,  430,  441, 4664,  463,  474,  773,  775,
      775,    0,  772,    0,    0,  756,  763,  736,  738,    0,
        0,  718,  712,    0,  715,    0,  703,  697,  694,  700,
      690,  680,  684,  667,  660,  650,  654,    0,  631,  642,
      632,  628,  619,  478,  481,  488,  381,  464,  523,  534,
      678,  541,  553,  554,  557,  738,  564,    0,    0, 4664,

      576,  800,  594,  862,  528,  569,  595,  610,    0,  616,
      624,  638,    0,  653,  675, 4664, 4664,  426,  415,  469,
      598,  920,  631,  978,  647, 1036,  662, 1094,  595,  593,
      600,    0,    0,  593,  593,  595,  574,    0,  577,  552,
      554,    0,  545,  542,  539,  522,  524,  504,    0,  492,
      485,    0,  472,  521,  460,  672, 1152,  681, 1210,  702,
     4664,  490, 1270,  712, 1330,  718, 1390,  632,  655,  732,
      746, 1452,  749,  762,  772, 1514,  780,  787, 1576, 4664,
     4664,  511,  587,  725,  756, 1634,  766,  797,  801, 1692,
      803,  257,  472,  811,  813, 1750,  820,  834,  842, 1808,

      849,  461,  450,  450,  413,  407,    0,    0,    0,  417,
        0,    0,    0,    0,    0,    0,  413,  413,  401,  428,
      413, 4664,  371,  625,  665,  856,  859, 1866,  860,  863,
      870, 1924,  873, 1982,  674,  688,  880,  882, 2042,  896,
      904,  906,  916, 2102,  918,  922,  926, 2162,  932,  944,
     2224,  955,  967, 2286,  969,  979, 2344,  980, 2402,  357,
        0,  315,  277,    0,  250,    0,  252,  238,  247, 4664,
      523,  981, 2460,  989,  990,  991, 2520,  998,  695, 1002,
     2580, 1020, 1027, 2640, 1037, 2700, 1038, 2760, 1039, 1048,
     2820, 1049, 1056, 2880, 1078, 1090,    0, 1096, 1097, 1100,

        0, 1106, 1107, 1114,    0, 1118,  174,  185,    0,    0,
        0,    0,  713, 1136, 1143,    0, 1153, 1154,  741,  799,
     1155, 1164, 2940, 1165, 1172, 1176, 1190, 3000, 1194, 1201,
     1211, 3060, 1212, 1213, 1223, 1230, 3120, 1234, 1248, 1249,
     1259, 3180, 1269,  156,  148,  347, 1271, 3240, 1272, 1273,
     3300, 1282,   89,    0,  119, 1283, 1290, 1294, 3360, 1308,
       90,  182,   46,  584,    0, 1338,  786,  848,  832, 1010,
     1067, 4664, 1129, 4664, 4664, 3424, 3436, 3440, 3452, 3458,
     3470, 3476, 3488, 3500, 3512, 3518, 3529, 3541, 3553, 3565,
     3577, 3589, 3601, 3613, 3625, 3637, 3649, 3658, 3667, 3676,

     3688, 3700, 3712, 3724, 3733, 3745, 3757, 3769, 3781, 3793,
     3805, 3817, 3829, 3841, 3853, 3865, 3877, 3889, 3901, 3913,
     3919, 3931, 3943, 3955, 3967, 3979, 3991, 4003, 4015, 4027,
     4039, 4051, 4063, 4075, 4087, 4099, 4111, 4123, 4135, 4147,
     4159, 4171, 4183, 4195, 4207, 4213, 4225, 4237, 4249, 4261,
     4273, 4285, 4297, 4309, 4321, 4333, 4345, 4357, 4369, 4381,
     4393, 4405, 4417, 4429, 4441, 4453, 4465, 4477, 4489, 4495,
     4507, 4519, 4531, 4543, 4555, 4567, 4579, 4591, 4603, 4615,
     4627, 4639, 4651
    } ;

static yyconst flex_int16_t yy_def[684] =
    {   0,
      576,  576,  575,    3,  575,  575,  575,  575,  575,  575,
      577,  578,  575,  575,  579,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  580,  580,  575,  575,  575,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  575,  575,  575,  575,  575,  575,  575,  575,
      577,  575,  581,  582,  582,  582,  575,  575,  575,  583,
      575,  575,  584,  575,  575,  575,  575,  575,  575,  575,
      585,  575,  585,  575,  575,  575,  575,  575,  586,  575,
      575,  575,  575,  575,  575,  575,  575,  580,  587,  588,

      575,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  575,  575,  575,
      575,  575,  589,  575,  575,  575,  590,  591,  592,  582,
      582,  582,  583,  575,  593,  594,  595,  596,  597,  575,
      575,  585,  575,  585,  575,  575,  575,  585,  575,  575,
      575,  586,  575,  575,  575,  575,  575,  587,  575,  598,
      588,  599,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  589,  575,  575,  575,  575,
      590,  575,  600,  591,  601,  592,  602,  582,  582,  575,
      593,  595,  603,  604,  594,  575,  605,  596,  596,  597,
      597,  575,  585,  575,  575,  575,  585,  575,  575,  575,
      575,  575,  575,  606,  607,  575,  608,  609,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      575,  575,  575,  610,  611,  612,  613,  613,  591,  591,
      601,  614,  615,  614,  592,  602,  592,  582,  582,  575,

      603,  603,  604,  604,  616,  616,  596,  596,  229,  617,
      617,  597,  231,  597,  585,  575,  575,  575,  575,  575,
      606,  606,  618,  618,  619,  619,  620,  620,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  575,  622,  575,  623,  623,  624,  624,  625,
      575,  626,  627,  628,  629,  630,  631,  632,  633,  634,
      634,  634,  635,  635,  636,  636,  636,  637,  637,  575,
      575,  638,  638,  639,  639,  639,  640,  640,  641,  641,
      641,  642,  642,  643,  643,  643,  644,  644,  645,  645,

      645,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  647,
      648,  575,  575,  649,  649,  650,  650,  650,  651,  651,
      652,  652,  652,  653,  654,  654,  655,  656,  657,  658,
      659,  660,  660,  661,  660,  662,  663,  664,  665,  666,
      666,  667,  667,  667,  667,  668,  668,  669,  669,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  575,
      671,  651,  651,  655,  665,  655,  672,  656,  673,  656,
      674,  659,  658,  675,  659,  661,  662,  676,  663,  659,
      677,  663,  665,  678,  666,  666,  451,  666,  668,  668,

      457,  668,  669,  669,  459,  669,  670,  670,  670,  670,
      670,  670,  671,  651,  651,  473,  651,  655,  679,  679,
      655,  655,  672,  680,  658,  680,  658,  675,  658,  662,
      659,  681,  658,  662,  662,  662,  676,  680,  665,  680,
      665,  678,  665,  670,  670,  671,  680,  682,  659,  659,
      683,  659,  670,  670,  671,  680,  680,  680,  682,  680,
      670,  671,  670,  671,  670,  671,  671,  671,  671,  671,
      671,  575,  671,  575,    0,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575
    } ;

static yyconst flex_int16_t yy_nxt[4735] =
    {   0,
        7,    8,    9,    8,    8,   10,   11,    7,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   26,   27,   28,   29,   30,   31,   32,
       32,   32,   32,   32,   33,   32,   32,   34,    7,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   32,
       45,   32,   46,   32,   32,   32,   32,   47,   48,   49,
       50,   51,   52,   32,   32,   32,   53,   54,   55,   56,
       57,   62,   59,   57,   59,   59,   58,   65,   68,   71,
       75,  128,   80,   77,   81,   81,   81,  565,   72,   66,
       99,   76,   78,   79,   69,  100,   83,  108,   90,   90,

       90,   93,   94,   63,   96,   97,  109,  116,  113,   86,
      105,  114,   91,   92,  117,   73,   83,  106,   84,   84,
       85,  470,  129,  107,   86,  110,  192,  111,   62,   86,
       91,  563,   87,   88,   89,  561,  112,  193,   92,  120,
      121,  159,  160,  132,   86,  130,  132,   59,  130,  122,
       87,  131,  123,   59,  161,   59,   59,   71,   88,  159,
       63,   89,  133,  133,  133,  169,  144,  160,  165,  152,
      152,  152,  161,  562,  195,  189,  152,  152,  152,  246,
      153,  154,  190,  154,  470,  197,  165,  153,  154,  554,
      154,  196,  134,  145,  135,  153,  154,  170,  136,   61,

      198,  154,  153,  154,   61,  157,  172,  157,  154,  201,
      158,  158,  158,  138,  138,  553,  203,  202,  204,  212,
       83,   61,   85,   85,   85,   83,  545,   84,   84,   85,
      564,   61,  169,   86,  544,   61,   61,  173,   86,  174,
       61,  155,  156,  163,  164,  175,   71,   61,   86,  470,
       61,  213,   61,   86,   61,  220,  139,  147,   62,  155,
       62,  163,  147,   61,  170,   61,   71,  156,  246,  164,
      236,  148,  148,  239,  130,  144,   59,  130,  238,  147,
      131,  242,  145,   83,  512,   90,   90,   90,  236,  147,
      215,  239,  217,  147,  147,  172,   86,  511,  147,   91,

       92,  132,  227,  238,  132,  147,  242,  510,  147,   71,
      147,   86,  147,  132,  149,   71,  132,   91,  144,  147,
      133,  133,  133,  509,  144,   92,  238,   71,  152,  152,
      152,  147,  133,  133,  133,  243,  144,  244,  244,  153,
      154,  232,  154,  232,  238,  227,  233,  233,  233,  470,
      134,  229,  135,  243,  153,  154,  136,  158,  158,  158,
      154,  508,  134,  231,  135,  237,  237,  237,  136,  143,
      234,  235,  240,  241,  222,  242,  212,  154,  316,  154,
      245,  256,  257,  223,  223,  247,  247,   62,  234,  555,
      240,  143,  154,  242,  284,  284,  235,  154,  241,   62,

      507,  143,   62,  316,   61,  143,  143,   61,  213,  317,
      143,  316,   71,  471,   71,  422,  143,  143,  143,   63,
      143,  220,  143,  220,  143,  320,  224,  317,  248,  316,
      470,  215,  148,  148,  217,   71,  169,  285,  214,  147,
      287,  168,   71,  320,  144,  288,  147,  169,  302,  381,
      304,  144,  168,  468,  289,  289,  233,  233,  233,  467,
      466,  380,  290,  465,  318,  319,  464,  381,  322,  171,
       62,  229,  291,  463,  246,  149,  290,  290,  231,  324,
      171,  290,  318,  246,  212,  246,  380,  212,  290,  211,
      319,  290,  211,  290,  361,  290,  361,  292,  216,  362,

      287,  326,   63,  380,  462,  288,  315,  315,  315,  461,
      172,  460,  328,  423,  294,  294,  357,  169,  154,  359,
      154,  380,  295,  422,  513,  470,  363,  513,  434,   62,
       71,  420,  296,  154,   61,  419,  295,  295,  154,  144,
       62,  295,  237,  237,  237,   61,  418,   62,  295,  170,
      417,  295,   61,  295,  154,  295,  154,  297,   71,  361,
       62,  215,  305,   62,  362,   61,  227,  306,   61,  154,
       62,   71,  215,  416,  154,   61,  307,  307,   71,  365,
      144,  415,  143,  414,  308,  566,  470,  220,  566,  413,
      412,  367,  365,  169,  309,  217,   71,   71,  308,  308,

      143,  147,  217,  308,  169,  220,  144,  227,  411,  168,
      308,  410,   71,  308,  302,  308,  147,  308,   71,  310,
       71,  144,  147,  409,  305,  170,   71,  144,  408,  306,
      147,  212,  304,  229,   71,  144,  322,  169,  311,  311,
       71,  407,  168,  220,  147,  406,  312,  405,  229,  144,
      404,  403,  402,  171,  379,   71,  313,   71,  246,  147,
      312,  312,  379,  213,  144,  312,  144,  355,  171,  324,
      145,  212,  312,  246,  354,  312,  231,  312,  212,  312,
      361,  314,  214,  211,  287,  326,  353,  212,  352,  288,
      351,  231,  211,  227,  361,  315,  315,  315,  289,  289,

      328,   62,  350,  213,  349,  348,  290,  154,  361,  154,
      357,  347,  434,  362,  513,  470,  291,  513,   62,  359,
      290,  290,  154,   61,  361,  290,  434,  154,  346,  362,
      345,  169,  290,   63,   71,  290,  168,  290,  143,  290,
      363,  292,  216,  220,  287,  344,  343,  361,   71,  288,
      365,   71,  143,  342,  341,  143,  367,  220,  294,  294,
      220,  340,  169,  322,   71,  546,  295,  168,  143,  339,
      302,  338,  169,  220,   71,  337,  296,  168,  143,  434,
      295,  295,   71,  220,  302,  295,  143,  451,  470,   71,
      336,  220,  295,  147,  322,  295,  335,  295,  144,  295,

      451,  297,   71,  169,  457,  361,  368,  169,  168,  169,
      304,  369,  168,  334,  168,  333,  569,  171,  304,  171,
      370,  370,  246,  332,  246,  379,  171,  331,  371,  330,
      569,  246,  329,  571,  572,  457,  571,  434,  372,  324,
      171,  324,  371,  371,  226,  246,  300,  371,  171,  326,
      470,  326,  299,  246,  371,  171,  298,  371,  459,  371,
      246,  371,  212,  373,   71,  212,  212,  211,  368,  212,
      211,  211,  459,  369,  211,  283,  212,  282,  570,  212,
      328,  211,  374,  374,  211,  281,  361,  328,  361,  207,
      375,  362,  570,  362,  357,  280,  279,  357,  473,  278,

      376,  473,  361,  277,  375,  375,  276,  362,  359,  375,
      361,  359,   62,  275,  274,  362,  375,   61,  477,  375,
      363,  375,   62,  375,   62,  377,  382,   61,  361,   61,
      273,  383,  361,  362,  484,  272,  271,  362,  361,  270,
      384,  384,  486,  362,  365,  269,   71,  268,  385,  267,
      143,  266,  265,  264,  365,  220,  365,   71,  386,  263,
      488,  147,  385,  385,  367,  262,  144,  385,  261,   71,
      494,   71,  260,  147,  385,  147,  259,  385,  144,  385,
      144,  385,  451,  387,  382,  169,  171,  212,  258,  383,
      168,  246,  211,  379,  255,  361,  361,  361,  388,  388,

      362,  362,  362,  254,  361,  379,  389,  379,  361,  362,
      253,  573,  574,  362,  573,  252,  390,  457,  459,  473,
      389,  389,  251,  250,  249,  389,  361,  477,  494,  477,
      226,  362,  389,  361,  219,  389,  363,  389,  362,  389,
      363,  391,  392,  361,  361,  361,  218,  393,  362,  362,
      362,  210,  209,  208,  361,  361,  394,  394,  486,  362,
      362,  207,  361,  205,  395,  484,  200,  362,  571,  572,
      199,  571,  194,  191,  396,  486,  488,  367,  395,  395,
       71,  188,  187,  395,  143,  186,  486,  367,  185,  220,
      395,  184,   71,  395,  494,  395,  143,  395,   71,  397,

      392,  220,  143,  169,  183,  393,  169,  220,  168,  182,
      181,  168,  169,  171,  398,  398,  451,  168,  246,  180,
      171,  179,  399,  178,  171,  246,  177,  176,  451,  246,
      573,  574,  400,  573,  451,  457,  399,  399,  457,  172,
      167,  399,  212,  166,  457,  459,  150,  211,  399,  212,
      142,  399,  459,  399,  211,  399,  459,  401,  424,  212,
      361,  361,  141,  425,  211,  362,  362,  127,  126,  125,
      361,  361,  426,  426,  473,  362,  362,  124,  361,  119,
      427,  473,  361,  362,  118,  115,  104,  362,  103,  102,
      428,  473,  477,  477,  427,  427,  361,  101,   95,  427,

      361,  362,  477,  548,   82,  362,  427,  361,   74,  427,
      484,  427,  362,  427,  548,  429,  424,  361,  361,  361,
       67,  425,  362,  362,  362,   60,  575,  575,  484,  361,
      430,  430,  484,  575,  362,  575,  361,  575,  431,  488,
      361,  362,  575,  575,  575,  362,  575,  575,  432,  486,
      484,  488,  431,  431,  361,  361,  575,  431,  575,  362,
      362,  488,  575,  575,  431,  361,  575,  431,  488,  431,
      362,  431,  548,  433,  214,  361,  435,  361,  361,  361,
      362,  436,  362,  362,  362,  575,  494,  548,  361,  361,
      437,  437,  575,  362,  362,  575,  361,  494,  438,  575,

      361,  362,  575,  575,  575,  362,  575,  494,  439,  548,
      486,  486,  438,  438,  361,  575,  575,  438,  575,  362,
      486,  548,  575,  575,  438,  575,  575,  438,  548,  438,
      575,  438,  548,  440,  364,  575,  287,  575,  575,  566,
      470,  288,  566,  575,  575,  575,  548,  575,  575,  575,
      442,  442,  575,  567,  575,  568,  575,  575,  443,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  444,  575,
      575,  575,  443,  443,  575,  575,  575,  443,  575,  575,
      575,  575,  575,  575,  443,  575,  575,  443,  575,  443,
      575,  443,  575,  445,  216,  575,  435,  575,  575,  575,

      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,
      446,  446,  575,  575,  575,  575,  575,  575,  447,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  448,  575,
      575,  575,  447,  447,  575,  575,  575,  447,  575,  575,
      575,  575,  575,  575,  447,  575,  575,  447,  575,  447,
      575,  447,  575,  449,   71,  575,  575,  575,  368,  575,
      575,  575,  575,  369,  575,  575,  575,  575,  575,  575,
      575,  575,  370,  370,  575,  575,  575,  575,  575,  575,
      371,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      372,  575,  575,  575,  371,  371,  575,  575,  575,  371,

      575,  575,  575,  575,  575,  575,  371,  575,  575,  371,
      575,  371,  575,  371,  575,  373,   71,  575,  575,  575,
      368,  575,  575,  575,  575,  369,  575,  575,  575,  575,
      575,  575,  575,  575,  374,  374,  575,  575,  575,  575,
      575,  575,  375,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  376,  575,  575,  575,  375,  375,  575,  575,
      575,  375,  575,  575,  575,  575,  575,  575,  375,  575,
      575,  375,  575,  375,  575,  375,  575,  377,   71,  575,
      575,  575,  305,  575,  575,  575,  575,  306,  575,  575,
      575,  575,  575,  575,  575,  575,  452,  452,  575,  575,

      575,  575,  575,  575,  453,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  454,  575,  575,  575,  453,  453,
      575,  575,  575,  453,  575,  575,  575,  575,  575,  575,
      453,  575,  575,  453,  575,  453,  575,  453,  575,  455,
      382,  575,  575,  575,  575,  383,  575,  575,  575,  575,
      575,  575,  575,  575,  384,  384,  575,  575,  575,  575,
      575,  575,  385,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  386,  575,  575,  575,  385,  385,  575,  575,
      575,  385,  575,  575,  575,  575,  575,  575,  385,  575,
      575,  385,  575,  385,  575,  385,  575,  387,  382,  575,

      575,  575,  575,  383,  575,  575,  575,  575,  575,  575,
      575,  575,  388,  388,  575,  575,  575,  575,  575,  575,
      389,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      390,  575,  575,  575,  389,  389,  575,  575,  575,  389,
      575,  575,  575,  575,  575,  575,  389,  575,  575,  389,
      575,  389,  575,  389,  575,  391,  392,  575,  575,  575,
      575,  393,  575,  575,  575,  575,  575,  575,  575,  575,
      394,  394,  575,  575,  575,  575,  575,  575,  395,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  396,  575,
      575,  575,  395,  395,  575,  575,  575,  395,  575,  575,

      575,  575,  575,  575,  395,  575,  575,  395,  575,  395,
      575,  395,  575,  397,  392,  575,  575,  575,  575,  393,
      575,  575,  575,  575,  575,  575,  575,  575,  398,  398,
      575,  575,  575,  575,  575,  575,  399,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  400,  575,  575,  575,
      399,  399,  575,  575,  575,  399,  575,  575,  575,  575,
      575,  575,  399,  575,  575,  399,  575,  399,  575,  399,
      575,  401,  424,  575,  575,  575,  575,  425,  575,  575,
      575,  575,  575,  575,  575,  575,  426,  426,  575,  575,
      575,  575,  575,  575,  427,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  428,  575,  575,  575,  427,  427,
      575,  575,  575,  427,  575,  575,  575,  575,  575,  575,
      427,  575,  575,  427,  575,  427,  575,  427,  575,  429,
      424,  575,  575,  575,  575,  425,  575,  575,  575,  575,
      575,  575,  575,  575,  430,  430,  575,  575,  575,  575,
      575,  575,  431,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  432,  575,  575,  575,  431,  431,  575,  575,
      575,  431,  575,  575,  575,  575,  575,  575,  431,  575,
      575,  431,  575,  431,  575,  431,  575,  433,  362,  575,
      575,  575,  575,  362,  575,  575,  575,  575,  575,  575,

      575,  575,  474,  474,  575,  575,  575,  575,  575,  575,
      362,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      362,  575,  575,  575,  362,  362,  575,  575,  575,  362,
      575,  575,  575,  575,  575,  575,  362,  575,  575,  362,
      575,  362,  575,  362,  575,  475,  360,  575,  479,  575,
      575,  575,  575,  436,  575,  575,  575,  575,  575,  575,
      575,  575,  480,  480,  575,  575,  575,  575,  575,  575,
      438,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      481,  575,  575,  575,  438,  438,  575,  575,  575,  438,
      575,  575,  575,  575,  575,  575,  438,  575,  575,  438,

      575,  438,  575,  438,  575,  482,  364,  575,  287,  575,
      575,  575,  575,  288,  575,  575,  575,  575,  575,  575,
      575,  575,  442,  442,  575,  575,  575,  575,  575,  575,
      443,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      444,  575,  575,  575,  443,  443,  575,  575,  575,  443,
      575,  575,  575,  575,  575,  575,  443,  575,  575,  443,
      575,  443,  575,  443,  575,  445,  366,  575,  479,  575,
      575,  575,  575,  436,  575,  575,  575,  575,  575,  575,
      575,  575,  490,  490,  575,  575,  575,  575,  575,  575,
      447,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      491,  575,  575,  575,  447,  447,  575,  575,  575,  447,
      575,  575,  575,  575,  575,  575,  447,  575,  575,  447,
      575,  447,  575,  447,  575,  492,   71,  575,  575,  575,
      368,  575,  575,  575,  575,  369,  575,  575,  575,  575,
      575,  575,  575,  575,  495,  495,  575,  575,  575,  575,
      575,  575,  496,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  497,  575,  575,  575,  496,  496,  575,  575,
      575,  496,  575,  575,  575,  575,  575,  575,  496,  575,
      575,  496,  575,  496,  575,  496,  575,  498,   71,  575,
      575,  575,  305,  575,  575,  575,  575,  306,  575,  575,

      575,  575,  575,  575,  575,  575,  452,  452,  575,  575,
      575,  575,  575,  575,  453,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  454,  575,  575,  575,  453,  453,
      575,  575,  575,  453,  575,  575,  575,  575,  575,  575,
      453,  575,  575,  453,  575,  453,  575,  453,  575,  455,
      382,  575,  575,  575,  575,  383,  575,  575,  575,  575,
      575,  575,  575,  575,  499,  499,  575,  575,  575,  575,
      575,  575,  500,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  501,  575,  575,  575,  500,  500,  575,  575,
      575,  500,  575,  575,  575,  575,  575,  575,  500,  575,

      575,  500,  575,  500,  575,  500,  575,  502,  392,  575,
      575,  575,  575,  393,  575,  575,  575,  575,  575,  575,
      575,  575,  503,  503,  575,  575,  575,  575,  575,  575,
      504,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      505,  575,  575,  575,  504,  504,  575,  575,  575,  504,
      575,  575,  575,  575,  575,  575,  504,  575,  575,  504,
      575,  504,  575,  504,  575,  506,  424,  575,  575,  575,
      575,  425,  575,  575,  575,  575,  575,  575,  575,  575,
      514,  514,  575,  575,  575,  575,  575,  575,  515,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  516,  575,

      575,  575,  515,  515,  575,  575,  575,  515,  575,  575,
      575,  575,  575,  575,  515,  575,  575,  515,  575,  515,
      575,  515,  575,  517,  476,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      521,  521,  575,  575,  575,  575,  575,  575,  522,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  523,  575,
      575,  575,  522,  522,  575,  575,  575,  522,  575,  575,
      575,  575,  575,  575,  522,  575,  575,  522,  575,  522,
      575,  522,  575,  524,  214,  575,  435,  575,  575,  575,
      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,

      437,  437,  575,  575,  575,  575,  575,  575,  438,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  439,  575,
      575,  575,  438,  438,  575,  575,  575,  438,  575,  575,
      575,  575,  575,  575,  438,  575,  575,  438,  575,  438,
      575,  438,  575,  440,  483,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      526,  526,  575,  575,  575,  575,  575,  575,  527,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  528,  575,
      575,  575,  527,  527,  575,  575,  575,  527,  575,  575,
      575,  575,  575,  575,  527,  575,  575,  527,  575,  527,

      575,  527,  575,  529,  364,  575,  435,  575,  575,  575,
      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,
      530,  530,  575,  575,  575,  575,  575,  575,  531,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  532,  575,
      575,  575,  531,  531,  575,  575,  575,  531,  575,  575,
      575,  575,  575,  575,  531,  575,  575,  531,  575,  531,
      575,  531,  575,  533,  487,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      535,  535,  575,  575,  575,  575,  575,  575,  536,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  537,  575,

      575,  575,  536,  536,  575,  575,  575,  536,  575,  575,
      575,  575,  575,  575,  536,  575,  575,  536,  575,  536,
      575,  536,  575,  538,  216,  575,  435,  575,  575,  575,
      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,
      446,  446,  575,  575,  575,  575,  575,  575,  447,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  448,  575,
      575,  575,  447,  447,  575,  575,  575,  447,  575,  575,
      575,  575,  575,  575,  447,  575,  575,  447,  575,  447,
      575,  447,  575,  449,  493,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,

      540,  540,  575,  575,  575,  575,  575,  575,  541,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  542,  575,
      575,  575,  541,  541,  575,  575,  575,  541,  575,  575,
      575,  575,  575,  575,  541,  575,  575,  541,  575,  541,
      575,  541,  575,  543,  476,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      521,  521,  575,  575,  575,  575,  575,  575,  522,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  523,  575,
      575,  575,  522,  522,  575,  575,  575,  522,  575,  575,
      575,  575,  575,  575,  522,  575,  575,  522,  575,  522,

      575,  522,  575,  524,  483,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      526,  526,  575,  575,  575,  575,  575,  575,  527,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  528,  575,
      575,  575,  527,  527,  575,  575,  575,  527,  575,  575,
      575,  575,  575,  575,  527,  575,  575,  527,  575,  527,
      575,  527,  575,  529,  485,  575,  479,  575,  575,  575,
      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,
      550,  550,  575,  575,  575,  575,  575,  575,  531,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  551,  575,

      575,  575,  531,  531,  575,  575,  575,  531,  575,  575,
      575,  575,  575,  575,  531,  575,  575,  531,  575,  531,
      575,  531,  575,  552,  487,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      535,  535,  575,  575,  575,  575,  575,  575,  536,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  537,  575,
      575,  575,  536,  536,  575,  575,  575,  536,  575,  575,
      575,  575,  575,  575,  536,  575,  575,  536,  575,  536,
      575,  536,  575,  538,  493,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,

      540,  540,  575,  575,  575,  575,  575,  575,  541,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  542,  575,
      575,  575,  541,  541,  575,  575,  575,  541,  575,  575,
      575,  575,  575,  575,  541,  575,  575,  541,  575,  541,
      575,  541,  575,  543,  547,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      557,  557,  575,  575,  575,  575,  575,  575,  558,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  559,  575,
      575,  575,  558,  558,  575,  575,  575,  558,  575,  575,
      575,  575,  575,  575,  558,  575,  575,  558,  575,  558,

      575,  558,  575,  560,  364,  575,  435,  575,  575,  575,
      575,  436,  575,  575,  575,  575,  575,  575,  575,  575,
      530,  530,  575,  575,  575,  575,  575,  575,  531,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  532,  575,
      575,  575,  531,  531,  575,  575,  575,  531,  575,  575,
      575,  575,  575,  575,  531,  575,  575,  531,  575,  531,
      575,  531,  575,  533,  547,  575,  519,  575,  575,  575,
      575,  520,  575,  575,  575,  575,  575,  575,  575,  575,
      557,  557,  575,  575,  575,  575,  575,  575,  558,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  559,  575,

      575,  575,  558,  558,  575,  575,  575,  558,  575,  575,
      575,  575,  575,  575,  558,  575,  575,  558,  575,  558,
      575,  558,  575,  560,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   61,  575,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   64,   64,
       64,   64,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   98,   98,   98,   98,   98,   98,
      137,  575,  575,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  140,  140,  140,  140,  140,  140,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      146,  575,  575,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  151,  151,  151,  151,  151,  575,  151,  151,
      151,  151,  151,  151,  162,  162,  162,  575,  162,  168,
      575,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  171,  575,  171,  171,  575,  171,  171,  171,  171,
      171,  171,  171,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  211,  575,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  214,  575,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  216,
      575,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  221,  575,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  225,  575,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  168,  168,  575,  168,  575,  575,  575,  168,  168,
      171,  171,  575,  171,  575,  575,  575,  171,  171,  211,
      211,  575,  211,  575,  575,  575,  211,  211,  286,  575,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,

      293,  575,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  147,  147,  575,  147,
      575,  575,  575,  147,  147,  321,  575,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  323,  575,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  325,
      575,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  327,  575,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  356,  575,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  358,  575,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  360,  575,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,   61,
      575,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  364,  575,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  366,  575,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  323,
      575,  323,  323,  323,  323,  323,  323,  323,  323,  323,

      323,  325,  575,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  327,  575,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,   98,   98,   98,   98,   98,
       98,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  356,  575,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  358,  575,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  360,  575,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  362,
      575,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  286,  575,  286,  286,  286,  286,  286,  286,  286,

      286,  286,  286,  364,  575,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  441,  575,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  366,  575,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  293,
      575,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  168,  575,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  321,  575,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  456,  575,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  323,
      575,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  171,  575,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  325,  575,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  458,  575,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  327,  575,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,   98,
       98,   98,   98,   98,   98,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  211,
      575,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  356,  575,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  472,  575,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  358,  575,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  137,  575,  575,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  362,
      575,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  476,  575,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  360,  575,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  478,  575,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  483,  575,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  485,
      575,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  364,  575,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  441,  575,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  487,  575,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  366,  575,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  489,
      575,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  493,  575,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  456,  575,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  458,
      575,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,   98,   98,   98,   98,   98,   98,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  518,
      575,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,   61,  575,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  286,  575,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  525,  575,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  534,  575,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  293,
      575,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  539,  575,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  362,  575,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  547,  575,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  549,  575,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  556,
      575,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  441,  575,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,    5,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575
    } ;

static yyconst flex_int16_t yy_chk[4735] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,   11,    8,    4,    8,    8,    4,   12,   14,   15,
       19,   54,   22,   21,   22,   22,   22,  563,   15,   12,
       33,   19,   21,   21,   14,   33,   25,   41,   25,   25,

       25,   28,   28,   11,   30,   30,   41,   45,   43,   25,
       40,   43,   25,   25,   45,   15,   24,   40,   24,   24,
       24,  555,   54,   40,   25,   42,  119,   42,   61,   24,
       25,  561,   24,   24,   24,  553,   42,  119,   25,   48,
       48,   87,   87,   58,   24,   57,   58,   57,   57,   48,
       24,   57,   48,   59,   88,   59,   59,   70,   24,   87,
       61,   24,   58,   58,   58,   99,   70,   87,   92,   81,
       81,   81,   88,  555,  121,  117,   83,   83,   83,  171,
       81,   81,  117,   81,  562,  122,   92,   83,   83,  545,
       83,  121,   58,   70,   58,   81,   81,   99,   58,   63,

      122,   81,   83,   83,   63,   86,  171,   86,   83,  125,
       86,   86,   86,   63,   63,  544,  126,  125,  126,  137,
       85,   63,   85,   85,   85,   84,  508,   84,   84,   84,
      562,   63,  168,   85,  507,   63,   63,  102,   84,  102,
       63,   84,   84,   91,   91,  102,  143,   63,   85,  469,
       63,  137,   63,   84,   63,  143,   63,   73,  138,   84,
      139,   91,   73,  138,  168,  139,  147,   84,  392,   91,
      156,   73,   73,  160,  130,  147,  130,  130,  159,   73,
      130,  163,  143,   90,  468,   90,   90,   90,  156,   73,
      138,  160,  139,   73,   73,  392,   90,  467,   73,   90,

       90,  131,  147,  159,  131,   73,  163,  465,   73,  222,
       73,   90,   73,  132,   73,  148,  132,   90,  222,  148,
      131,  131,  131,  463,  148,   90,  161,  149,  152,  152,
      152,  149,  132,  132,  132,  164,  149,  170,  170,  152,
      152,  153,  152,  153,  161,  222,  153,  153,  153,  546,
      131,  148,  131,  164,  152,  152,  131,  157,  157,  157,
      152,  462,  132,  149,  132,  158,  158,  158,  132,  145,
      155,  155,  162,  162,  145,  165,  211,  158,  234,  158,
      170,  180,  180,  145,  145,  172,  172,  287,  155,  546,
      162,  145,  158,  165,  213,  213,  155,  158,  162,  214,

      460,  145,  216,  234,  214,  145,  145,  216,  211,  235,
      145,  236,  223,  423,  224,  421,  223,  145,  224,  287,
      145,  223,  145,  224,  145,  241,  145,  235,  172,  236,
      420,  214,  227,  227,  216,  228,  244,  213,  215,  228,
      215,  244,  230,  241,  228,  215,  230,  245,  223,  319,
      224,  230,  245,  419,  215,  215,  232,  232,  232,  418,
      417,  318,  215,  410,  240,  240,  406,  319,  244,  247,
      288,  228,  215,  405,  247,  227,  215,  215,  230,  245,
      248,  215,  240,  393,  284,  248,  318,  285,  215,  284,
      240,  215,  285,  215,  286,  215,  362,  215,  217,  286,

      217,  247,  288,  320,  404,  217,  233,  233,  233,  403,
      393,  402,  248,  355,  217,  217,  284,  382,  233,  285,
      233,  320,  217,  354,  471,  471,  286,  471,  362,  289,
      305,  353,  217,  233,  289,  351,  217,  217,  233,  305,
      290,  217,  237,  237,  237,  290,  350,  292,  217,  382,
      348,  217,  292,  217,  237,  217,  237,  217,  229,  293,
      294,  289,  229,  295,  293,  294,  305,  229,  295,  237,
      297,  306,  290,  347,  237,  297,  229,  229,  301,  292,
      306,  346,  301,  345,  229,  564,  564,  301,  564,  344,
      343,  293,  294,  383,  229,  295,  303,  307,  229,  229,

      303,  307,  297,  229,  321,  303,  307,  306,  341,  321,
      229,  340,  308,  229,  301,  229,  308,  229,  310,  229,
      231,  308,  310,  339,  231,  383,  311,  310,  337,  231,
      311,  424,  303,  307,  368,  311,  321,  323,  231,  231,
      312,  336,  323,  368,  312,  335,  231,  334,  308,  312,
      331,  330,  329,  325,  310,  314,  231,  369,  325,  314,
      231,  231,  311,  424,  314,  231,  369,  283,  327,  323,
      368,  425,  231,  327,  282,  231,  312,  231,  356,  231,
      435,  231,  291,  356,  291,  325,  281,  358,  280,  291,
      279,  314,  358,  369,  436,  315,  315,  315,  291,  291,

      327,  479,  277,  425,  276,  275,  291,  315,  360,  315,
      356,  274,  435,  360,  513,  513,  291,  513,  364,  358,
      291,  291,  315,  364,  366,  291,  436,  315,  273,  366,
      272,  384,  291,  479,  370,  291,  384,  291,  370,  291,
      360,  291,  296,  370,  296,  271,  270,  519,  371,  296,
      364,  373,  371,  269,  268,  373,  366,  371,  296,  296,
      373,  267,  385,  384,  374,  513,  296,  385,  374,  265,
      370,  263,  387,  374,  375,  262,  296,  387,  375,  519,
      296,  296,  377,  375,  371,  296,  377,  373,  567,  378,
      259,  377,  296,  378,  385,  296,  258,  296,  378,  296,

      374,  296,  302,  388,  387,  520,  302,  389,  388,  391,
      375,  302,  389,  257,  391,  256,  567,  394,  377,  395,
      302,  302,  394,  253,  395,  378,  397,  251,  302,  250,
      567,  397,  249,  569,  569,  388,  569,  520,  302,  389,
      398,  391,  302,  302,  225,  398,  221,  302,  399,  394,
      568,  395,  219,  399,  302,  401,  218,  302,  397,  302,
      401,  302,  426,  302,  304,  427,  429,  426,  304,  430,
      427,  429,  398,  304,  430,  210,  431,  209,  568,  433,
      399,  431,  304,  304,  433,  208,  437,  401,  438,  206,
      304,  437,  568,  438,  426,  205,  204,  427,  429,  203,

      304,  430,  440,  202,  304,  304,  201,  440,  431,  304,
      441,  433,  442,  200,  199,  441,  304,  442,  437,  304,
      438,  304,  443,  304,  445,  304,  322,  443,  446,  445,
      198,  322,  447,  446,  440,  197,  196,  447,  449,  195,
      322,  322,  441,  449,  442,  194,  450,  193,  322,  192,
      450,  191,  189,  188,  443,  450,  445,  452,  322,  186,
      446,  452,  322,  322,  447,  185,  452,  322,  184,  453,
      449,  455,  183,  453,  322,  455,  182,  322,  453,  322,
      455,  322,  450,  322,  324,  456,  458,  472,  181,  324,
      456,  458,  472,  452,  179,  474,  475,  476,  324,  324,

      474,  475,  476,  178,  478,  453,  324,  455,  480,  478,
      177,  570,  570,  480,  570,  176,  324,  456,  458,  472,
      324,  324,  175,  174,  173,  324,  482,  474,  475,  476,
      146,  482,  324,  483,  142,  324,  478,  324,  483,  324,
      480,  324,  326,  485,  487,  489,  141,  326,  485,  487,
      489,  136,  135,  134,  490,  492,  326,  326,  482,  490,
      492,  133,  493,  127,  326,  483,  124,  493,  571,  571,
      123,  571,  120,  118,  326,  485,  487,  489,  326,  326,
      495,  115,  114,  326,  495,  113,  490,  492,  112,  495,
      326,  111,  496,  326,  493,  326,  496,  326,  498,  326,

      328,  496,  498,  499,  110,  328,  500,  498,  499,  109,
      108,  500,  502,  503,  328,  328,  495,  502,  503,  107,
      504,  106,  328,  105,  506,  504,  104,  103,  496,  506,
      573,  573,  328,  573,  498,  499,  328,  328,  500,  100,
       97,  328,  514,   93,  502,  503,   80,  514,  328,  515,
       66,  328,  504,  328,  515,  328,  506,  328,  357,  517,
      518,  521,   65,  357,  517,  518,  521,   52,   51,   50,
      522,  524,  357,  357,  514,  522,  524,   49,  525,   47,
      357,  515,  526,  525,   46,   44,   39,  526,   38,   37,
      357,  517,  518,  521,  357,  357,  527,   36,   29,  357,

      529,  527,  522,  524,   23,  529,  357,  530,   18,  357,
      525,  357,  530,  357,  526,  357,  359,  531,  533,  534,
       13,  359,  531,  533,  534,   10,    5,    0,  527,  535,
      359,  359,  529,    0,  535,    0,  536,    0,  359,  530,
      538,  536,    0,    0,    0,  538,    0,    0,  359,  531,
      533,  534,  359,  359,  539,  540,    0,  359,    0,  539,
      540,  535,    0,    0,  359,  541,    0,  359,  536,  359,
      541,  359,  538,  359,  363,  543,  363,  547,  549,  550,
      543,  363,  547,  549,  550,    0,  539,  540,  552,  556,
      363,  363,    0,  552,  556,    0,  557,  541,  363,    0,

      558,  557,    0,    0,    0,  558,    0,  543,  363,  547,
      549,  550,  363,  363,  560,    0,    0,  363,    0,  560,
      552,  556,    0,    0,  363,    0,    0,  363,  557,  363,
        0,  363,  558,  363,  365,    0,  365,    0,    0,  566,
      566,  365,  566,    0,    0,    0,  560,    0,    0,    0,
      365,  365,    0,  566,    0,  566,    0,    0,  365,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  365,    0,
        0,    0,  365,  365,    0,    0,    0,  365,    0,    0,
        0,    0,    0,    0,  365,    0,    0,  365,    0,  365,
        0,  365,    0,  365,  367,    0,  367,    0,    0,    0,

        0,  367,    0,    0,    0,    0,    0,    0,    0,    0,
      367,  367,    0,    0,    0,    0,    0,    0,  367,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  367,    0,
        0,    0,  367,  367,    0,    0,    0,  367,    0,    0,
        0,    0,    0,    0,  367,    0,    0,  367,    0,  367,
        0,  367,    0,  367,  372,    0,    0,    0,  372,    0,
        0,    0,    0,  372,    0,    0,    0,    0,    0,    0,
        0,    0,  372,  372,    0,    0,    0,    0,    0,    0,
      372,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      372,    0,    0,    0,  372,  372,    0,    0,    0,  372,

        0,    0,    0,    0,    0,    0,  372,    0,    0,  372,
        0,  372,    0,  372,    0,  372,  376,    0,    0,    0,
      376,    0,    0,    0,    0,  376,    0,    0,    0,    0,
        0,    0,    0,    0,  376,  376,    0,    0,    0,    0,
        0,    0,  376,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  376,    0,    0,    0,  376,  376,    0,    0,
        0,  376,    0,    0,    0,    0,    0,    0,  376,    0,
        0,  376,    0,  376,    0,  376,    0,  376,  379,    0,
        0,    0,  379,    0,    0,    0,    0,  379,    0,    0,
        0,    0,    0,    0,    0,    0,  379,  379,    0,    0,

        0,    0,    0,    0,  379,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  379,    0,    0,    0,  379,  379,
        0,    0,    0,  379,    0,    0,    0,    0,    0,    0,
      379,    0,    0,  379,    0,  379,    0,  379,    0,  379,
      386,    0,    0,    0,    0,  386,    0,    0,    0,    0,
        0,    0,    0,    0,  386,  386,    0,    0,    0,    0,
        0,    0,  386,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  386,    0,    0,    0,  386,  386,    0,    0,
        0,  386,    0,    0,    0,    0,    0,    0,  386,    0,
        0,  386,    0,  386,    0,  386,    0,  386,  390,    0,

        0,    0,    0,  390,    0,    0,    0,    0,    0,    0,
        0,    0,  390,  390,    0,    0,    0,    0,    0,    0,
      390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      390,    0,    0,    0,  390,  390,    0,    0,    0,  390,
        0,    0,    0,    0,    0,    0,  390,    0,    0,  390,
        0,  390,    0,  390,    0,  390,  396,    0,    0,    0,
        0,  396,    0,    0,    0,    0,    0,    0,    0,    0,
      396,  396,    0,    0,    0,    0,    0,    0,  396,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  396,    0,
        0,    0,  396,  396,    0,    0,    0,  396,    0,    0,

        0,    0,    0,    0,  396,    0,    0,  396,    0,  396,
        0,  396,    0,  396,  400,    0,    0,    0,    0,  400,
        0,    0,    0,    0,    0,    0,    0,    0,  400,  400,
        0,    0,    0,    0,    0,    0,  400,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  400,    0,    0,    0,
      400,  400,    0,    0,    0,  400,    0,    0,    0,    0,
        0,    0,  400,    0,    0,  400,    0,  400,    0,  400,
        0,  400,  428,    0,    0,    0,    0,  428,    0,    0,
        0,    0,    0,    0,    0,    0,  428,  428,    0,    0,
        0,    0,    0,    0,  428,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  428,    0,    0,    0,  428,  428,
        0,    0,    0,  428,    0,    0,    0,    0,    0,    0,
      428,    0,    0,  428,    0,  428,    0,  428,    0,  428,
      432,    0,    0,    0,    0,  432,    0,    0,    0,    0,
        0,    0,    0,    0,  432,  432,    0,    0,    0,    0,
        0,    0,  432,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  432,    0,    0,    0,  432,  432,    0,    0,
        0,  432,    0,    0,    0,    0,    0,    0,  432,    0,
        0,  432,    0,  432,    0,  432,    0,  432,  434,    0,
        0,    0,    0,  434,    0,    0,    0,    0,    0,    0,

        0,    0,  434,  434,    0,    0,    0,    0,    0,    0,
      434,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      434,    0,    0,    0,  434,  434,    0,    0,    0,  434,
        0,    0,    0,    0,    0,    0,  434,    0,    0,  434,
        0,  434,    0,  434,    0,  434,  439,    0,  439,    0,
        0,    0,    0,  439,    0,    0,    0,    0,    0,    0,
        0,    0,  439,  439,    0,    0,    0,    0,    0,    0,
      439,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      439,    0,    0,    0,  439,  439,    0,    0,    0,  439,
        0,    0,    0,    0,    0,    0,  439,    0,    0,  439,

        0,  439,    0,  439,    0,  439,  444,    0,  444,    0,
        0,    0,    0,  444,    0,    0,    0,    0,    0,    0,
        0,    0,  444,  444,    0,    0,    0,    0,    0,    0,
      444,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      444,    0,    0,    0,  444,  444,    0,    0,    0,  444,
        0,    0,    0,    0,    0,    0,  444,    0,    0,  444,
        0,  444,    0,  444,    0,  444,  448,    0,  448,    0,
        0,    0,    0,  448,    0,    0,    0,    0,    0,    0,
        0,    0,  448,  448,    0,    0,    0,    0,    0,    0,
      448,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      448,    0,    0,    0,  448,  448,    0,    0,    0,  448,
        0,    0,    0,    0,    0,    0,  448,    0,    0,  448,
        0,  448,    0,  448,    0,  448,  451,    0,    0,    0,
      451,    0,    0,    0,    0,  451,    0,    0,    0,    0,
        0,    0,    0,    0,  451,  451,    0,    0,    0,    0,
        0,    0,  451,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  451,    0,    0,    0,  451,  451,    0,    0,
        0,  451,    0,    0,    0,    0,    0,    0,  451,    0,
        0,  451,    0,  451,    0,  451,    0,  451,  454,    0,
        0,    0,  454,    0,    0,    0,    0,  454,    0,    0,

        0,    0,    0,    0,    0,    0,  454,  454,    0,    0,
        0,    0,    0,    0,  454,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  454,    0,    0,    0,  454,  454,
        0,    0,    0,  454,    0,    0,    0,    0,    0,    0,
      454,    0,    0,  454,    0,  454,    0,  454,    0,  454,
      457,    0,    0,    0,    0,  457,    0,    0,    0,    0,
        0,    0,    0,    0,  457,  457,    0,    0,    0,    0,
        0,    0,  457,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  457,    0,    0,    0,  457,  457,    0,    0,
        0,  457,    0,    0,    0,    0,    0,    0,  457,    0,

        0,  457,    0,  457,    0,  457,    0,  457,  459,    0,
        0,    0,    0,  459,    0,    0,    0,    0,    0,    0,
        0,    0,  459,  459,    0,    0,    0,    0,    0,    0,
      459,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      459,    0,    0,    0,  459,  459,    0,    0,    0,  459,
        0,    0,    0,    0,    0,    0,  459,    0,    0,  459,
        0,  459,    0,  459,    0,  459,  473,    0,    0,    0,
        0,  473,    0,    0,    0,    0,    0,    0,    0,    0,
      473,  473,    0,    0,    0,    0,    0,    0,  473,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  473,    0,

        0,    0,  473,  473,    0,    0,    0,  473,    0,    0,
        0,    0,    0,    0,  473,    0,    0,  473,    0,  473,
        0,  473,    0,  473,  477,    0,  477,    0,    0,    0,
        0,  477,    0,    0,    0,    0,    0,    0,    0,    0,
      477,  477,    0,    0,    0,    0,    0,    0,  477,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  477,    0,
        0,    0,  477,  477,    0,    0,    0,  477,    0,    0,
        0,    0,    0,    0,  477,    0,    0,  477,    0,  477,
        0,  477,    0,  477,  481,    0,  481,    0,    0,    0,
        0,  481,    0,    0,    0,    0,    0,    0,    0,    0,

      481,  481,    0,    0,    0,    0,    0,    0,  481,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  481,    0,
        0,    0,  481,  481,    0,    0,    0,  481,    0,    0,
        0,    0,    0,    0,  481,    0,    0,  481,    0,  481,
        0,  481,    0,  481,  484,    0,  484,    0,    0,    0,
        0,  484,    0,    0,    0,    0,    0,    0,    0,    0,
      484,  484,    0,    0,    0,    0,    0,    0,  484,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  484,    0,
        0,    0,  484,  484,    0,    0,    0,  484,    0,    0,
        0,    0,    0,    0,  484,    0,    0,  484,    0,  484,

        0,  484,    0,  484,  486,    0,  486,    0,    0,    0,
        0,  486,    0,    0,    0,    0,    0,    0,    0,    0,
      486,  486,    0,    0,    0,    0,    0,    0,  486,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  486,    0,
        0,    0,  486,  486,    0,    0,    0,  486,    0,    0,
        0,    0,    0,    0,  486,    0,    0,  486,    0,  486,
        0,  486,    0,  486,  488,    0,  488,    0,    0,    0,
        0,  488,    0,    0,    0,    0,    0,    0,    0,    0,
      488,  488,    0,    0,    0,    0,    0,    0,  488,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  488,    0,

        0,    0,  488,  488,    0,    0,    0,  488,    0,    0,
        0,    0,    0,    0,  488,    0,    0,  488,    0,  488,
        0,  488,    0,  488,  491,    0,  491,    0,    0,    0,
        0,  491,    0,    0,    0,    0,    0,    0,    0,    0,
      491,  491,    0,    0,    0,    0,    0,    0,  491,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  491,    0,
        0,    0,  491,  491,    0,    0,    0,  491,    0,    0,
        0,    0,    0,    0,  491,    0,    0,  491,    0,  491,
        0,  491,    0,  491,  494,    0,  494,    0,    0,    0,
        0,  494,    0,    0,    0,    0,    0,    0,    0,    0,

      494,  494,    0,    0,    0,    0,    0,    0,  494,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  494,    0,
        0,    0,  494,  494,    0,    0,    0,  494,    0,    0,
        0,    0,    0,    0,  494,    0,    0,  494,    0,  494,
        0,  494,    0,  494,  523,    0,  523,    0,    0,    0,
        0,  523,    0,    0,    0,    0,    0,    0,    0,    0,
      523,  523,    0,    0,    0,    0,    0,    0,  523,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  523,    0,
        0,    0,  523,  523,    0,    0,    0,  523,    0,    0,
        0,    0,    0,    0,  523,    0,    0,  523,    0,  523,

        0,  523,    0,  523,  528,    0,  528,    0,    0,    0,
        0,  528,    0,    0,    0,    0,    0,    0,    0,    0,
      528,  528,    0,    0,    0,    0,    0,    0,  528,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  528,    0,
        0,    0,  528,  528,    0,    0,    0,  528,    0,    0,
        0,    0,    0,    0,  528,    0,    0,  528,    0,  528,
        0,  528,    0,  528,  532,    0,  532,    0,    0,    0,
        0,  532,    0,    0,    0,    0,    0,    0,    0,    0,
      532,  532,    0,    0,    0,    0,    0,    0,  532,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  532,    0,

        0,    0,  532,  532,    0,    0,    0,  532,    0,    0,
        0,    0,    0,    0,  532,    0,    0,  532,    0,  532,
        0,  532,    0,  532,  537,    0,  537,    0,    0,    0,
        0,  537,    0,    0,    0,    0,    0,    0,    0,    0,
      537,  537,    0,    0,    0,    0,    0,    0,  537,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  537,    0,
        0,    0,  537,  537,    0,    0,    0,  537,    0,    0,
        0,    0,    0,    0,  537,    0,    0,  537,    0,  537,
        0,  537,    0,  537,  542,    0,  542,    0,    0,    0,
        0,  542,    0,    0,    0,    0,    0,    0,    0,    0,

      542,  542,    0,    0,    0,    0,    0,    0,  542,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  542,    0,
        0,    0,  542,  542,    0,    0,    0,  542,    0,    0,
        0,    0,    0,    0,  542,    0,    0,  542,    0,  542,
        0,  542,    0,  542,  548,    0,  548,    0,    0,    0,
        0,  548,    0,    0,    0,    0,    0,    0,    0,    0,
      548,  548,    0,    0,    0,    0,    0,    0,  548,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  548,    0,
        0,    0,  548,  548,    0,    0,    0,  548,    0,    0,
        0,    0,    0,    0,  548,    0,    0,  548,    0,  548,

        0,  548,    0,  548,  551,    0,  551,    0,    0,    0,
        0,  551,    0,    0,    0,    0,    0,    0,    0,    0,
      551,  551,    0,    0,    0,    0,    0,    0,  551,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  551,    0,
        0,    0,  551,  551,    0,    0,    0,  551,    0,    0,
        0,    0,    0,    0,  551,    0,    0,  551,    0,  551,
        0,  551,    0,  551,  559,    0,  559,    0,    0,    0,
        0,  559,    0,    0,    0,    0,    0,    0,    0,    0,
      559,  559,    0,    0,    0,    0,    0,    0,  559,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  559,    0,

        0,    0,  559,  559,    0,    0,    0,  559,    0,    0,
        0,    0,    0,    0,  559,    0,    0,  559,    0,  559,
        0,  559,    0,  559,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,    0,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  580,  580,  580,  580,  580,  580,
      581,    0,    0,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  582,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      584,    0,    0,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  585,  585,  585,  585,  585,    0,  585,  585,
      585,  585,  585,  585,  586,  586,  586,    0,  586,  587,
        0,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  588,    0,  588,  588,    0,  588,  588,  588,  588,
      588,  588,  588,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  590,    0,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  591,    0,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  592,
        0,  592,  592,  592,  592,  592,  592,  592,  592,  592,

      592,  593,    0,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  594,    0,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  598,  598,    0,  598,    0,    0,    0,  598,  598,
      599,  599,    0,  599,    0,    0,    0,  599,  599,  600,
      600,    0,  600,    0,    0,    0,  600,  600,  601,    0,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      602,    0,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  605,  605,    0,  605,
        0,    0,    0,  605,  605,  606,    0,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  607,    0,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  608,
        0,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  609,    0,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  610,    0,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  611,    0,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  612,    0,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  613,
        0,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  614,    0,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  615,    0,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  618,
        0,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  619,    0,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  620,    0,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  621,  621,  621,  621,  621,
      621,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  623,    0,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  624,    0,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  625,    0,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  626,
        0,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  627,    0,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  628,    0,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  629,    0,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  630,    0,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  631,
        0,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  638,    0,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  639,    0,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  640,    0,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  641,
        0,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  642,    0,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  643,    0,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  644,    0,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  644,  645,    0,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  646,
      646,  646,  646,  646,  646,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  649,
        0,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  650,    0,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  651,    0,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  652,    0,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  653,    0,    0,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  654,
        0,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  655,    0,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  656,    0,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  657,    0,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  658,    0,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
        0,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  660,    0,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  661,    0,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  662,    0,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  663,    0,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  664,
        0,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  665,    0,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  668,    0,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  669,
        0,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  672,
        0,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  673,    0,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  674,    0,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  675,    0,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  676,    0,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  677,
        0,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  678,    0,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  679,    0,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  680,    0,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  681,    0,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
        0,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  683,    0,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cb_flex_debug;
int cb_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cbtext;
#line 1 "lexer.l"
/*
// $Id: lexer.l,v 1.10 2003/09/08 22:19:16 abrown Exp $
// ----------------------------------------------------------------------
//
//  C-Breeze
//  C Compiler Framework
// 
//  Copyright (c) 2003 University of Texas at Austin
// 
//  Samuel Z. Guyer
//  Adam Brown
//  Teck Bok Tok
//  Paul Arthur Navratil
//  Calvin Lin
// 
//  Permission is hereby granted, free of charge, to any person
//  obtaining a copy of this software and associated documentation
//  files (the "Software"), to deal in the Software without
//  restriction, including without limitation the rights to use, copy,
//  modify, merge, publish, distribute, sublicense, and/or sell copies
//  of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//  NONINFRINGEMENT.  IN NO EVENT SHALL THE UNIVERSITY OF TEXAS AT
//  AUSTIN BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
//  OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
//  We acknowledge the C-to-C Translator from MIT Laboratory for
//  Computer Science for inspiring parts of the C-Breeze design.
//
// ----------------------------------------------------------------------
*/
#line 42 "lexer.l"

#include "c_breeze.h"
#include "meta.h"
#include "parser.tab.h"

exprNode *char_constant(const char *);
exprNode *int_constant(const char *, bool decimal, bool octal);
exprNode *wide_char_const(const char *);
exprNode *float_constant(const char *s);
char * convert_escape_sequences(char *string);
void parse_line_directive(char *s);
void save_pragma_directive(char *s);

void EnterC(void);
void ExitC(void);

#define MAX_FILENAME 400

char * lexer_line_start;

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size) \
    if (fgets(buf, max_size, cbin)==0) { result=0; } \
    else { lexer_line_start = (char *)buf; result = strlen(buf); }

#undef cbwrap


/* Escape sequences: These two escape sequences seem completely weird. The
second component of the regexp is eating up the entire rest of the
string. I just fixed a freaky bug caused by the fact that the original
version didn't have double quote!
SZG.
*/
#line 1809 "lexer.cb.cc"

#define INITIAL 0
#define C 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cblex_destroy (void );

int cbget_debug (void );

void cbset_debug (int debug_flag  );

YY_EXTRA_TYPE cbget_extra (void );

void cbset_extra (YY_EXTRA_TYPE user_defined  );

FILE *cbget_in (void );

void cbset_in  (FILE * in_str  );

FILE *cbget_out (void );

void cbset_out  (FILE * out_str  );

int cbget_leng (void );

char *cbget_text (void );

int cbget_lineno (void );

void cbset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cbwrap (void );
#else
extern int cbwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cbtext, cbleng, 1, cbout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cbin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cbin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cbin))==0 && ferror(cbin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cbin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cblex (void);

#define YY_DECL int cblex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cbtext and cbleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cbleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cbtext[cbleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 106 "lexer.l"


	BEGIN(C);

#line 2005 "lexer.cb.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cbin )
			cbin = stdin;

		if ( ! cbout )
			cbout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cbensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cb_create_buffer(cbin,YY_BUF_SIZE );
		}

		cb_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cbtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 576 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4664 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 110 "lexer.l"
{  }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 112 "lexer.l"
{  CBZ::current_line++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 114 "lexer.l"
{ cblval.tok = get_pos(); return ctokAUTO;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 115 "lexer.l"
{ cblval.tok = get_pos(); return ctokBREAK;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 116 "lexer.l"
{ cblval.tok = get_pos(); return ctokCASE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 117 "lexer.l"
{ cblval.tok = get_pos(); return ctokCHAR;}
	YY_BREAK
case 7:
#line 119 "lexer.l"
case 8:
YY_RULE_SETUP
#line 119 "lexer.l"
{ cblval.tok = get_pos(); return ctokCONST;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 120 "lexer.l"
{ cblval.tok = get_pos(); return ctokCONTINUE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 121 "lexer.l"
{ cblval.tok = get_pos(); return ctokDEFAULT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "lexer.l"
{ cblval.tok = get_pos(); return ctokDO;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "lexer.l"
{ cblval.tok = get_pos(); return ctokDOUBLE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "lexer.l"
{ cblval.tok = get_pos(); return ctokELSE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 125 "lexer.l"
{ cblval.tok = get_pos(); return ctokENUM;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "lexer.l"
{ cblval.tok = get_pos(); return ctokEXTERN;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 127 "lexer.l"
{ cblval.tok = get_pos(); return ctokFLOAT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "lexer.l"
{ cblval.tok = get_pos(); return ctokFOR;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "lexer.l"
{ cblval.tok = get_pos(); return ctokGOTO;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "lexer.l"
{ cblval.tok = get_pos(); return ctokIF;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 131 "lexer.l"
{ cblval.tok = get_pos(); return ctokINT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "lexer.l"
{ cblval.tok = get_pos(); return ctokLONG;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "lexer.l"
{ cblval.tok = get_pos(); return ctokREGISTER;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 134 "lexer.l"
{ cblval.tok = get_pos(); return ctokRETURN;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "lexer.l"
{ cblval.tok = get_pos(); return ctokSHORT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 136 "lexer.l"
{ cblval.tok = get_pos(); return ctokSIGNED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "lexer.l"
{ cblval.tok = get_pos(); return ctokSIZEOF;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "lexer.l"
{ cblval.tok = get_pos(); return ctokSTATIC;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "lexer.l"
{ cblval.tok = get_pos(); return ctokSTRUCT;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "lexer.l"
{ cblval.tok = get_pos(); return ctokSWITCH;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "lexer.l"
{ cblval.tok = get_pos(); return ctokTYPEDEF;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "lexer.l"
{ cblval.tok = get_pos(); return ctokUNION;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "lexer.l"
{ cblval.tok = get_pos(); return ctokUNSIGNED;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "lexer.l"
{ cblval.tok = get_pos(); return ctokVOID;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "lexer.l"
{ cblval.tok = get_pos(); return ctokVOLATILE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "lexer.l"
{ cblval.tok = get_pos(); return ctokWHILE;}
	YY_BREAK
case 36:
#line 149 "lexer.l"
case 37:
#line 150 "lexer.l"
case 38:
YY_RULE_SETUP
#line 150 "lexer.l"
{ cblval.tok = get_pos(); return ctokINLINE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 151 "lexer.l"
{ cblval.tok = get_pos(); return ctokATTRIBUTE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 154 "lexer.l"
{ cblval.tok = get_pos();
                  cblval.idN = new idNode(cbtext, cblval.tok);
                  if (CBZ::current_unit->types()->is_a_type(cblval.idN->name())) {
                    cblval.idN->decl(CBZ::current_unit->types()->lookup(cblval.idN->name()));
                    return TYPEDEFname;
                  }
                  else
                   return IDENTIFIER; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 163 "lexer.l"
{ cblval.exprN = int_constant(cbtext, true, false);
                         return INTEGERconstant; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "lexer.l"
{ cblval.exprN = int_constant(cbtext, false, true);
                         return OCTALconstant; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "lexer.l"
{ cblval.exprN = int_constant(cbtext, false, false);
                         return HEXconstant; }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 172 "lexer.l"
{ yyless(cbleng-1);
                             cblval.exprN = float_constant(cbtext);
                             return FLOATINGconstant; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "lexer.l"
{ cblval.exprN = char_constant(cbtext);
                         return CHARACTERconstant; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 180 "lexer.l"
{ CBZ::SyntaxError(string("Unmatched '"));
                         cblval.exprN = char_constant("'X'");
                         CBZ::current_line++;
                         return CHARACTERconstant; }
	YY_BREAK
case 47:
#line 187 "lexer.l"
case 48:
#line 188 "lexer.l"
case 49:
YY_RULE_SETUP
#line 188 "lexer.l"
{ /* bad char constant */
                                  cblval.exprN = char_constant("'X'");
                                  CBZ::SyntaxError(
                                    string("invalid char constant ") + string(cbtext) +
                                    string(", treating as 'X'"));
                                  return CHARACTERconstant;
                                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 197 "lexer.l"
{ cblval.exprN = wide_char_const(cbtext);
                         return WIDECHARconstant;
                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 202 "lexer.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 212 "lexer.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 222 "lexer.l"
{ /* bad string constant */
            /* (unterminated string constants are caught by preprocessor) */
                      CBZ::SyntaxError(
                        string("string contains invalid escape code") +
                        string(cbtext));
		      cblval.tok = get_pos();
                      cblval.exprN = new constNode(constant(new string("")),
                                                   "\"\"",cblval.tok);
                      return STRINGliteral;
                    }
	YY_BREAK
case 54:
/* rule 54 can match eol */
#line 235 "lexer.l"
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{
                     parse_line_directive(cbtext); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ EnterC(); CBZ::current_line++; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 240 "lexer.l"
{ ExitC(); CBZ::current_line++; }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 242 "lexer.l"
{
                     save_pragma_directive(cbtext);
                     CBZ::current_line++; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 246 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 247 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACE;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 249 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACKET;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 250 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACKET;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 251 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokDOT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 252 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokAND;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 253 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokSTAR;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 254 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokPLUS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 255 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokMINUS;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 256 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokTILDE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 257 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokNOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 258 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokDIVIDE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 259 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokPERCENT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 260 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokLESS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 261 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokGREATER;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 262 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokHAT;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 263 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokOR;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 264 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokQUESTION;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 265 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokCOLON;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 266 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokSEMICOLON;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 267 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokEQUALS;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 269 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTPAREN;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 270 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTPAREN;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 271 "lexer.l"
{ cblval.tok = get_pos(); return (int)ctokCOMMA;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "lexer.l"
{ cblval.tok = get_pos(); return ctokARROW;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "lexer.l"
{ cblval.tok = get_pos(); return ctokICR;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "lexer.l"
{ cblval.tok = get_pos(); return ctokDECR;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "lexer.l"
{ cblval.tok = get_pos(); return ctokLS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "lexer.l"
{ cblval.tok = get_pos(); return ctokRS;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "lexer.l"
{ cblval.tok = get_pos(); return ctokLE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "lexer.l"
{ cblval.tok = get_pos(); return ctokGE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "lexer.l"
{ cblval.tok = get_pos(); return ctokEQ;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "lexer.l"
{ cblval.tok = get_pos(); return ctokNE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "lexer.l"
{ cblval.tok = get_pos(); return ctokANDAND;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "lexer.l"
{ cblval.tok = get_pos(); return ctokOROR;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 284 "lexer.l"
{ cblval.tok = get_pos(); return ctokMULTassign;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 285 "lexer.l"
{ cblval.tok = get_pos(); return ctokDIVassign;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 286 "lexer.l"
{ cblval.tok = get_pos(); return ctokMODassign;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 287 "lexer.l"
{ cblval.tok = get_pos(); return ctokPLUSassign;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 288 "lexer.l"
{ cblval.tok = get_pos(); return ctokMINUSassign;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "lexer.l"
{ cblval.tok = get_pos(); return ctokLSassign;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "lexer.l"
{ cblval.tok = get_pos(); return ctokRSassign;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "lexer.l"
{ cblval.tok = get_pos(); return ctokANDassign;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "lexer.l"
{ cblval.tok = get_pos(); return ctokERassign;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "lexer.l"
{ cblval.tok = get_pos(); return ctokORassign;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "lexer.l"
{ cblval.tok = get_pos(); return ctokELLIPSIS;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 296 "lexer.l"
{ cblval.tok = get_pos(); return ctokMETA_TYPE_EXPR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 297 "lexer.l"
{ cblval.tok = get_pos(); return ctokMETA_TYPE_STMT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 298 "lexer.l"
{ if (metaexprNode::is_meta_expr(cbtext+1)) {
                            cblval.tok = get_pos();
                            cblval.idN = new idNode(cbtext, cblval.tok);
                            return ctokMETA_EXPR;
                          }
                          else if(metastmtNode::is_meta_stmt(cbtext+1)) {
			    cblval.tok = get_pos();
                            cblval.idN = new idNode(cbtext, cblval.tok);
                            return ctokMETA_STMT;
		          }
                                   
                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 311 "lexer.l"
{ char tmp[20];
                          CBZ::char_to_text(tmp, *cbtext);
                          CBZ::SyntaxError(string("Unexpected character: ") + string(tmp));
                        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 316 "lexer.l"
ECHO;
	YY_BREAK
#line 2690 "lexer.cb.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cbin at a new source and called
			 * cblex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cbin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cbwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cbtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cblex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cbrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cbrestart(cbin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cbrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 576 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 576 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 575);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cbtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cbrestart(cbin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cbwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cbtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cbrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cbensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cb_create_buffer(cbin,YY_BUF_SIZE );
	}

	cb_init_buffer(YY_CURRENT_BUFFER,input_file );
	cb_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cb_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cbpop_buffer_state();
	 *		cbpush_buffer_state(new_buffer);
     */
	cbensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cb_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cbwrap()) processing, but the only time this flag
	 * is looked at is after cbwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cb_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cbin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cb_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cb_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cballoc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cb_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cb_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cb_create_buffer()
 * 
 */
    void cb_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cbfree((void *) b->yy_ch_buf  );

	cbfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cbrestart() or at EOF.
 */
    static void cb_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cb_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cb_init_buffer was _probably_
     * called from cbrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cb_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cb_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cbpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cbensure_buffer_stack();

	/* This block is copied from cb_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cb_switch_to_buffer. */
	cb_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cbpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cb_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cb_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cbensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cballoc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cbensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cbrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cbensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cb_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cballoc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cb_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cb_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cblex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cb_scan_bytes() instead.
 */
YY_BUFFER_STATE cb_scan_string (yyconst char * yystr )
{
    
	return cb_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cblex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cb_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cballoc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cb_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cb_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cb_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cbtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cbtext[cbleng] = (yy_hold_char); \
		(yy_c_buf_p) = cbtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cbleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cbget_lineno  (void)
{
        
    return cblineno;
}

/** Get the input stream.
 * 
 */
FILE *cbget_in  (void)
{
        return cbin;
}

/** Get the output stream.
 * 
 */
FILE *cbget_out  (void)
{
        return cbout;
}

/** Get the length of the current token.
 * 
 */
int cbget_leng  (void)
{
        return cbleng;
}

/** Get the current token.
 * 
 */

char *cbget_text  (void)
{
        return cbtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cbset_lineno (int  line_number )
{
    
    cblineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cb_switch_to_buffer
 */
void cbset_in (FILE *  in_str )
{
        cbin = in_str ;
}

void cbset_out (FILE *  out_str )
{
        cbout = out_str ;
}

int cbget_debug  (void)
{
        return cb_flex_debug;
}

void cbset_debug (int  bdebug )
{
        cb_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cblex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cbin = stdin;
    cbout = stdout;
#else
    cbin = (FILE *) 0;
    cbout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cblex_init()
     */
    return 0;
}

/* cblex_destroy is for both reentrant and non-reentrant scanners. */
int cblex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cb_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cbpop_buffer_state();
	}

	/* Destroy the stack itself. */
	cbfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cblex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cballoc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cbrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cbfree (void * ptr )
{
	free( (char *) ptr );	/* see cbrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 316 "lexer.l"



/*  I won't bother to provide any error recovery. I won't even handle
unknown characters */

/*******************************************************************/


int hex_digit(char in)
{
    if (in >= '0' && in <= '9') return(in - '0');
    if (in >= 'a' && in <= 'f') return(in - 'a' + 10);
    if (in >= 'A' && in <= 'F') return(in - 'A' + 10);
    return -1;
}

int octal_digit(char in)
{
    if (in >= '0' && in <= '7') return(in - '0');
    return -1;
}

int parse_char_constant(const char * s, int * actual_read)
{
    assert(s[0] == '\\');
    *actual_read = 2;

    switch (s[1]) {
      case 'n': return '\n';
      case 't': return '\t';
      case 'v': return '\v';
      case 'b': return '\b';
      case 'r': return '\r';
      case 'f': return '\f';
      case 'a': return '\a';
      case '\\': return '\\';
      case '?': return '\?';
      case '\'': return '\'';
      case '\"': return '\"';
      case 'x': {
	  int val=0, tmp, i;

	  for (i=2; (tmp = hex_digit(s[i])) >= 0; i++) {
	      val = 16 * val + tmp;
	  }
	  *actual_read = i;
	  if (i==2) {
	      CBZ::SyntaxError(string("expecting hex digits after \\x"));
	      return(-1);
	  }
	  if (val > basic_type::TARGET_MAX_UCHAR) {
	      CBZ::SyntaxError(string("explicit hex character (\\x) out of range"));
	      return(-1);
	  }
	  return(val);
	  break;
      }
      default:
	if (octal_digit(s[1]) >= 0) {  /* octal constant */
	    int val=0, tmp, i;
	
	    for (i=1; (tmp = octal_digit(s[i])) >= 0  && i<4; i++) {
		val = 8 * val + tmp;
	    }
	    if (val > basic_type::TARGET_MAX_UCHAR) {
		CBZ::SyntaxError(string("explicit octal character out of range"));
		return(-1);
	    }
	    *actual_read = i;
	    return(val);
	} else {
	    CBZ::SyntaxError(string("unknown special character \"\\") + string(&s[1]) + string("\""));
	    return(-1);
	}
    }
    /* unreachable */
}

exprNode *char_constant(const char *s)
{
  int read, value;

  assert(s[0] == '\'');
  if (s[1] == '\\') {
    value = parse_char_constant(&s[1], &read);
    if (value < 0) value = 'X';
	
    if (s[1+read] != '\'')
      CBZ::Warning(1,
		   string("ignoring extra characters at end of char constant ") + string(s));
  } else {
    value = s[1];
    if (s[2] != '\'')
      CBZ::Warning(1,
		   string("ignoring extra characters at end of char constant ") + string(s));
  }

  cblval.tok = get_pos();

  return new constNode(constant((char)value), s, Coord(cblval.tok));
}

exprNode *wide_char_const(const char *s)
{
  assert(s[0]=='L' && s[1]== '\'');
  return(char_constant(&s[1]));
}


char *convert_escape_sequences(char *string)
{
  char *read, *write;
  int actual_read, val;

  write = read = string;

  while (*read != 0) {
    if (*read == '\\') {
      val = parse_char_constant(read, &actual_read);
      if (val < 0) {
	*write++ = 'X';
      } else {
	*write++ = (char) val;
      }
      read += actual_read;
    } else {
      *write++ = *read++;
    }
  }
  *write = 0;

  return(string);
}

#ifdef NO_STRTOUL
unsigned long strtoul(const char *c,char **p,int base) {
  return strtol(c,p,base);
}
#endif


exprNode * int_constant(const char *s, bool decimal, bool octal)
{
  exprNode * c;
  char ch;
  const char *p;
  bool is_unsigned;
  int longness;  /* 0 == not, 1==long, 2==long long */
  unsigned long value;

  longness = 0;
  is_unsigned = !decimal;

  p = &s[strlen(s) - 1];  /* address of last char in string */
  while (!isxdigit(*p)) {
    ch = toupper(*p);
    if (ch == 'U') {
      is_unsigned = true;
    } else if (ch == 'L') {
      ++longness;
    }
    p--;
  }

  cblval.tok = get_pos();

  // the following breaks if TARGET_ULONG is 'long long'
  value = (unsigned long) strtoul(s, NULL, 0);

  if (longness==0 && !is_unsigned && value <= basic_type::TARGET_MAX_INT)
    c = new constNode(constant((int)value), s, Coord(cblval.tok));
  else
    if (longness==0 && value <= basic_type::TARGET_MAX_UINT)
      c = new constNode(constant((unsigned int) value), s, Coord(cblval.tok));
    else
      if (longness==1 && !is_unsigned && value <= basic_type::TARGET_MAX_LONG)
	c = new constNode(constant((long)value), s, Coord(cblval.tok));
      else
	if (longness==1) {
	  if (value > basic_type::TARGET_MAX_ULONG) {
	    CBZ::SyntaxError(string("Constant `") + s + string("' is out of range"));
	  }
	  c = new constNode(constant((unsigned long) value), s, Coord(cblval.tok));
	} else {
	  assert(longness==2);

	  if (CBZ::ANSIOnly)
	    CBZ::SyntaxError(Coord(cblval.tok), "long long constants not allowed with -ansi switch");

	  // store constant value as unsigned long, but cast it to
	  //   appropriate long long type

	  c = new castNode((typeNode *) (is_unsigned ?
			    new primNode(basic_type::ULongLong) : new primNode(basic_type::SLongLong)),
			    new constNode(constant((unsigned long) value), s,
					  Coord(cblval.tok)),
			    true, Coord(cblval.tok));
	}

  return(c);
}


exprNode *float_constant(const char *s)
{
  exprNode * c;

  char ch; const char *p;
  bool is_long = false, is_float = false;
  double value;

  p = &s[strlen(s) - 1];  /* address of last char in string */
  while (!isdigit(*p)) {
    ch = toupper(*p);
    if (ch == 'F') {
      is_float = true;
    } else if (ch == 'L') {
      is_long = true;
    }
    p--;
  }

  cblval.tok = get_pos();

  value = atof(s);

  if (is_float)
      c = new constNode(constant((float) value), s, Coord(cblval.tok));
  else
    if (is_long)
      // we don't directly represent long double constants -- store it
      // as a double constant implicitly cast to long double

      // SZG: Dangerous cast...

      c = new castNode((typeNode *) new primNode(basic_type::LongDouble),
		       new constNode(constant((double) value), s, Coord(cblval.tok)),
		       true, Coord(cblval.tok));
    else
      c = new constNode(constant((double) value), s, Coord(cblval.tok));

  return(c);
}

// List *pragmas = NULL;


//   Parse a traditional or ANSI-C line number specification.
//
//   ANSI-C:   # line <n> \n
//             # line <n> "<filename>" \n
//   K&R       # <n> "<filename>" \n

void parse_line_directive(char *s)
{ char *p;
  int val;

  // Read until a '#' sign
  for (p = s; *p != '\n' && *p != '#'; p++);
  assert(*p != '\n');

  // Read spaces and tabs
  for (p = p + 1; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
  assert(*p != '\n');

  // Swallow "line" and any trailing whitespace
  if (strncmp(p, "line", 4) == 0) {
    p = p + 4;

    // There must be whitespace
    assert(*p == ' ' || *p == '\t');

    for (     ; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
    assert(*p != '\n');
  }

  // Read an integer from the string
  if (isdigit(*p))
    for (val = 0; *p && isdigit(*p); p++)
      val = val * 10 + (*p - '0');
  else {
    CBZ::SyntaxError(string("#line error: expecting line number"));
    CBZ::current_line++;
    return;
  }

  // Set this to true when the line directive starts a new file...
  bool new_file = false;

  // Skip whitespace
  for (     ; *p != '\n' && (*p == ' ' || *p == '\t'); p++);

  // Should be pointing at a '"' to start the filename or end of line
  if (*p != '\n' && *p != '\"') {
    CBZ::SyntaxError(string("#line error: expecting a filename string"));
    CBZ::current_line++;
    return;
  }
  else if (*p == '\"') {
    char fname[MAX_FILENAME + 1];
    int  f;

    for (f = 0, p++; *p != '\n' && *p != '\"' && f < MAX_FILENAME; p++, f++)
      fname[f] = *p;
    fname[f] = '\0';

    if (*p != '"') {
      CBZ::SyntaxError(string("#line error: Filename string missing close `\"'"));
      CBZ::current_line++;
      return;
    }
    else
      if (f == MAX_FILENAME)
	CBZ::Warning(1, string("#line error: filename truncated to 400 characters"));

    // Skip white space again
    for (p++; *p != '\n' && (*p == ' ' || *p == '\t'); p++);

    // Look at the number after the file name...
    if (*p == '1' || *p == '\n')
      new_file = true;

    if (! CBZ::IgnoreLineDirectives &&
        ! CBZ::is_file_included() &&
	(CBZ::current_unit->input_file() != fname)) {

      // SetFile will change file mode to included.  Generate an include
      //   that includes this new file.

      char line[MAX_FILENAME + 13];

      sprintf(line,"#include \"%s\"", fname);

      textNode * pragma = new textNode(line, true, Coord(get_pos()));
      CBZ::pragmas.push_back(pragma);
      if ( CBZ::current_unit->pragma_level() ) {
         CBZ::Warning(1, pragma->coord(), "Pragma suppressed in output");
         pragma->suppress_output(true);
      }
    }

    // --- Switch to the file specified

    if (! CBZ::IgnoreLineDirectives)
      CBZ::set_file(fname, val, new_file);
  }

  if (CBZ::IgnoreLineDirectives)
    CBZ::current_line++;
  else
    CBZ::current_line = val;
}

// Save pragma directive for later collection into source tree.

void save_pragma_directive(char *s)
{
   if (CBZ::is_file_included())
     return;

   textNode * pragma = new textNode(s, true, Coord(get_pos()));
   CBZ::pragmas.push_back(pragma);
   if ( CBZ::current_unit->pragma_level() ) {
      CBZ::Warning(1, pragma->coord(), "Pragma suppressed in output");
      pragma->suppress_output(true);
   }
}

int cbwrap()
{
   return 1;
}

void EnterC()
{
   BEGIN(C);
}

void ExitC()
{
   BEGIN(INITIAL);
}



