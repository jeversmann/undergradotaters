
#line 3 "lex.ann.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer ann_create_buffer
#define yy_delete_buffer ann_delete_buffer
#define yy_flex_debug ann_flex_debug
#define yy_init_buffer ann_init_buffer
#define yy_flush_buffer ann_flush_buffer
#define yy_load_buffer_state ann_load_buffer_state
#define yy_switch_to_buffer ann_switch_to_buffer
#define yyin annin
#define yyleng annleng
#define yylex annlex
#define yylineno annlineno
#define yyout annout
#define yyrestart annrestart
#define yytext anntext
#define yywrap annwrap
#define yyalloc annalloc
#define yyrealloc annrealloc
#define yyfree annfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE annrestart(annin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int annleng;

extern FILE *annin, *annout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE annlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-annlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < annleng; ++yyl )\
                    if ( anntext[yyl] == '\n' )\
                        --annlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up anntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up anntext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via annrestart()), so that the user can continue scanning by
	 * just pointing annin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when anntext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int annleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow annwrap()'s to do buffer switches
 * instead of setting up a fresh annin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void annrestart (FILE *input_file  );
void ann_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE ann_create_buffer (FILE *file,int size  );
void ann_delete_buffer (YY_BUFFER_STATE b  );
void ann_flush_buffer (YY_BUFFER_STATE b  );
void annpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void annpop_buffer_state (void );

static void annensure_buffer_stack (void );
static void ann_load_buffer_state (void );
static void ann_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER ann_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE ann_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE ann_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE ann_scan_bytes (yyconst char *bytes,int len  );

void *annalloc (yy_size_t  );
void *annrealloc (void *,yy_size_t  );
void annfree (void *  );

#define yy_new_buffer ann_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        annensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ann_create_buffer(annin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        annensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ann_create_buffer(annin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define annwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *annin = (FILE *) 0, *annout = (FILE *) 0;

typedef int yy_state_type;

extern int annlineno;

int annlineno = 1;

extern char *anntext;
#define yytext_ptr anntext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up anntext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	annleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1097] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      190,   10,    7,    8,   10,   10,    7,   10,   79,    7,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   73,
       73,   79,   55,   79,   79,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       79,   79,    7,   79,  189,    7,  189,   20,  183,    7,
      147,  183,  183,  149,  142,  183,  158,  159,  143,  144,
      160,  145,  141,  148,  119,  119,  155,  156,  150,  157,
      151,  154,  118,  118,  139,  140,  152,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  137,  153,  138,  146,    7,  183,  188,
        7,  188,  187,  187,  187,  187,    6,    7,  188,    7,
        3,    0,    7,    0,    0,    0,    0,   50,    0,   78,
        0,   48,    0,    0,   60,    0,    0,    0,   74,    0,
        0,   73,   73,    0,   73,   73,   73,   56,   52,   51,
       53,    0,    0,    0,    0,    0,    0,   71,    0,   71,
       71,   71,   71,   71,   71,   71,   71,   25,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
        0,    0,   49,   20,    7,  169,    0,  129,    0,    5,
      174,  170,  179,    0,  124,  126,    0,  172,  162,  175,

      163,  176,  161,    0,    0,  173,    0,  120,    0,    0,
      119,  119,    0,  119,  119,  119,  164,  166,  168,  167,
      165,  118,    0,    0,  180,  118,  118,  118,  118,  118,
      118,  118,   89,  118,  118,  118,  118,  118,  118,   97,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  181,  171,    4,    7,    0,    0,    0,    0,    0,
        0,  187,  187,  187,  187,    0,    9,    0,    1,    0,
        0,    0,   77,    0,    0,   45,   76,   76,   76,   76,
       74,   74,    0,    0,   73,   73,   73,   75,   73,   73,
       73,   57,    0,    0,    0,    0,    0,    0,    0,    0,

       72,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,    0,   71,   71,   71,   44,   71,   71,
       71,   71,   71,   71,    0,    0,    0,    0,    0,    0,
      123,    0,    0,    0,    0,    0,  182,  122,  122,  122,
      122,  120,  120,    0,    0,  119,  119,  119,  121,  119,
      119,  119,  177,  178,    0,  130,    0,    0,    0,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   95,  118,  118,   98,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,    0,    1,    0,    0,    0,  187,  187,  187,

        0,    0,   78,    0,    0,   78,    0,    0,    0,    0,
        0,    0,    0,   74,   74,   74,   76,   73,   73,   75,
       75,   73,   73,    0,    0,    0,    0,    0,    0,    0,
        0,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   54,    0,    0,    0,    0,    0,    0,
       71,   71,   71,   71,   71,   71,   71,   71,    0,   61,
        0,    0,    0,  131,    0,    0,  129,    0,    0,  129,
        0,  123,    0,  125,    0,    0,    0,  127,    0,    0,
        0,    0,    0,    0,    0,  120,  120,  120,  122,  119,
      119,  121,  121,  119,  119,    0,    0,  128,    0,    0,

      118,  118,  118,   81,  118,   83,   84,  118,  118,  118,
      118,   91,   92,  118,  118,   96,  118,   99,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  111,
      118,  118,    0,    0,    0,  184,  185,  186,    0,   78,
        0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
        0,   77,    0,    0,    0,    0,    0,    0,    0,   76,
       74,   74,   75,   75,   75,    0,    0,    0,    0,    0,
       34,    0,    0,   71,   71,   71,   71,   71,   71,   71,
       71,   59,   71,   71,   71,   30,    0,    0,    0,    0,
        0,    0,   69,    0,   71,    0,   71,   71,   71,   71,

       71,   71,   71,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
        0,  125,    0,    0,    0,    0,    0,  123,    0,    0,
        0,    0,    0,    0,    0,  122,  120,  120,  121,  121,
      121,    0,  130,    0,    0,  130,    0,    0,    0,    0,
        0,  118,  118,  118,   82,   85,  118,  118,  118,  118,
       94,  118,  118,  118,  102,  118,  118,  118,  118,  118,
      118,  109,  118,  118,  113,    0,    0,    0,    0,    2,
        0,   78,    0,    0,    0,   75,   75,   32,    0,    0,
        0,    0,    0,   35,   21,   71,    0,   71,   46,   71,

       71,   18,   16,   71,   63,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,   71,   71,   71,   71,   71,
       71,   58,    0,    0,    0,    0,  131,    0,    0,  131,
        0,    0,  129,    0,    0,    0,  129,    0,    0,  129,
        0,    0,  123,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  121,  121,  130,    0,    0,    0,    0,    0,
      130,    0,    0,    0,    0,    0,  128,    0,    0,    0,
        0,    0,    0,    0,  118,  118,  118,  118,  118,   90,
       93,  114,  118,  101,  103,  104,  105,  106,  107,  118,
      118,  118,    0,    0,    2,    0,   78,    0,    0,    0,

        0,    0,    0,    0,    0,   33,    0,   31,    0,    0,
       23,    0,   24,   71,   19,   71,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   71,   43,   47,   71,   71,
       71,   70,    0,    0,  131,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,  129,    0,  129,    0,    0,
        0,    0,    0,    0,  129,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,  118,   86,  118,  118,   88,
      118,  108,  118,  118,    0,  136,    0,    0,    0,   37,
       27,   71,   71,    0,    0,    0,    0,   41,    0,    0,

        0,    0,   42,   71,   11,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,  129,    0,    0,  129,    0,
        0,    0,    0,  129,    0,    0,  129,    0,    0,  129,
        0,    0,  129,    0,    0,    0,    0,  129,    0,    0,
        0,    0,    0,  130,    0,    0,    0,    0,    0,    0,
        0,    0,  118,  115,   87,  100,  110,  112,    0,   38,
        0,   71,   14,    0,    0,   29,    0,    0,   40,    0,
        0,   17,    0,    0,    0,    0,  131,    0,    0,    0,
        0,    0,  129,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,  129,    0,    0,    0,    0,    0,

      129,    0,    0,    0,    0,    0,  129,    0,    0,    0,
        0,  118,  118,    0,    0,   15,   39,   28,    0,   26,
        0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
      129,    0,    0,    0,  118,  116,    0,   36,    0,    0,
        0,    0,    0,    0,   64,    0,  129,    0,    0,    0,
        0,  118,    0,    0,   12,    0,   62,    0,    0,    0,
      118,    0,   68,   13,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
        0,    0,  134,    0,  135,    0,    0,    0,    0,    0,
       66,    0,    0,    0,   67,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   32,   31,   33,   34,
       35,   35,   36,   35,   35,   37,   35,   35,   38,   35,
       35,   35,   35,   35,   39,   35,   35,   40,   35,   35,
       41,   42,   43,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   35,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    1,    1,    6,    1,
        7,    7,    8,    1,    1,    1,    1,    1,    4,    1,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        1,    4,    1,    1,    9,    7,    7,    8,    8,    8,
        7,    9,    9,    9,    9,    9,    9,   10,    9,    9,
        9,   10,    9,   10,    9,   10,    9,   10,    9,    9,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1259] =
    {   0,
        0,    4,   24,   11,   98,    0,  172,   13,  246,  319,
     2384, 6775,  321, 6775, 2312, 2362,  326,  327, 6775,  331,
     2352,  315, 2307, 2366, 2333, 2358, 2355,  316, 2352,  365,
      341,  324, 2344, 2343,  308,    0, 2349,  295, 2309,  290,
      283, 2311,  310,  306, 2316, 2307,  320, 2314, 2312, 2308,
      316, 2288,  388,  405, 6775,  407, 2339,    0, 6775,  412,
     2331,  378, 2286, 2327,  368,  396, 6775, 6775, 2326,  373,
     6775,  349,  413,  374,  443,  421, 6775, 6775,  320, 2325,
      391, 6775,    0,   10, 6775, 6775, 2324, 2305, 2284, 2286,
      378,  363,  383,  389, 2288,  395, 2286, 2294,  403, 2274,

     2284, 2280, 2284, 6775,  396, 2325, 6775,  470,  479, 6775,
      445, 2313,    0, 2264, 2267, 2260, 6775,  483,  492,  501,
     6775, 2325,  514,  502,  507, 2324, 2272, 6775,  448, 6775,
      474, 6775,  417,  499, 6775, 2297,  522,  531,  567,  572,
      553,  495,  436,    0,  588,  501,  442, 2308, 6775, 6775,
     6775,  475,  491, 2263, 2255, 2261, 2255,    0, 2278, 2267,
     2267, 2247,  528,  406, 2265, 2248, 2250,    0,  493, 2290,
     2238, 2257, 2242, 2237, 2258, 2238, 2241, 2239, 2234, 2247,
     2238, 2237, 6775,    0,  594, 6775,  520, 6775,  647, 6775,
     6775, 6775, 6775,  589, 6775, 6775,  709, 6775, 6775, 6775,

     6775, 6775, 6775, 2273,  614, 6775,  640,  662,  593,  634,
      602,  480,    0,  703,  641,  524, 2264, 6775, 6775, 6775,
     2263,    0,  543, 2247, 6775,  654, 2224, 2237, 2223, 2239,
     2225, 2231, 2216, 2217, 2212, 2211, 2214, 2209, 2206,    0,
      564, 2211,  566, 2208,  572,  551, 2212, 2205,  586,  632,
     2210, 6775, 6775, 6775,  715,  727,  741, 2260, 2213, 2206,
     2197,    0, 2198, 2198, 2194, 2250, 6775, 2248, 6775, 2192,
      727,  740, 6775,  591,  633, 6775, 6775,  757,  782,    0,
      737,  546,  763,  788,  424,  623,  677,  775,  569,  698,
      733, 6775, 2185, 2181, 2199, 2195, 2187, 2194, 2181, 2196,

     6775, 2191, 2184, 2182, 2191, 2186, 2183, 2188, 2186, 2171,
     2182, 2164, 2173,  788, 2208, 2171, 2160,    0, 2173, 2157,
      644,  651, 2202, 2161, 2154, 2161,  730,  808,  811,  816,
     6775,  853, 2201,  821,  824,  829, 6775, 6775,  846,  868,
        0,  808,  779,  833,  871,  607,  792,  793,  864,  727,
      805,  806, 6775, 6775,  830, 6775,  855,  716,  866, 2147,
     2150, 2150, 2148, 2159, 2154, 2141,  681, 2156, 2154, 2150,
     2141, 2147, 2150,    0, 2134, 2138,    0, 2139, 2135, 2123,
     2125, 2128, 2135, 2120, 2118, 2118, 2131, 2121, 2125, 2129,
     2130, 2119, 2171, 6775, 2123, 2114, 2125, 2106, 2103, 2116,

     2115,  900,  902,  938,  906,  919, 1000,  886, 1062,  894,
     1124,  916,  931,  787,  879,  887,  935, 6775, 6775,  910,
      895, 6775, 6775, 2114, 2117, 2107, 2102, 2108, 2096, 2090,
     2108, 2090, 2082, 2100, 2082, 2082, 2087, 2096, 2086, 2079,
     2094, 2085, 2080, 6775, 2107,  701,  906, 2089, 2061, 2071,
     2079, 2111,  561, 2077, 2076, 2075, 2078, 2061, 2076,    0,
     2071, 2061,  839, 6775,  949,  934,  966, 1188,  976,  983,
     1252, 6775, 2107,  952,  989, 1002, 2106, 6775,  977, 1007,
     1318, 1008, 1384, 1005, 1038,  938,  960,  976, 1056, 6775,
     6775,  998,  978, 6775, 6775, 1029, 1031, 6775,  898,  967,

     2053, 2058, 2058,    0, 2058,    0,    0, 2048, 2057, 2045,
     2053,    0,    0, 2044, 2041,    0, 2046,    0, 2040, 2040,
     2037, 2050, 2040, 2043, 2048, 2047, 2045, 2033, 2037,    0,
     2023, 2035, 2026, 2033, 2029,    0,    0,    0, 2077, 1045,
     1023, 1069, 1073, 1446, 1085, 1091, 1093, 1107, 1508, 1109,
      981, 1028, 1044, 1570, 1076, 1083, 1087, 1632, 1090, 1118,
     6775, 6775, 1057, 1011, 1045, 2017, 2009, 2010, 2014, 2020,
     6775, 2027, 2022, 2006, 1998, 2049, 2009, 2014, 2004, 2006,
     2011,    0, 2004, 2013, 2008, 6775, 2003, 1081, 2006, 1995,
     2008, 1995, 6775, 1989, 1981, 1989, 1984, 1993, 1982, 1994,

     1980, 1993, 1976, 1990, 1976, 1979, 1135, 1136, 1147, 1149,
     1116, 1155, 1156, 1696, 1169, 1172, 1173, 1187, 1189, 1760,
     1195, 6775, 1161, 1826, 1201, 1892, 1209, 1213, 1216, 1958,
     1220, 1221, 1224, 2024, 1235, 1246, 6775, 6775, 1095, 1150,
     1185, 1233, 1237, 2086, 1253, 1264, 2148, 1206, 2210, 1230,
     2272, 1973, 1971, 1979,    0,    0, 1974, 1974, 1979, 1970,
        0, 1975, 1959, 1963,    0, 1970, 1967, 1969, 1951, 1961,
     1963,    0, 1954, 1957,    0, 1946, 2005, 1950, 2003, 6775,
     1275, 1277, 2334, 1249, 2396, 6775, 6775, 6775, 1940, 1956,
     1951, 1950, 1935, 6775,    0, 1945, 1947, 1929,    0, 1929,

     1940,    0,    0, 1930,    0, 1938, 1928, 1918, 1915, 1904,
     1915, 1912, 1898,    0, 1887, 1885, 1880, 1879, 1870, 1862,
     1866,    0, 1861, 1845, 1888, 1281, 1289, 2458, 1293, 1300,
     2520, 1301, 1315, 1302, 2584, 1317, 1321, 2648, 1325, 1329,
     2712, 1343, 1346, 1350, 2778, 1358, 1365, 1369, 2844, 1386,
     1387, 2910, 6775, 6775, 1366, 1308, 1367, 1390, 2972, 1403,
     1405, 1407, 1409, 3034, 1413, 1292, 1314, 1333, 3096, 1381,
     1382, 1391, 3158, 1392, 1846, 1822, 1825, 1817, 1814,    0,
        0,    0, 1816,    0,    0,    0,    0,    0,    0, 1813,
     1810, 1797, 1847, 1846, 6775, 1797, 1415, 1429, 1431, 3220,

     1432, 1428, 1442, 3282, 1444, 6775, 1780, 6775, 1790, 1771,
        0, 1769,    0, 1749,    0, 1756, 1740, 1754, 1736, 1744,
     1722, 1720, 1734, 1717, 1717, 1697,    0,    0, 1694, 1682,
     1722, 6775, 1684,  807, 1452, 1341, 1453, 1454, 3344, 1465,
     1469, 1471, 1475, 3406, 1491, 6775, 3468, 1493, 1359, 1494,
     1509, 3532, 1511, 1515, 1519, 1527, 1531, 3596, 1533, 1537,
     1551, 1553, 3660, 1555, 1477, 3726, 1529, 1544, 3792, 1577,
     1571, 1578, 3854, 1457, 3916, 1676,    0, 1670, 1664,    0,
     1651,    0, 1663, 1638, 1677, 6775, 1349, 1624, 1610, 6775,
     6775, 1612, 1580, 1581, 1563, 1544, 1546, 6775, 1532, 1524,

     1531, 1508,    0, 1502,    0, 1481, 1498, 1481, 1478, 1589,
     1591, 3978, 1593, 1595, 1599, 1603, 4042, 1615, 1617, 1618,
     4106, 1635, 1639, 1643, 4170, 1651, 1655, 4234, 1657, 1663,
     4298, 1664, 1677, 1679, 4362, 1680, 1695, 1697, 4426, 1606,
     1640, 4492, 1653, 1703, 1704, 1717, 4554, 1719, 1467, 1552,
     4616, 1572, 1459, 1457,    0,    0,    0,    0, 1730, 6775,
     1443, 1437,    0, 1412, 1398, 6775, 1373, 1349, 6775, 1333,
     1288,    0, 1257, 1228, 1225, 1222, 1729, 1737, 1741, 4678,
     1743, 1745, 1756, 1483, 1762, 1763, 4742, 1766, 1781, 1783,
     1785, 1789, 4806, 1802, 1803, 1809, 1823, 4870, 1825, 1827,

     1829, 1845, 1847, 4934, 1849, 1851, 1863, 1867, 1869, 4998,
     1873, 1221, 1233,  978, 1220,    0, 6775, 6775, 1235, 6775,
     1162, 1158, 1144, 1187, 1129, 1099, 1889, 1890, 5062, 1891,
     1900, 1910, 5126, 1911, 1115,    0,  875, 6775, 1091, 1048,
     1046, 1053, 1094,  989, 6775, 1913, 1917, 1929, 1933, 5190,
     1939, 1008, 1620,  988, 6775,  964, 6775,  869,  875,  839,
      776, 1725, 6775, 6775,  741,  735,  732,    0, 1980,  707,
      668,  653, 1814, 1916,  621, 6775,  624, 1925, 1964,  625,
      618, 1971, 6775, 1986, 6775,  521,  520,  496,  437,  367,
     6775,  355,  325,  296, 6775, 6775, 5258, 5268, 5278, 5283,

     5288, 5298, 5308, 5313, 5318, 5328, 5338, 5345, 5352, 5362,
     5366, 5374, 5384, 5394, 5404, 5408, 5416, 5426, 5436, 5446,
     5456, 5466, 5476, 5486, 5496, 5506, 5516, 5526, 5536, 5546,
     5556, 5563, 5573, 5580, 5585, 5595, 5600, 5607, 5617, 5627,
     5637, 5647, 5657, 5664, 5674, 5684, 5694, 5704, 5714, 5724,
     5734, 5739, 5744, 5754, 5764, 5774, 5784, 5794, 5804, 5814,
     5824, 5834, 5844, 5849, 5859, 5869, 5879, 5889, 5899, 5909,
     5919, 5929, 5939, 5949, 5959, 5969, 5979, 5989, 5999, 6009,
     6019, 6029, 6039, 6049, 6059, 6064, 6074, 6084, 6094, 6104,
     6109, 6119, 6129, 6139, 6149, 6159, 6169, 6179, 6189, 6199,

     6209, 6219, 6229, 6239, 6249, 6259, 6269, 6279, 6289, 6299,
     6309, 6319, 6329, 6339, 6349, 6354, 6364, 6374, 6384, 6394,
     6399, 6409, 6419, 6429, 6439, 6449, 6459, 6469, 6479, 6489,
     6499, 6509, 6519, 6529, 6539, 6549, 6559, 6569, 6579, 6589,
     6599, 6609, 6614, 6624, 6634, 6644, 6654, 6664, 6674, 6684,
     6694, 6704, 6714, 6724, 6734, 6744, 6754, 6764
    } ;

static yyconst flex_int16_t yy_def[1259] =
    {   0,
     1097, 1097, 1096,    3, 1096,    5, 1096,    7, 1096,    9,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1098, 1096, 1096, 1099, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1101, 1096, 1096,
     1096, 1102, 1096, 1096, 1096, 1103, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1104, 1104, 1096, 1096, 1096, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104, 1104, 1104, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1105, 1105, 1105, 1105, 1096, 1096, 1096, 1096,
     1096, 1106, 1096, 1096, 1096, 1107, 1096, 1096, 1098, 1096,
     1108, 1096, 1099, 1109, 1096, 1096, 1110, 1110, 1096, 1096,
     1096, 1096, 1096, 1111, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1100, 1096, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1096, 1096, 1096, 1101, 1096, 1096, 1102, 1096, 1112, 1096,
     1096, 1096, 1096, 1113, 1096, 1096, 1114, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1115, 1096, 1115, 1096, 1096, 1096,
     1096, 1096, 1116, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1104, 1117, 1118, 1096, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1096, 1096, 1096, 1096, 1096, 1096, 1119, 1096, 1096,
     1096, 1105, 1105, 1105, 1105, 1106, 1096, 1107, 1096, 1096,
     1120, 1121, 1096, 1122, 1123, 1096, 1096, 1110, 1096, 1110,
     1096, 1096, 1096, 1110, 1096, 1096, 1096, 1111, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1096, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1096, 1096, 1124, 1125, 1126, 1113,
     1096, 1127, 1128, 1129, 1130, 1131, 1096, 1096, 1115, 1096,
     1115, 1096, 1096, 1096, 1115, 1096, 1096, 1096, 1116, 1096,
     1096, 1096, 1096, 1096, 1117, 1096, 1132, 1133, 1134, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1136, 1096, 1096, 1096, 1096, 1137, 1137, 1137,

     1096, 1120, 1120, 1120, 1121, 1121, 1121, 1122, 1122, 1123,
     1123, 1096, 1110, 1096, 1096, 1096, 1110, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1096, 1100,
     1096, 1096, 1124, 1096, 1138, 1125, 1125, 1139, 1126, 1126,
     1140, 1096, 1127, 1129, 1141, 1142, 1143, 1096, 1144, 1145,
     1145, 1146, 1146, 1096, 1147, 1096, 1096, 1096, 1147, 1096,
     1096, 1096, 1096, 1096, 1096, 1148, 1149, 1096, 1150, 1151,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1096, 1096, 1096, 1153, 1153, 1153, 1154, 1155,
     1156, 1155, 1155, 1155, 1157, 1158, 1157, 1158, 1158, 1158,
     1159, 1160, 1159, 1159, 1161, 1162, 1161, 1162, 1162, 1163,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1164, 1096, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1096, 1096, 1096, 1165, 1166, 1167, 1168,
     1169, 1168, 1168, 1170, 1171, 1172, 1173, 1171, 1173, 1174,
     1173, 1096, 1175, 1175, 1176, 1176, 1177, 1178, 1177, 1177,
     1179, 1180, 1179, 1180, 1180, 1181, 1096, 1096, 1096, 1096,
     1096, 1182, 1182, 1182, 1183, 1183, 1183, 1184, 1184, 1185,
     1185, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1096, 1187, 1096, 1188, 1096,
     1189, 1189, 1189, 1190, 1190, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1191, 1191, 1096, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1191, 1096, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1096, 1096, 1096, 1192, 1192, 1192, 1193, 1193,
     1193, 1194, 1195, 1196, 1197, 1198, 1198, 1199, 1200, 1201,
     1202, 1203, 1204, 1203, 1203, 1205, 1206, 1205, 1206, 1206,
     1207, 1207, 1096, 1096, 1208, 1209, 1208, 1208, 1208, 1210,
     1211, 1210, 1211, 1211, 1211, 1212, 1213, 1212, 1212, 1214,
     1215, 1214, 1215, 1215, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1217, 1218, 1096, 1096, 1219, 1219, 1219, 1219,

     1219, 1220, 1220, 1220, 1220, 1096, 1096, 1096, 1096, 1096,
     1221, 1096, 1221, 1221, 1221, 1221, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1221, 1221, 1221, 1221, 1221,
     1221, 1096, 1096, 1096, 1222, 1223, 1222, 1222, 1222, 1224,
     1225, 1224, 1225, 1225, 1225, 1096, 1226, 1227, 1228, 1229,
     1227, 1230, 1231, 1232, 1233, 1233, 1233, 1234, 1233, 1235,
     1236, 1235, 1237, 1238, 1239, 1239, 1240, 1240, 1240, 1240,
     1241, 1241, 1241, 1242, 1242, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1244, 1096, 1244, 1096, 1096, 1096,
     1096, 1221, 1221, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1221, 1221, 1221, 1096, 1096, 1096, 1096, 1224,
     1224, 1224, 1229, 1238, 1229, 1229, 1245, 1227, 1246, 1227,
     1247, 1232, 1231, 1231, 1248, 1232, 1233, 1234, 1236, 1236,
     1249, 1235, 1250, 1232, 1251, 1235, 1238, 1238, 1252, 1239,
     1239, 1239, 1239, 1241, 1241, 1241, 1241, 1241, 1242, 1242,
     1242, 1242, 1243, 1243, 1243, 1243, 1243, 1243, 1244, 1096,
     1096, 1221, 1221, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1221, 1096, 1096, 1096, 1096, 1224, 1224, 1224, 1224,
     1224, 1229, 1229, 1253, 1229, 1229, 1245, 1254, 1231, 1231,
     1254, 1231, 1248, 1231, 1232, 1236, 1232, 1255, 1231, 1236,

     1236, 1236, 1236, 1249, 1254, 1238, 1238, 1254, 1238, 1252,
     1238, 1243, 1243, 1244, 1096, 1221, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1254, 1254, 1256, 1232,
     1257, 1232, 1258, 1232, 1243, 1243, 1244, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1254, 1254, 1254, 1254, 1256,
     1254, 1243, 1244, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1243, 1244, 1096, 1096, 1096, 1096, 1096, 1243, 1244, 1096,
     1096, 1096, 1244, 1244, 1096, 1096, 1096, 1244, 1244, 1096,
     1096, 1244, 1096, 1244, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,    0, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096
    } ;

static yyconst flex_int16_t yy_nxt[6850] =
    {   0,
     1096,   13,   14,   13,   13,   17,   14,   13,   17,   15,
     1096,   18,   53,   15,  108,   53,  223,  108,   54,   16,
      109,  224, 1096,   16,   19,   20,   14,   20,   20,   21,
       22,   19,   19,   23,   24,   25,   19,   19,   19,   26,
       19,   27,   28,   29,   30,   31,   31,   19,   19,   32,
       33,   34,   19,   35,   36,   36,   36,   36,   36,   37,
       36,   36,   36,   36,   19,   19,   19,   19,   36,   38,
       36,   39,   40,   41,   36,   42,   36,   43,   36,   36,
       44,   45,   46,   47,   36,   48,   49,   36,   36,   36,
       50,   36,   36,   36,   51,   52,   19,   19,   55,   56,

       14,   56,   56,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   55,   55,
       55,   55,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   55,   55,
       55,   55,   59,   60,   14,   60,   60,   61,   62,   59,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   76,   77,   78,   79,   80,   81,

       82,   59,   83,   83,   83,   83,   83,   83,   84,   83,
       83,   83,   85,   59,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   83,   96,   83,   97,   83,   83,
       83,   83,   83,   98,   99,  100,  101,  102,  103,   83,
       83,   83,  104,  105,  106,  107,  110,  111,   14,  111,
      111,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  112,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  110,  110,  110,  110,
      113,  113,  113,  113,  113,  114,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  115,  116,
      113,  113,  113,  113,  113,  113,  110,  110,  117,  110,
      118,  130,  120,  118,  120,  120,  119,  123,  125,  120,
      123,  125,  120,  124,  120,  120,  137,  137,  137,  163,
      165,  148,  160,  164,  166,  217,  218,  126,  126,  126,
      149,  171,  161,  152,  153,  154,  131,  155,  156,  138,
      168,  145,  145,  145,  172,  176,  201,  169, 1095,  181,
      173,  157,  170,  141, 1094,  202,  203,  146,  192,  147,
      182,  177,  127,  138,  188,  139,  139,  140,  199,  123,
      141,  120,  123,  122,  193,  124,  146,  141,  195,  200,

      206,  142, 1093,  143,  144,  147,  125,  196,  120,  125,
      120,  120,  232,  185,  141,  185,  185,  220,  221,  189,
      142,  233,  252,  229, 1092,  126,  126,  126,  273,  143,
      230,  204,  144,  205,  205,  205,  231,  197,  234,  207,
      235,  214,  214,  214,  237,  240,  120,  238,  120,  120,
      236,  307,  241,  210,  130,  244,  245,  215,  134,  216,
      127,  207,  418,  208,  208,  209,  246,  253,  308,  247,
      210,  255,  287,  185,  255,  210,  215,  256,  291,  211,
      257,  212,  213,  257,  123,  216,  120,  123,  418,  131,
      124,  287,  210,  125,  271,  271,  125,  291,  211,  258,

      258,  258,  120,  125,  120,  120,  125,  212,  125, 1091,
      213,  125,  126,  126,  126,  123,  348,  120,  123,  274,
      274,  124,  126,  126,  126,  293,  188,  126,  126,  126,
      294,  285,  259,  286,  260,  348,  295,  289,  261,  290,
      296,  272,  278,  278,  278, 1090,  312,  127,  313,  356,
      285,  278,  278,  278,  279,  280,  289,  127,  280,  286,
      352,  189,  127,  279,  280,  290,  275,  280,  283, 1089,
      283,  279,  280,  284,  284,  284, 1088,  280,  305,  352,
      279,  280,  416,  306,  357,  138,  280,  139,  139,  140,
      138,  195,  140,  140,  140,  185,  384,  185,  185,  141,

      331,  416,  273,  281,  141,  282,  138,  422,  145,  145,
      145,  207,  385,  209,  209,  209,  141,  379,  597,  376,
      141,  141,  281,  382,  146,  210,  147,  377,  598,  380,
      332,  282,  409,  422,  339,  339,  339,  141,  346,  388,
      347,  383,  210,  146,  273,  490,  340,  341,  389,  344,
      341,  344,  147,  187,  345,  345,  345,  346,  187,  419,
      339,  339,  339,  340,  341, 1087,  347,  328,  328,  341,
     1086,  490,  340,  341,  411,  187,  341,  350,  419,  351,
      207, 1081,  208,  208,  209,  390, 1080,  391,  187,  340,
      341,  455,  187,  187,  210,  341,  350,  187,  342,  360,

      343,  361, 1077,  456,  187,  351,  457,  362,  187,  458,
      187,  210,  187,  418,  329,  334,  255,  342,  185,  255,
      334,  207,  256,  214,  214,  214,  343,  498,  257,  335,
      335,  257,  418,  403,  423,  210,  464,  334,  129,  215,
     1076,  216,  257,  508,  509,  257,  406,  258,  258,  258,
      334,  129,  210,  423,  334,  334,  587,  359,  215,  334,
     1075,  258,  258,  258,  588,  494,  334,  216,  404,  422,
      334,  465,  334,  414,  334,  415,  336,  278,  278,  278,
      259,  407,  260,  284,  284,  284,  261, 1072,  422,  279,
      280,  494,  414,  280,  259,  444,  260,  412, 1071,  412,

      261,  415,  413,  413,  413, 1070,  279,  280,  417,  417,
      417,  420,  280,  421,  467,  488,  445,  470,  195,  187,
     1068,  280,  187,  195,  280,  561,  195,  472,  491,  490,
      420,  195,  331,  446,  488,  331,  356,  447,  280,  421,
      331,  495,  494,  280,  486,  464,  487,  491,  490,  468,
      448,  561,  471,  345,  345,  345,  908,  332,  449,  330,
      495,  494,  479,  486,  474,  481,  339,  339,  339,  909,
      483,  357,  487,  475,  475,  496,  496,  886,  340,  341,
      465,  330,  341,  484, 1067,  484,  499,  499,  485,  485,
      485,  489,  489,  489,  330,  340,  341,  273,  330,  330,

      492,  341,  493,  330,  341,  273,  403,  341,  403,  498,
      330,  129,  406,  129,  330,  562,  330,  129,  330,  492,
      476,  341,  497,  561, 1066,  406,  341,  409,  493, 1065,
      129,  565, 1053,  500,  562,  411,  413,  413,  413,  649,
      467,  404,  561,  404,  540,  187,  563,  407,  564,  541,
      565,  560,  560,  560,  195,  417,  417,  417,  542,  542,
      407,  589,  590,  331,  280,  563,  543,  280,  280,  607,
      607,  280,  467,  591,  564,  468,  637,  187,  498,  544,
      886,  280,  470,  543,  543,  280,  280,  187,  543,  470,
      280,  195,  273,  479,  187,  543,  638,  335,  335,  543,

      472,  543,  637,  543,  195,  545,  546,  468,  651,  195,
      195,  541,  637,  472,  641,  638,  608,  471,  331,  331,
      547,  547,  409, 1037,  471,  485,  485,  485,  548,  130,
      624,  637, 1064,  641,  639,  643,  640,  646, 1063,  273,
      355,  549,  355,  626,  336,  548,  548,  687,  481,  483,
      548,  403, 1061,  639, 1060,  273,  129,  548,  636,  636,
      636,  548,  640,  548,  131,  548,  687,  550,  551,  134,
      644,  341,  647,  552,  341,  403,  489,  489,  489,  403,
      129,  686,  553,  553,  129,  409,  404,  273,  341,  341,
      551,  682,  341,  341,  273,  686,  129,  406,  273,  682,

      686,  273,  129,  554,  129, 1057,  341,  551,  551, 1056,
      404,  341,  551,  406,  404,  406, 1055,  685,  129,  551,
      129,  686,  188,  551,  411,  551,  683,  551,  685,  555,
      556,  411,  407,  753,  683,  552,  707,  708,  560,  560,
      560,  727,  730, 1058,  557,  557,  463,  463,  407, 1054,
      407,  280,  556,  733,  280,  467, 1059,  189,  734,  753,
      187,  467,  467,  195, 1052,  558,  187,  187,  280,  556,
      556, 1045,  472,  280,  556,  737,  728,  731,  740,  470,
      187,  556, 1044,  734,  187,  556,  754,  556,  735,  556,
      468,  559,  466,  737,  610,  470,  468,  468,  187,  611,

      187,  470,  624,  195, 1043,  754,  187, 1042,  612,  612,
      738,  195,  472,  741,  471,  195,  613,  498,  195, 1041,
      331,  753,  195,  195,  331, 1040,  195,  331,  738,  614,
      471,  331,  331,  613,  613,  331,  471,  195,  613,  643,
      753,  498,  626,  643,  355,  613,  331,  649,  355,  613,
      481,  613, 1039,  613,  479,  615,  469,  481,  617,  646,
      273,  752,  483,  611,  355,  752,  636,  636,  636, 1038,
      646,  651,  618,  618,  644,  355,  483, 1036,  644,  341,
      619,  682,  341,  682, 1035, 1026,  129,  727,  129, 1025,
      685, 1024,  463,  620,  647,  727,  341,  619,  619,  730,

      463,  341,  619,  498,  463,  647,  730,  733,  846,  619,
     1023,  463,  734,  619,  356,  619,  683,  619,  683,  621,
      195,  467,  728,  737,  627,  498,  187,  737,  187,  628,
      728,  740,  187,  649,  731,  470,  734, 1022,  629,  629,
      187,  731,  735,  847,  498,  195,  627,  464,  195,  357,
      959,  886,  195,  959,  472,  359,  468,  331,  738,  630,
      195,  472,  738,  627,  627,  846,  741,  195,  627,  472,
      471,  195,  643,  643,  649,  627,  472,  355,  355,  627,
      472,  627,  465,  627,  624,  631,  195,  479,  195,  195,
      632,  624,  498,  498, 1021,  628,  643,  472,  331,  866,

      847,  355,  498,  498,  633,  633,  626,  644,  644,  872,
      866,  646,  632,  872,  355,  646,  355, 1020,  355,  646,
      355,  682,  875,  651,  355,  634,  129,  626,  752,  632,
      632,  644,  875,  651,  632,  682, 1019,  682,  682,  273,
      129,  632,  129,  129,  873,  632,  647,  632,  873,  632,
      647,  635,  540,  273,  647,  273,  683,  541,  727,  727,
      727, 1018, 1017,  463,  463,  463,  542,  542,  498,  685,
      683,  911,  683,  683,  543,  730,  463,  911,  498,  195,
      463,  730,  463,  685, 1016,  685,  463,  544,  472,  846,
     1015,  543,  543,  728,  728,  728,  543,  730,  875,  733,

      916, 1013,  463,  543,  734,  734,  912,  543,  875,  543,
      731,  543,  912,  545,  546,  733,  731,  924,  866,  541,
      734,  927,  734, 1012,  847,  737,  734,  976,  547,  547,
      187,  195,  731,  737,  735,  917,  548,  737,  187,  737,
      331,  975,  187,  740,  187,  974,  195,  973,  734,  549,
      735,  972,  925,  548,  548,  331,  928,  930,  548,  740,
      738,  938,  734,  498,  734,  548,  734,  971,  738,  548,
      752,  548,  738,  548,  738,  550,  551,  872,  741,  195,
      970,  552,  355,  498,  872,  752,  969,  968,  331,  355,
      553,  553,  931,  875,  741,  911,  939,  911,  551,  916,

      463,  938,  463,  967,  734,  916,  734,  966,  195,  916,
      734,  554,  873,  875,  734,  551,  551,  472,  752,  873,
      551,  733,  886,  467,  733,  965,  734,  551,  187,  734,
      912,  551,  912,  551,  917,  551,  939,  555,  556,  964,
      917,  927,  195,  552,  917,  924,  734,  866,  963,  924,
      734,  472,  557,  557,  734,  195,  735,  927,  468,  735,
      556,  737,  734,  930,  472,  962,  187,  961,  734,  930,
      740, 1062,  960,  558,  734,  734,  928,  556,  556,  886,
      925,  866,  556,  470,  925,  927,  740,  958,  187,  556,
      734,  734,  928,  556,  866,  556,  738,  556,  931,  559,

      466,  938,  610,  938,  931,  741,  734,  611,  734,  872,
      872,  957,  956,  955,  355,  355,  612,  612,  471,  954,
      928,  741,  953,  872,  613,  872, 1069,  886,  355, 1069,
      355,  959,  886,  907,  959,  911,  939,  614,  939,  906,
      463,  613,  613,  911,  873,  873,  613,  911,  463,  911,
      905,  916,  463,  613,  463,  904,  734,  613,  873,  613,
      873,  613,  916,  615,  469,  903,  617,  734,  916,  916,
      912,  611, 1028,  734,  734,  902,  901,  734,  912,  900,
      618,  618,  912,  899,  912, 1014,  917,  924,  619,  924,
      898, 1028,  734,  897,  734,  924,  734,  917,  896,  895,

      734,  620,  894,  917,  917,  619,  619, 1029,  924,  927,
      619,  893,  892,  734,  734,  930,  886,  619,  891,  890,
      734,  619,  925,  619,  925,  619, 1029,  621,  195,  927,
      925,  924,  742,  930,  734,  930,  734,  743,  734,  889,
      734,  888,  887,  925,  928, 1078,  744,  744,  795,  886,
      931,  930,  884,  930,  742, 1028,  734,  938,  734,  883,
      734, 1078,  734,  882,  928,  881,  925,  745,  931,  938,
      931,  742,  742, 1028,  734,  938,  742,  880,  734,  938,
      734,  879,  878,  742,  734,  877,  931,  742,  931,  742,
     1029,  742,  939,  746,  195, 1028, 1028,  927,  747,  876,

      734,  734,  734,  743,  939,  834,  737,  833, 1029,  832,
      939,  187,  748,  748,  939,  831,  927,  927,  886, 1028,
      747,  734,  734, 1028,  734,  830, 1082, 1083,  734, 1082,
     1029, 1029,  928,  749,  829, 1028,  828,  747,  747, 1028,
      734,  738,  747,  827,  734, 1028,  826, 1079,  825,  747,
      734,  928,  928,  747, 1029,  747,  824,  747, 1029,  750,
      195,  823,  822, 1079,  627, 1084, 1085,  821, 1084,  628,
     1029,  820, 1082, 1083, 1029, 1082,  819,  818,  629,  629,
     1029, 1069,  886,  817, 1069,  816,  627, 1084, 1085,  815,
     1084,  814,  813,  812,  811, 1073,  810, 1074,  809,  630,

      808,  807,  806,  627,  627,  680,  796,  795,  627,  793,
      792,  791,  790,  789,  788,  627,  787,  786,  785,  627,
      784,  627,  783,  627,  782,  631,  195,  781,  780,  779,
      632,  778,  777,  776,  775,  628,  725,  724,  723,  722,
      721,  720,  719,  718,  633,  633,  717,  716,  715,  714,
      713,  712,  632,  711,  710,  709,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  634,  697,  696,  695,  632,
      632,  694,  693,  692,  632,  691,  690,  689,  688,  680,
      678,  632,  677,  676,  675,  632,  674,  632,  673,  632,
      672,  635,  755,  671,  670,  669,  668,  756,  667,  666,

      665,  664,  663,  662,  661,  660,  757,  757,  659,  658,
      657,  656,  655,  654,  758,  653,  652,  478,  622,  606,
      605,  604,  603,  602,  601,  600,  599,  759,  596,  595,
      594,  758,  758,  593,  592,  586,  758,  585,  584,  583,
      582,  581,  580,  758,  579,  578,  577,  758,  576,  758,
      575,  758,  574,  760,  761,  573,  572,  571,  570,  756,
      569,  568,  567,  566,  539,  538,  537,  536,  762,  762,
      535,  534,  533,  394,  532,  531,  763,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  764,
      518,  517,  516,  763,  763,  515,  514,  513,  763,  512,

      511,  510,  507,  506,  505,  763,  504,  503,  502,  763,
      501,  763,  478,  763,  462,  765,  766,  461,  460,  459,
      454,  767,  453,  452,  451,  450,  443,  442,  441,  440,
      768,  768,  439,  438,  437,  436,  435,  434,  766,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  401,
      269,  769,  267,  400,  399,  766,  766,  398,  397,  396,
      766,  395,  394,  392,  387,  386,  381,  766,  378,  375,
      374,  766,  373,  766,  372,  766,  371,  770,  771,  370,
      369,  368,  367,  767,  366,  365,  364,  363,  359,  354,
      353,  337,  772,  772,  326,  325,  324,  323,  322,  321,

      771,  320,  319,  318,  317,  316,  315,  314,  311,  310,
      309,  304,  303,  773,  302,  301,  300,  771,  771,  299,
      298,  297,  771,  292,  276,  270,  269,  267,  265,  771,
      264,  263,  122,  771,  254,  771,  251,  771,  250,  774,
      797,  249,  248,  243,  242,  541,  239,  228,  227,  226,
      225,  219,  198,  191,  798,  798,  190,  186,  122,  183,
      180,  179,  799,  178,  175,  174,  167,  162,  159,  151,
      150,  122,  136,  135,  134,  800,  132,  121,  128,  799,
      799,  122,  121, 1096,  799, 1096, 1096, 1096, 1096, 1096,
     1096,  799, 1096, 1096, 1096,  799, 1096,  799, 1096,  799,

     1096,  801,  802, 1096, 1096, 1096, 1096,  552, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  803,  803, 1096, 1096,
     1096, 1096, 1096, 1096,  802, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  804, 1096, 1096,
     1096,  802,  802, 1096, 1096, 1096,  802, 1096, 1096, 1096,
     1096, 1096, 1096,  802, 1096, 1096, 1096,  802, 1096,  802,
     1096,  802, 1096,  805,  835, 1096, 1096, 1096, 1096,  836,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  837,  837,
     1096, 1096, 1096, 1096, 1096, 1096,  838, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  839,

     1096, 1096, 1096,  838,  838, 1096, 1096, 1096,  838, 1096,
     1096, 1096, 1096, 1096, 1096,  838, 1096, 1096, 1096,  838,
     1096,  838, 1096,  838, 1096,  840,  841, 1096, 1096, 1096,
     1096,  836, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
      842,  842, 1096, 1096, 1096, 1096, 1096, 1096,  843, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096,  844, 1096, 1096, 1096,  843,  843, 1096, 1096, 1096,
      843, 1096, 1096, 1096, 1096, 1096, 1096,  843, 1096, 1096,
     1096,  843, 1096,  843, 1096,  843, 1096,  845,  466, 1096,
      848, 1096, 1096, 1096, 1096,  849, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096,  850,  850, 1096, 1096, 1096, 1096,
     1096, 1096,  851, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  852, 1096, 1096, 1096,  851,
      851, 1096, 1096, 1096,  851, 1096, 1096, 1096, 1096, 1096,
     1096,  851, 1096, 1096, 1096,  851, 1096,  851, 1096,  851,
     1096,  853,  736, 1096,  855, 1096, 1096, 1096, 1096,  611,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  856,  856,
     1096, 1096, 1096, 1096, 1096, 1096,  857, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  858,
     1096, 1096, 1096,  857,  857, 1096, 1096, 1096,  857, 1096,

     1096, 1096, 1096, 1096, 1096,  857, 1096, 1096, 1096,  857,
     1096,  857, 1096,  857, 1096,  859,  469, 1096,  860, 1096,
     1096, 1096, 1096,  849, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  861,  861, 1096, 1096, 1096, 1096, 1096, 1096,
      862, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  863, 1096, 1096, 1096,  862,  862, 1096,
     1096, 1096,  862, 1096, 1096, 1096, 1096, 1096, 1096,  862,
     1096, 1096, 1096,  862, 1096,  862, 1096,  862, 1096,  864,
      195, 1096, 1096, 1096,  742, 1096, 1096, 1096, 1096,  743,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  744,  744,

     1096, 1096, 1096, 1096, 1096, 1096,  742, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  745,
     1096, 1096, 1096,  742,  742, 1096, 1096, 1096,  742, 1096,
     1096, 1096, 1096, 1096, 1096,  742, 1096, 1096, 1096,  742,
     1096,  742, 1096,  742, 1096,  746,  195, 1096, 1096, 1096,
      747, 1096, 1096, 1096, 1096,  743, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  748,  748, 1096, 1096, 1096, 1096,
     1096, 1096,  747, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  749, 1096, 1096, 1096,  747,
      747, 1096, 1096, 1096,  747, 1096, 1096, 1096, 1096, 1096,

     1096,  747, 1096, 1096, 1096,  747, 1096,  747, 1096,  747,
     1096,  750,  195, 1096, 1096, 1096,  867, 1096, 1096, 1096,
     1096,  628, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
      868,  868, 1096, 1096, 1096, 1096, 1096, 1096,  867, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096,  869, 1096, 1096, 1096,  867,  867, 1096, 1096, 1096,
      867, 1096, 1096, 1096, 1096, 1096, 1096,  867, 1096, 1096,
     1096,  867, 1096,  867, 1096,  867, 1096,  870,  755, 1096,
     1096, 1096, 1096,  756, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  757,  757, 1096, 1096, 1096, 1096, 1096, 1096,

      758, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  759, 1096, 1096, 1096,  758,  758, 1096,
     1096, 1096,  758, 1096, 1096, 1096, 1096, 1096, 1096,  758,
     1096, 1096, 1096,  758, 1096,  758, 1096,  758, 1096,  760,
      761, 1096, 1096, 1096, 1096,  756, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  762,  762, 1096, 1096, 1096, 1096,
     1096, 1096,  763, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  764, 1096, 1096, 1096,  763,
      763, 1096, 1096, 1096,  763, 1096, 1096, 1096, 1096, 1096,
     1096,  763, 1096, 1096, 1096,  763, 1096,  763, 1096,  763,

     1096,  765,  766, 1096, 1096, 1096, 1096,  767, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  768,  768, 1096, 1096,
     1096, 1096, 1096, 1096,  766, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  769, 1096, 1096,
     1096,  766,  766, 1096, 1096, 1096,  766, 1096, 1096, 1096,
     1096, 1096, 1096,  766, 1096, 1096, 1096,  766, 1096,  766,
     1096,  766, 1096,  770,  771, 1096, 1096, 1096, 1096,  767,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  772,  772,
     1096, 1096, 1096, 1096, 1096, 1096,  771, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  773,

     1096, 1096, 1096,  771,  771, 1096, 1096, 1096,  771, 1096,
     1096, 1096, 1096, 1096, 1096,  771, 1096, 1096, 1096,  771,
     1096,  771, 1096,  771, 1096,  774,  797, 1096, 1096, 1096,
     1096,  541, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
      798,  798, 1096, 1096, 1096, 1096, 1096, 1096,  799, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096,  800, 1096, 1096, 1096,  799,  799, 1096, 1096, 1096,
      799, 1096, 1096, 1096, 1096, 1096, 1096,  799, 1096, 1096,
     1096,  799, 1096,  799, 1096,  799, 1096,  801,  802, 1096,
     1096, 1096, 1096,  552, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096,  803,  803, 1096, 1096, 1096, 1096, 1096, 1096,
      802, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  804, 1096, 1096, 1096,  802,  802, 1096,
     1096, 1096,  802, 1096, 1096, 1096, 1096, 1096, 1096,  802,
     1096, 1096, 1096,  802, 1096,  802, 1096,  802, 1096,  805,
      835, 1096, 1096, 1096, 1096,  836, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  837,  837, 1096, 1096, 1096, 1096,
     1096, 1096,  838, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  839, 1096, 1096, 1096,  838,
      838, 1096, 1096, 1096,  838, 1096, 1096, 1096, 1096, 1096,

     1096,  838, 1096, 1096, 1096,  838, 1096,  838, 1096,  838,
     1096,  840,  841, 1096, 1096, 1096, 1096,  836, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  842,  842, 1096, 1096,
     1096, 1096, 1096, 1096,  843, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  844, 1096, 1096,
     1096,  843,  843, 1096, 1096, 1096,  843, 1096, 1096, 1096,
     1096, 1096, 1096,  843, 1096, 1096, 1096,  843, 1096,  843,
     1096,  843, 1096,  845,  734, 1096, 1096, 1096, 1096,  734,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  913,  913,
     1096, 1096, 1096, 1096, 1096, 1096,  734, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  734,
     1096, 1096, 1096,  734,  734, 1096, 1096, 1096,  734, 1096,
     1096, 1096, 1096, 1096, 1096,  734, 1096, 1096, 1096,  734,
     1096,  734, 1096,  734, 1096,  914,  732, 1096,  919, 1096,
     1096, 1096, 1096,  849, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  920,  920, 1096, 1096, 1096, 1096, 1096, 1096,
      851, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  921, 1096, 1096, 1096,  851,  851, 1096,
     1096, 1096,  851, 1096, 1096, 1096, 1096, 1096, 1096,  851,
     1096, 1096, 1096,  851, 1096,  851, 1096,  851, 1096,  922,

      736, 1096,  855, 1096, 1096, 1096, 1096,  611, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  856,  856, 1096, 1096,
     1096, 1096, 1096, 1096,  857, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  858, 1096, 1096,
     1096,  857,  857, 1096, 1096, 1096,  857, 1096, 1096, 1096,
     1096, 1096, 1096,  857, 1096, 1096, 1096,  857, 1096,  857,
     1096,  857, 1096,  859,  739, 1096,  933, 1096, 1096, 1096,
     1096,  849, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
      934,  934, 1096, 1096, 1096, 1096, 1096, 1096,  862, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096,  935, 1096, 1096, 1096,  862,  862, 1096, 1096, 1096,
      862, 1096, 1096, 1096, 1096, 1096, 1096,  862, 1096, 1096,
     1096,  862, 1096,  862, 1096,  862, 1096,  936,  195, 1096,
     1096, 1096,  940, 1096, 1096, 1096, 1096,  743, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  941,  941, 1096, 1096,
     1096, 1096, 1096, 1096,  940, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  942, 1096, 1096,
     1096,  940,  940, 1096, 1096, 1096,  940, 1096, 1096, 1096,
     1096, 1096, 1096,  940, 1096, 1096, 1096,  940, 1096,  940,
     1096,  940, 1096,  943,  195, 1096, 1096, 1096,  867, 1096,

     1096, 1096, 1096,  628, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  868,  868, 1096, 1096, 1096, 1096, 1096, 1096,
      867, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  869, 1096, 1096, 1096,  867,  867, 1096,
     1096, 1096,  867, 1096, 1096, 1096, 1096, 1096, 1096,  867,
     1096, 1096, 1096,  867, 1096,  867, 1096,  867, 1096,  870,
      944, 1096, 1096, 1096, 1096,  756, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  945,  945, 1096, 1096, 1096, 1096,
     1096, 1096,  946, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  947, 1096, 1096, 1096,  946,

      946, 1096, 1096, 1096,  946, 1096, 1096, 1096, 1096, 1096,
     1096,  946, 1096, 1096, 1096,  946, 1096,  946, 1096,  946,
     1096,  948,  949, 1096, 1096, 1096, 1096,  767, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  950,  950, 1096, 1096,
     1096, 1096, 1096, 1096,  949, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  951, 1096, 1096,
     1096,  949,  949, 1096, 1096, 1096,  949, 1096, 1096, 1096,
     1096, 1096, 1096,  949, 1096, 1096, 1096,  949, 1096,  949,
     1096,  949, 1096,  952,  977, 1096, 1096, 1096, 1096,  836,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  978,  978,

     1096, 1096, 1096, 1096, 1096, 1096,  979, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  980,
     1096, 1096, 1096,  979,  979, 1096, 1096, 1096,  979, 1096,
     1096, 1096, 1096, 1096, 1096,  979, 1096, 1096, 1096,  979,
     1096,  979, 1096,  979, 1096,  981,  915, 1096,  983, 1096,
     1096, 1096, 1096,  984, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  985,  985, 1096, 1096, 1096, 1096, 1096, 1096,
      986, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  987, 1096, 1096, 1096,  986,  986, 1096,
     1096, 1096,  986, 1096, 1096, 1096, 1096, 1096, 1096,  986,

     1096, 1096, 1096,  986, 1096,  986, 1096,  986, 1096,  988,
      466, 1096,  848, 1096, 1096, 1096, 1096,  849, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  850,  850, 1096, 1096,
     1096, 1096, 1096, 1096,  851, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  852, 1096, 1096,
     1096,  851,  851, 1096, 1096, 1096,  851, 1096, 1096, 1096,
     1096, 1096, 1096,  851, 1096, 1096, 1096,  851, 1096,  851,
     1096,  851, 1096,  853,  923, 1096,  990, 1096, 1096, 1096,
     1096,  984, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
      991,  991, 1096, 1096, 1096, 1096, 1096, 1096,  992, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096,  993, 1096, 1096, 1096,  992,  992, 1096, 1096, 1096,
      992, 1096, 1096, 1096, 1096, 1096, 1096,  992, 1096, 1096,
     1096,  992, 1096,  992, 1096,  992, 1096,  994,  736, 1096,
      995, 1096, 1096, 1096, 1096,  849, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  996,  996, 1096, 1096, 1096, 1096,
     1096, 1096,  997, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  998, 1096, 1096, 1096,  997,
      997, 1096, 1096, 1096,  997, 1096, 1096, 1096, 1096, 1096,
     1096,  997, 1096, 1096, 1096,  997, 1096,  997, 1096,  997,

     1096,  999,  929, 1096, 1001, 1096, 1096, 1096, 1096,  984,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1002, 1002,
     1096, 1096, 1096, 1096, 1096, 1096, 1003, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1004,
     1096, 1096, 1096, 1003, 1003, 1096, 1096, 1096, 1003, 1096,
     1096, 1096, 1096, 1096, 1096, 1003, 1096, 1096, 1096, 1003,
     1096, 1003, 1096, 1003, 1096, 1005,  469, 1096,  860, 1096,
     1096, 1096, 1096,  849, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  861,  861, 1096, 1096, 1096, 1096, 1096, 1096,
      862, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096,  863, 1096, 1096, 1096,  862,  862, 1096,
     1096, 1096,  862, 1096, 1096, 1096, 1096, 1096, 1096,  862,
     1096, 1096, 1096,  862, 1096,  862, 1096,  862, 1096,  864,
      937, 1096, 1007, 1096, 1096, 1096, 1096,  984, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1008, 1008, 1096, 1096,
     1096, 1096, 1096, 1096, 1009, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1010, 1096, 1096,
     1096, 1009, 1009, 1096, 1096, 1096, 1009, 1096, 1096, 1096,
     1096, 1096, 1096, 1009, 1096, 1096, 1096, 1009, 1096, 1009,
     1096, 1009, 1096, 1011,  195, 1096, 1096, 1096,  940, 1096,

     1096, 1096, 1096,  743, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  941,  941, 1096, 1096, 1096, 1096, 1096, 1096,
      940, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  942, 1096, 1096, 1096,  940,  940, 1096,
     1096, 1096,  940, 1096, 1096, 1096, 1096, 1096, 1096,  940,
     1096, 1096, 1096,  940, 1096,  940, 1096,  940, 1096,  943,
      944, 1096, 1096, 1096, 1096,  756, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,  945,  945, 1096, 1096, 1096, 1096,
     1096, 1096,  946, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096,  947, 1096, 1096, 1096,  946,

      946, 1096, 1096, 1096,  946, 1096, 1096, 1096, 1096, 1096,
     1096,  946, 1096, 1096, 1096,  946, 1096,  946, 1096,  946,
     1096,  948,  949, 1096, 1096, 1096, 1096,  767, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  950,  950, 1096, 1096,
     1096, 1096, 1096, 1096,  949, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  951, 1096, 1096,
     1096,  949,  949, 1096, 1096, 1096,  949, 1096, 1096, 1096,
     1096, 1096, 1096,  949, 1096, 1096, 1096,  949, 1096,  949,
     1096,  949, 1096,  952,  977, 1096, 1096, 1096, 1096,  836,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  978,  978,

     1096, 1096, 1096, 1096, 1096, 1096,  979, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  980,
     1096, 1096, 1096,  979,  979, 1096, 1096, 1096,  979, 1096,
     1096, 1096, 1096, 1096, 1096,  979, 1096, 1096, 1096,  979,
     1096,  979, 1096,  979, 1096,  981,  915, 1096,  983, 1096,
     1096, 1096, 1096,  984, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096,  985,  985, 1096, 1096, 1096, 1096, 1096, 1096,
      986, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096,  987, 1096, 1096, 1096,  986,  986, 1096,
     1096, 1096,  986, 1096, 1096, 1096, 1096, 1096, 1096,  986,

     1096, 1096, 1096,  986, 1096,  986, 1096,  986, 1096,  988,
      923, 1096,  990, 1096, 1096, 1096, 1096,  984, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  991,  991, 1096, 1096,
     1096, 1096, 1096, 1096,  992, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  993, 1096, 1096,
     1096,  992,  992, 1096, 1096, 1096,  992, 1096, 1096, 1096,
     1096, 1096, 1096,  992, 1096, 1096, 1096,  992, 1096,  992,
     1096,  992, 1096,  994,  926, 1096, 1031, 1096, 1096, 1096,
     1096,  849, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1032, 1032, 1096, 1096, 1096, 1096, 1096, 1096,  997, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1033, 1096, 1096, 1096,  997,  997, 1096, 1096, 1096,
      997, 1096, 1096, 1096, 1096, 1096, 1096,  997, 1096, 1096,
     1096,  997, 1096,  997, 1096,  997, 1096, 1034,  929, 1096,
     1001, 1096, 1096, 1096, 1096,  984, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1002, 1002, 1096, 1096, 1096, 1096,
     1096, 1096, 1003, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1004, 1096, 1096, 1096, 1003,
     1003, 1096, 1096, 1096, 1003, 1096, 1096, 1096, 1096, 1096,
     1096, 1003, 1096, 1096, 1096, 1003, 1096, 1003, 1096, 1003,

     1096, 1005,  937, 1096, 1007, 1096, 1096, 1096, 1096,  984,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1008, 1008,
     1096, 1096, 1096, 1096, 1096, 1096, 1009, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1010,
     1096, 1096, 1096, 1009, 1009, 1096, 1096, 1096, 1009, 1096,
     1096, 1096, 1096, 1096, 1096, 1009, 1096, 1096, 1096, 1009,
     1096, 1009, 1096, 1009, 1096, 1011, 1027, 1096, 1047, 1096,
     1096, 1096, 1096,  984, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1048, 1048, 1096, 1096, 1096, 1096, 1096, 1096,
     1049, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1050, 1096, 1096, 1096, 1049, 1049, 1096,
     1096, 1096, 1049, 1096, 1096, 1096, 1096, 1096, 1096, 1049,
     1096, 1096, 1096, 1049, 1096, 1049, 1096, 1049, 1096, 1051,
      736, 1096,  995, 1096, 1096, 1096, 1096,  849, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,  996,  996, 1096, 1096,
     1096, 1096, 1096, 1096,  997, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,  998, 1096, 1096,
     1096,  997,  997, 1096, 1096, 1096,  997, 1096, 1096, 1096,
     1096, 1096, 1096,  997, 1096, 1096, 1096,  997, 1096,  997,
     1096,  997, 1096,  999, 1027, 1096, 1047, 1096, 1096, 1096,

     1096,  984, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1048, 1048, 1096, 1096, 1096, 1096, 1096, 1096, 1049, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1050, 1096, 1096, 1096, 1049, 1049, 1096, 1096, 1096,
     1049, 1096, 1096, 1096, 1096, 1096, 1096, 1049, 1096, 1096,
     1096, 1049, 1096, 1049, 1096, 1049, 1096, 1051,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  129, 1096,
      129,  129,  129,  129,  129,  129,  129,  129,  133, 1096,
      133,  133, 1096,  133,  133,  133,  133,  133,  158,  158,
      158,  158,  158,  184,  184,  184,  184,  184,  187, 1096,

      187,  187,  187,  187,  187,  187,  187,  187,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  222,  222,
      222,  222,  222,  262,  262,  262,  262,  262,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  129,  129,
     1096,  129, 1096, 1096,  129,  133,  133, 1096,  133, 1096,
     1096,  133,  277,  277,  277,  277,  277, 1096,  277,  277,
      277,  277,  288,  288,  327, 1096, 1096,  327,  327,  327,
      327,  327,  327,  327,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  333, 1096, 1096,  333,  333,  333,

      333,  333,  333,  333,  338,  338,  338,  338,  338, 1096,
      338,  338,  338,  338,  349,  349,  355, 1096,  355,  355,
      355,  355,  355,  355,  355,  355,  358, 1096,  358,  358,
     1096,  358,  358,  358,  358,  358,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  402, 1096,  402,  402,
      402,  402,  402,  402,  402,  402,  405, 1096,  405,  405,
      405,  405,  405,  405,  405,  405,  408, 1096,  408,  408,
      408,  408,  408,  408,  408,  408,  410, 1096,  410,  410,
      410,  410,  410,  410,  410,  410,  463, 1096,  463,  463,
      463,  463,  463,  463,  463,  463,  466, 1096,  466,  466,

      466,  466,  466,  466,  466,  466,  469, 1096,  469,  469,
      469,  469,  469,  469,  469,  469,  473, 1096,  473,  473,
      473,  473,  473,  473,  473,  473,  477, 1096,  477,  477,
      477,  477,  477,  477,  477,  477,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  355,  355, 1096,  355,
     1096, 1096,  355,  358, 1096,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358, 1096,  358, 1096, 1096,  358,
      222,  222,  222,  222,  222,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  262,  262,  262,  262,  262,
      463,  463, 1096,  463, 1096, 1096,  463,  609, 1096,  609,
      609,  609,  609,  609,  609,  609,  609,  616, 1096,  616,
      616,  616,  616,  616,  616,  616,  616,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  477, 1096,  477,
      477,  477,  477,  477,  477,  477,  477,  334,  334, 1096,
      334, 1096, 1096,  334,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  338,  338,  338,  338,  338, 1096,

      338,  338,  338,  338,  642, 1096,  642,  642,  642,  642,
      642,  642,  642,  642,  645, 1096,  645,  645,  645,  645,
      645,  645,  645,  645,  648, 1096,  648,  648,  648,  648,
      648,  648,  648,  648,  650, 1096,  650,  650,  650,  650,
      650,  650,  650,  650,  222,  222,  222,  222,  222,  262,
      262,  262,  262,  262,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  402, 1096,  402,  402,  402,  402,
      402,  402,  402,  402,  129, 1096,  129,  129,  129,  129,
      129,  129,  129,  129,  681, 1096,  681,  681,  681,  681,
      681,  681,  681,  681,  405, 1096,  405,  405,  405,  405,

      405,  405,  405,  405,  408, 1096,  408,  408,  408,  408,
      408,  408,  408,  408,  133, 1096,  133,  133,  133,  133,
      133,  133,  133,  133,  684, 1096,  684,  684,  684,  684,
      684,  684,  684,  684,  410, 1096,  410,  410,  410,  410,
      410,  410,  410,  410,  277,  277,  277,  277,  277, 1096,
      277,  277,  277,  277,  158,  158,  158,  158,  158,  726,
     1096,  726,  726,  726,  726,  726,  726,  726,  726,  729,
     1096,  729,  729,  729,  729,  729,  729,  729,  729,  732,
     1096,  732,  732,  732,  732,  732,  732,  732,  732,  466,
     1096,  466,  466,  466,  466,  466,  466,  466,  466,  187,

     1096,  187,  187,  187,  187,  187,  187,  187,  187,  609,
     1096,  609,  609,  609,  609,  609,  609,  609,  609,  736,
     1096,  736,  736,  736,  736,  736,  736,  736,  736,  739,
     1096,  739,  739,  739,  739,  739,  739,  739,  739,  469,
     1096,  469,  469,  469,  469,  469,  469,  469,  469,  616,
     1096,  616,  616,  616,  616,  616,  616,  616,  616,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  338,
      338,  338,  338,  338, 1096,  338,  338,  338,  338,  642,
     1096,  642,  642,  642,  642,  642,  642,  642,  642,  645,
     1096,  645,  645,  645,  645,  645,  645,  645,  645,  648,
     1096,  648,  648,  648,  648,  648,  648,  648,  648,  650,
     1096,  650,  650,  650,  650,  650,  650,  650,  650,  222,
      222,  222,  222,  222,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  681, 1096,  681,  681,  681,  681,

      681,  681,  681,  681,  684, 1096,  684,  684,  684,  684,
      684,  684,  684,  684,  158,  158,  158,  158,  158,  726,
     1096,  726,  726,  726,  726,  726,  726,  726,  726,  729,
     1096,  729,  729,  729,  729,  729,  729,  729,  729,  732,
     1096,  732,  732,  732,  732,  732,  732,  732,  732,  466,
     1096,  466,  466,  466,  466,  466,  466,  466,  466,  734,
     1096,  734,  734,  734,  734,  734,  734,  734,  734,  609,
     1096,  609,  609,  609,  609,  609,  609,  609,  609,  736,
     1096,  736,  736,  736,  736,  736,  736,  736,  736,  854,
     1096,  854,  854,  854,  854,  854,  854,  854,  854,  739,

     1096,  739,  739,  739,  739,  739,  739,  739,  739,  469,
     1096,  469,  469,  469,  469,  469,  469,  469,  469,  616,
     1096,  616,  616,  616,  616,  616,  616,  616,  616,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  642,
     1096,  642,  642,  642,  642,  642,  642,  642,  642,  355,
     1096,  355,  355,  355,  355,  355,  355,  355,  355,  871,

     1096,  871,  871,  871,  871,  871,  871,  871,  871,  645,
     1096,  645,  645,  645,  645,  645,  645,  645,  645,  648,
     1096,  648,  648,  648,  648,  648,  648,  648,  648,  358,
     1096,  358,  358,  358,  358,  358,  358,  358,  358,  874,
     1096,  874,  874,  874,  874,  874,  874,  874,  874,  650,
     1096,  650,  650,  650,  650,  650,  650,  650,  650,  222,
      222,  222,  222,  222,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  681, 1096,  681,  681,  681,  681,
      681,  681,  681,  681,  684, 1096,  684,  684,  684,  684,

      684,  684,  684,  684,  158,  158,  158,  158,  158,  726,
     1096,  726,  726,  726,  726,  726,  726,  726,  726,  463,
     1096,  463,  463,  463,  463,  463,  463,  463,  463,  910,
     1096,  910,  910,  910,  910,  910,  910,  910,  910,  729,
     1096,  729,  729,  729,  729,  729,  729,  729,  729,  327,
     1096, 1096,  327,  327,  327,  327,  327,  327,  327,  732,
     1096,  732,  732,  732,  732,  732,  732,  732,  732,  734,
     1096,  734,  734,  734,  734,  734,  734,  734,  734,  915,
     1096,  915,  915,  915,  915,  915,  915,  915,  915,  918,
     1096,  918,  918,  918,  918,  918,  918,  918,  918,  923,

     1096,  923,  923,  923,  923,  923,  923,  923,  923,  926,
     1096,  926,  926,  926,  926,  926,  926,  926,  926,  736,
     1096,  736,  736,  736,  736,  736,  736,  736,  736,  854,
     1096,  854,  854,  854,  854,  854,  854,  854,  854,  739,
     1096,  739,  739,  739,  739,  739,  739,  739,  739,  929,
     1096,  929,  929,  929,  929,  929,  929,  929,  929,  932,
     1096,  932,  932,  932,  932,  932,  932,  932,  932,  937,
     1096,  937,  937,  937,  937,  937,  937,  937,  937,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  871,

     1096,  871,  871,  871,  871,  871,  871,  871,  871,  874,
     1096,  874,  874,  874,  874,  874,  874,  874,  874,  222,
      222,  222,  222,  222,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  982, 1096,  982,  982,  982,  982,
      982,  982,  982,  982,  466, 1096,  466,  466,  466,  466,
      466,  466,  466,  466,  609, 1096,  609,  609,  609,  609,
      609,  609,  609,  609,  989, 1096,  989,  989,  989,  989,
      989,  989,  989,  989, 1000, 1096, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  469, 1096,  469,  469,  469,  469,
      469,  469,  469,  469,  616, 1096,  616,  616,  616,  616,

      616,  616,  616,  616, 1006, 1096, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,  734, 1096,  734,  734,  734,  734,
      734,  734,  734,  734, 1027, 1096, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1030, 1096, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1046, 1096, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046,  736, 1096,  736,  736,  736,  736,
      736,  736,  736,  736,  854, 1096,  854,  854,  854,  854,
      854,  854,  854,  854,   11, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096
    } ;

static yyconst flex_int16_t yy_chk[6850] =
    {   0,
        0,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        0,    2,    4,    2,    8,    4,   84,    8,    4,    1,
        8,   84,    0,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   22,   13,   10,   13,   13,   10,   17,   18,   17,
       17,   18,   20,   17,   20,   20,   28,   28,   28,   40,
       41,   32,   38,   40,   41,   79,   79,   18,   18,   18,
       32,   44,   38,   35,   35,   35,   22,   35,   35,   31,
       43,   31,   31,   31,   44,   47,   72,   43, 1094,   51,
       44,   35,   43,   31, 1093,   72,   72,   31,   65,   31,
       51,   47,   18,   30,   62,   30,   30,   30,   70,   53,
       31,   53,   53,   74,   65,   53,   31,   30,   66,   70,

       74,   30, 1092,   30,   30,   31,   54,   66,   56,   54,
       56,   56,   92,   60,   30,   60,   60,   81,   81,   62,
       30,   92,  105,   91, 1090,   54,   54,   54,  133,   30,
       91,   73,   30,   73,   73,   73,   91,   66,   93,   76,
       93,   76,   76,   76,   94,   96,  111,   94,  111,  111,
       93,  164,   96,   76,  129,   99,   99,   76,  133,   76,
       54,   75,  285,   75,   75,   75,   99,  105,  164,   99,
       76,  108,  143,  108,  108,   75,   76,  108,  147,   75,
      109,   75,   75,  109,  118,   76,  118,  118,  285,  129,
      118,  143,   75,  119,  131,  131,  119,  147,   75,  109,

      109,  109,  120,  124,  120,  120,  124,   75,  125, 1089,
       75,  125,  119,  119,  119,  123,  212,  123,  123,  134,
      134,  123,  124,  124,  124,  152,  187,  125,  125,  125,
      152,  142,  109,  142,  109,  212,  153,  146,  109,  146,
      153,  131,  137,  137,  137, 1088,  169,  119,  169,  223,
      142,  138,  138,  138,  137,  137,  146,  124,  137,  142,
      216,  187,  125,  138,  138,  146,  134,  138,  141, 1087,
      141,  137,  137,  141,  141,  141, 1086,  137,  163,  216,
      138,  138,  282,  163,  223,  139,  138,  139,  139,  139,
      140,  194,  140,  140,  140,  185,  246,  185,  185,  139,

      194,  282,  274,  139,  140,  139,  145,  289,  145,  145,
      145,  209,  246,  209,  209,  209,  139,  243,  453,  241,
      145,  140,  139,  245,  145,  209,  145,  241,  453,  243,
      194,  139,  274,  289,  205,  205,  205,  145,  211,  249,
      211,  245,  209,  145,  275,  346,  205,  205,  249,  210,
      205,  210,  145,  189,  210,  210,  210,  211,  189,  286,
      207,  207,  207,  205,  205, 1081,  211,  189,  189,  205,
     1080,  346,  207,  207,  275,  189,  207,  215,  286,  215,
      208, 1077,  208,  208,  208,  250, 1075,  250,  189,  207,
      207,  321,  189,  189,  208,  207,  215,  189,  208,  226,

      208,  226, 1072,  321,  189,  215,  322,  226,  189,  322,
      189,  208,  189,  287,  189,  197,  255,  208,  255,  255,
      197,  214,  255,  214,  214,  214,  208,  358,  256,  197,
      197,  256,  287,  271,  290,  214,  327,  197,  271,  214,
     1071,  214,  257,  367,  367,  257,  272,  256,  256,  256,
      197,  272,  214,  290,  197,  197,  446,  358,  214,  197,
     1070,  257,  257,  257,  446,  350,  197,  214,  271,  291,
      197,  327,  197,  281,  197,  281,  197,  278,  278,  278,
      256,  272,  256,  283,  283,  283,  256, 1067,  291,  278,
      278,  350,  281,  278,  257,  314,  257,  279, 1066,  279,

      257,  281,  279,  279,  279, 1065,  278,  278,  284,  284,
      284,  288,  278,  288,  328,  343,  314,  329,  330,  328,
     1061,  284,  329,  334,  284,  414,  335,  330,  347,  348,
      288,  336,  334,  314,  343,  335,  355,  314,  284,  288,
      336,  351,  352,  284,  342,  463,  342,  347,  348,  328,
      314,  414,  329,  344,  344,  344,  834,  330,  314,  332,
      351,  352,  334,  342,  332,  335,  339,  339,  339,  834,
      336,  355,  342,  332,  332,  357,  357, 1037,  339,  339,
      463,  332,  339,  340, 1060,  340,  359,  359,  340,  340,
      340,  345,  345,  345,  332,  339,  339,  408,  332,  332,

      349,  339,  349,  332,  345,  410,  402,  345,  403,  499,
      332,  402,  405,  403,  332,  415,  332,  405,  332,  349,
      332,  345,  357,  416, 1059,  406,  345,  408,  349, 1058,
      406,  421, 1037,  359,  415,  410,  412,  412,  412,  499,
      466,  402,  416,  403,  404,  466,  420,  405,  420,  404,
      421,  413,  413,  413,  474,  417,  417,  417,  404,  404,
      406,  447,  447,  474,  413,  420,  404,  413,  417,  465,
      465,  417,  467,  447,  420,  466,  486,  467,  500,  404,
     1014,  413,  469,  404,  404,  417,  413,  469,  404,  470,
      417,  475,  551,  474,  470,  404,  487,  479,  479,  404,

      475,  404,  486,  404,  476,  404,  407,  467,  500,  480,
      482,  407,  488,  476,  493,  487,  465,  469,  480,  482,
      407,  407,  551, 1014,  470,  484,  484,  484,  407,  541,
      475,  488, 1056,  493,  492,  496,  492,  497, 1054,  552,
      496,  407,  497,  476,  479,  407,  407,  564,  480,  482,
      407,  540, 1052,  492, 1044,  553,  540,  407,  485,  485,
      485,  407,  492,  407,  541,  407,  564,  407,  409,  552,
      496,  485,  497,  409,  485,  542,  489,  489,  489,  543,
      542,  565,  409,  409,  543,  553,  540,  555,  485,  489,
      409,  545,  489,  485,  556,  563,  545,  546,  557,  547,

      565,  559,  546,  409,  547, 1042,  489,  409,  409, 1041,
      542,  489,  409,  548,  543,  550, 1040,  555,  548,  409,
      550,  563,  611,  409,  556,  409,  545,  409,  557,  409,
      411,  559,  546,  639,  547,  411,  588,  588,  560,  560,
      560,  607,  608, 1043,  411,  411,  607,  608,  548, 1039,
      550,  560,  411,  609,  560,  610, 1043,  611,  609,  639,
      610,  612,  613,  623, 1035,  411,  612,  613,  560,  411,
      411, 1026,  623,  560,  411,  615,  607,  608,  616,  617,
      615,  411, 1025,  616,  617,  411,  640,  411,  609,  411,
      610,  411,  468,  618,  468,  619,  612,  613,  618,  468,

      619,  621,  623,  625, 1024,  640,  621, 1023,  468,  468,
      615,  627,  625,  616,  617,  628,  468,  648,  629, 1022,
      627,  641,  631,  632,  628, 1021,  633,  629,  618,  468,
      619,  631,  632,  468,  468,  633,  621,  635,  468,  642,
      641,  650,  625,  643,  642,  468,  635,  648,  643,  468,
      627,  468, 1019,  468,  628,  468,  471,  629,  471,  645,
      684,  631,  632,  471,  645,  633,  636,  636,  636, 1015,
      646,  650,  471,  471,  642,  646,  635, 1013,  643,  636,
      471,  681,  636,  682, 1012,  976,  681,  726,  682,  975,
      684,  974,  726,  471,  645,  727,  636,  471,  471,  729,

      727,  636,  471,  766,  729,  646,  730,  732,  734,  471,
      973,  730,  732,  471,  756,  471,  681,  471,  682,  471,
      481,  733,  726,  736,  481,  767,  733,  737,  736,  481,
      727,  739,  737,  766,  729,  740,  739,  971,  481,  481,
      740,  730,  732,  734,  768,  742,  481,  836,  743,  756,
      887,  887,  744,  887,  742,  767,  733,  743,  736,  481,
      746,  744,  737,  481,  481,  849,  739,  747,  481,  746,
      740,  748,  755,  757,  768,  481,  747,  755,  757,  481,
      748,  481,  836,  481,  742,  481,  483,  743,  750,  751,
      483,  744,  770,  771,  970,  483,  758,  750,  751,  746,

      849,  758,  772,  774,  483,  483,  747,  755,  757,  760,
      748,  761,  483,  762,  760,  763,  761,  968,  762,  765,
      763,  797,  770,  771,  765,  483,  797,  750,  751,  483,
      483,  758,  772,  774,  483,  798,  967,  799,  801,  802,
      798,  483,  799,  801,  760,  483,  761,  483,  762,  483,
      763,  483,  544,  803,  765,  805,  797,  544,  835,  837,
      838,  965,  964,  835,  837,  838,  544,  544,  874,  802,
      798,  840,  799,  801,  544,  841,  840,  842,  949,  865,
      841,  843,  842,  803,  962,  805,  843,  544,  865,  984,
      961,  544,  544,  835,  837,  838,  544,  845,  874,  848,

      850,  954,  845,  544,  848,  850,  840,  544,  949,  544,
      841,  544,  842,  544,  549,  851,  843,  853,  865,  549,
      851,  854,  853,  953,  984,  855,  854,  909,  549,  549,
      855,  867,  845,  856,  848,  850,  549,  857,  856,  859,
      867,  908,  857,  860,  859,  907,  868,  906,  860,  549,
      851,  904,  853,  549,  549,  868,  854,  861,  549,  862,
      855,  864,  861,  950,  862,  549,  864,  902,  856,  549,
      867,  549,  857,  549,  859,  549,  554,  871,  860,  870,
      901,  554,  871,  952,  872,  868,  900,  899,  870,  872,
      554,  554,  861,  950,  862,  910,  864,  911,  554,  913,

      910,  914,  911,  897,  913,  915,  914,  896,  940,  916,
      915,  554,  871,  952,  916,  554,  554,  940,  870,  872,
      554,  918, 1053,  919,  920,  895,  918,  554,  919,  920,
      910,  554,  911,  554,  913,  554,  914,  554,  558,  894,
      915,  922,  941,  558,  916,  923,  922,  940,  893,  924,
      923,  941,  558,  558,  924,  943,  918,  926,  919,  920,
      558,  927,  926,  929,  943,  892,  927,  889,  929,  930,
      932, 1053,  888,  558,  930,  932,  922,  558,  558,  885,
      923,  941,  558,  933,  924,  934,  936,  884,  933,  558,
      934,  936,  926,  558,  943,  558,  927,  558,  929,  558,

      614,  937,  614,  938,  930,  932,  937,  614,  938,  944,
      945,  883,  881,  879,  944,  945,  614,  614,  933,  878,
      934,  936,  876,  946,  614,  948, 1062, 1062,  946, 1062,
      948,  959,  959,  833,  959,  977,  937,  614,  938,  831,
      977,  614,  614,  978,  944,  945,  614,  979,  978,  981,
      830,  982,  979,  614,  981,  829,  982,  614,  946,  614,
      948,  614,  983,  614,  620,  826,  620,  983,  985,  986,
      977,  620,  988,  985,  986,  825,  824,  988,  978,  823,
      620,  620,  979,  822,  981,  959,  982,  989,  620,  990,
      821,  991,  989,  820,  990,  992,  991,  983,  819,  818,

      992,  620,  817,  985,  986,  620,  620,  988,  994,  995,
      620,  816,  814,  994,  995,  996, 1073,  620,  812,  810,
      996,  620,  989,  620,  990,  620,  991,  620,  624,  997,
      992,  999,  624, 1000,  997, 1001,  999,  624, 1000,  809,
     1001,  807,  796,  994,  995, 1073,  624,  624,  794,  793,
      996, 1002,  792, 1003,  624, 1005, 1002, 1006, 1003,  791,
     1005, 1073, 1006,  790,  997,  783,  999,  624, 1000, 1007,
     1001,  624,  624, 1008, 1007, 1009,  624,  779, 1008, 1011,
     1009,  778,  777,  624, 1011,  776, 1002,  624, 1003,  624,
     1005,  624, 1006,  624,  626, 1027, 1028, 1030,  626,  775,

     1027, 1028, 1030,  626, 1007,  725, 1031,  724, 1008,  723,
     1009, 1031,  626,  626, 1011,  721, 1032, 1034, 1074, 1046,
      626, 1032, 1034, 1047, 1046,  720, 1078, 1078, 1047, 1078,
     1027, 1028, 1030,  626,  719, 1048,  718,  626,  626, 1049,
     1048, 1031,  626,  717, 1049, 1051,  716, 1074,  715,  626,
     1051, 1032, 1034,  626, 1046,  626,  713,  626, 1047,  626,
      630,  712,  711, 1074,  630, 1079, 1079,  710, 1079,  630,
     1048,  709, 1082, 1082, 1049, 1082,  708,  707,  630,  630,
     1051, 1069, 1069,  706, 1069,  704,  630, 1084, 1084,  701,
     1084,  700,  698,  697,  696, 1069,  693, 1069,  692,  630,

      691,  690,  689,  630,  630,  679,  678,  677,  630,  676,
      674,  673,  671,  670,  669,  630,  668,  667,  666,  630,
      664,  630,  663,  630,  662,  630,  634,  660,  659,  658,
      634,  657,  654,  653,  652,  634,  606,  605,  604,  603,
      602,  601,  600,  599,  634,  634,  598,  597,  596,  595,
      594,  592,  634,  591,  590,  589,  587,  585,  584,  583,
      581,  580,  579,  578,  577,  634,  576,  575,  574,  634,
      634,  573,  572,  570,  634,  569,  568,  567,  566,  539,
      535,  634,  534,  533,  532,  634,  531,  634,  529,  634,
      528,  634,  644,  527,  526,  525,  524,  644,  523,  522,

      521,  520,  519,  517,  515,  514,  644,  644,  511,  510,
      509,  508,  505,  503,  644,  502,  501,  477,  473,  462,
      461,  459,  458,  457,  456,  455,  454,  644,  452,  451,
      450,  644,  644,  449,  448,  445,  644,  443,  442,  441,
      440,  439,  438,  644,  437,  436,  435,  644,  434,  644,
      433,  644,  432,  644,  647,  431,  430,  429,  428,  647,
      427,  426,  425,  424,  401,  400,  399,  398,  647,  647,
      397,  396,  395,  393,  392,  391,  647,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  647,
      378,  376,  375,  647,  647,  373,  372,  371,  647,  370,

      369,  368,  366,  365,  364,  647,  363,  362,  361,  647,
      360,  647,  333,  647,  326,  647,  649,  325,  324,  323,
      320,  649,  319,  317,  316,  315,  313,  312,  311,  310,
      649,  649,  309,  308,  307,  306,  305,  304,  649,  303,
      302,  300,  299,  298,  297,  296,  295,  294,  293,  270,
      268,  649,  266,  265,  264,  649,  649,  263,  261,  260,
      649,  259,  258,  251,  248,  247,  244,  649,  242,  239,
      238,  649,  237,  649,  236,  649,  235,  649,  651,  234,
      233,  232,  231,  651,  230,  229,  228,  227,  224,  221,
      217,  204,  651,  651,  182,  181,  180,  179,  178,  177,

      651,  176,  175,  174,  173,  172,  171,  170,  167,  166,
      165,  162,  161,  651,  160,  159,  157,  651,  651,  156,
      155,  154,  651,  148,  136,  127,  126,  122,  116,  651,
      115,  114,  112,  651,  106,  651,  103,  651,  102,  651,
      683,  101,  100,   98,   97,  683,   95,   90,   89,   88,
       87,   80,   69,   64,  683,  683,   63,   61,   57,   52,
       50,   49,  683,   48,   46,   45,   42,   39,   37,   34,
       33,   29,   27,   26,   25,  683,   24,   23,   21,  683,
      683,   16,   15,   11,  683,    0,    0,    0,    0,    0,
        0,  683,    0,    0,    0,  683,    0,  683,    0,  683,

        0,  683,  685,    0,    0,    0,    0,  685,    0,    0,
        0,    0,    0,    0,    0,    0,  685,  685,    0,    0,
        0,    0,    0,    0,  685,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  685,    0,    0,
        0,  685,  685,    0,    0,    0,  685,    0,    0,    0,
        0,    0,    0,  685,    0,    0,    0,  685,    0,  685,
        0,  685,    0,  685,  728,    0,    0,    0,    0,  728,
        0,    0,    0,    0,    0,    0,    0,    0,  728,  728,
        0,    0,    0,    0,    0,    0,  728,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  728,

        0,    0,    0,  728,  728,    0,    0,    0,  728,    0,
        0,    0,    0,    0,    0,  728,    0,    0,    0,  728,
        0,  728,    0,  728,    0,  728,  731,    0,    0,    0,
        0,  731,    0,    0,    0,    0,    0,    0,    0,    0,
      731,  731,    0,    0,    0,    0,    0,    0,  731,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  731,    0,    0,    0,  731,  731,    0,    0,    0,
      731,    0,    0,    0,    0,    0,    0,  731,    0,    0,
        0,  731,    0,  731,    0,  731,    0,  731,  735,    0,
      735,    0,    0,    0,    0,  735,    0,    0,    0,    0,

        0,    0,    0,    0,  735,  735,    0,    0,    0,    0,
        0,    0,  735,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  735,    0,    0,    0,  735,
      735,    0,    0,    0,  735,    0,    0,    0,    0,    0,
        0,  735,    0,    0,    0,  735,    0,  735,    0,  735,
        0,  735,  738,    0,  738,    0,    0,    0,    0,  738,
        0,    0,    0,    0,    0,    0,    0,    0,  738,  738,
        0,    0,    0,    0,    0,    0,  738,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  738,
        0,    0,    0,  738,  738,    0,    0,    0,  738,    0,

        0,    0,    0,    0,    0,  738,    0,    0,    0,  738,
        0,  738,    0,  738,    0,  738,  741,    0,  741,    0,
        0,    0,    0,  741,    0,    0,    0,    0,    0,    0,
        0,    0,  741,  741,    0,    0,    0,    0,    0,    0,
      741,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  741,    0,    0,    0,  741,  741,    0,
        0,    0,  741,    0,    0,    0,    0,    0,    0,  741,
        0,    0,    0,  741,    0,  741,    0,  741,    0,  741,
      745,    0,    0,    0,  745,    0,    0,    0,    0,  745,
        0,    0,    0,    0,    0,    0,    0,    0,  745,  745,

        0,    0,    0,    0,    0,    0,  745,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  745,
        0,    0,    0,  745,  745,    0,    0,    0,  745,    0,
        0,    0,    0,    0,    0,  745,    0,    0,    0,  745,
        0,  745,    0,  745,    0,  745,  749,    0,    0,    0,
      749,    0,    0,    0,    0,  749,    0,    0,    0,    0,
        0,    0,    0,    0,  749,  749,    0,    0,    0,    0,
        0,    0,  749,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  749,    0,    0,    0,  749,
      749,    0,    0,    0,  749,    0,    0,    0,    0,    0,

        0,  749,    0,    0,    0,  749,    0,  749,    0,  749,
        0,  749,  752,    0,    0,    0,  752,    0,    0,    0,
        0,  752,    0,    0,    0,    0,    0,    0,    0,    0,
      752,  752,    0,    0,    0,    0,    0,    0,  752,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  752,    0,    0,    0,  752,  752,    0,    0,    0,
      752,    0,    0,    0,    0,    0,    0,  752,    0,    0,
        0,  752,    0,  752,    0,  752,    0,  752,  759,    0,
        0,    0,    0,  759,    0,    0,    0,    0,    0,    0,
        0,    0,  759,  759,    0,    0,    0,    0,    0,    0,

      759,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  759,    0,    0,    0,  759,  759,    0,
        0,    0,  759,    0,    0,    0,    0,    0,    0,  759,
        0,    0,    0,  759,    0,  759,    0,  759,    0,  759,
      764,    0,    0,    0,    0,  764,    0,    0,    0,    0,
        0,    0,    0,    0,  764,  764,    0,    0,    0,    0,
        0,    0,  764,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  764,    0,    0,    0,  764,
      764,    0,    0,    0,  764,    0,    0,    0,    0,    0,
        0,  764,    0,    0,    0,  764,    0,  764,    0,  764,

        0,  764,  769,    0,    0,    0,    0,  769,    0,    0,
        0,    0,    0,    0,    0,    0,  769,  769,    0,    0,
        0,    0,    0,    0,  769,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  769,    0,    0,
        0,  769,  769,    0,    0,    0,  769,    0,    0,    0,
        0,    0,    0,  769,    0,    0,    0,  769,    0,  769,
        0,  769,    0,  769,  773,    0,    0,    0,    0,  773,
        0,    0,    0,    0,    0,    0,    0,    0,  773,  773,
        0,    0,    0,    0,    0,    0,  773,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  773,

        0,    0,    0,  773,  773,    0,    0,    0,  773,    0,
        0,    0,    0,    0,    0,  773,    0,    0,    0,  773,
        0,  773,    0,  773,    0,  773,  800,    0,    0,    0,
        0,  800,    0,    0,    0,    0,    0,    0,    0,    0,
      800,  800,    0,    0,    0,    0,    0,    0,  800,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  800,    0,    0,    0,  800,  800,    0,    0,    0,
      800,    0,    0,    0,    0,    0,    0,  800,    0,    0,
        0,  800,    0,  800,    0,  800,    0,  800,  804,    0,
        0,    0,    0,  804,    0,    0,    0,    0,    0,    0,

        0,    0,  804,  804,    0,    0,    0,    0,    0,    0,
      804,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  804,    0,    0,    0,  804,  804,    0,
        0,    0,  804,    0,    0,    0,    0,    0,    0,  804,
        0,    0,    0,  804,    0,  804,    0,  804,    0,  804,
      839,    0,    0,    0,    0,  839,    0,    0,    0,    0,
        0,    0,    0,    0,  839,  839,    0,    0,    0,    0,
        0,    0,  839,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  839,    0,    0,    0,  839,
      839,    0,    0,    0,  839,    0,    0,    0,    0,    0,

        0,  839,    0,    0,    0,  839,    0,  839,    0,  839,
        0,  839,  844,    0,    0,    0,    0,  844,    0,    0,
        0,    0,    0,    0,    0,    0,  844,  844,    0,    0,
        0,    0,    0,    0,  844,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  844,    0,    0,
        0,  844,  844,    0,    0,    0,  844,    0,    0,    0,
        0,    0,    0,  844,    0,    0,    0,  844,    0,  844,
        0,  844,    0,  844,  847,    0,    0,    0,    0,  847,
        0,    0,    0,    0,    0,    0,    0,    0,  847,  847,
        0,    0,    0,    0,    0,    0,  847,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  847,
        0,    0,    0,  847,  847,    0,    0,    0,  847,    0,
        0,    0,    0,    0,    0,  847,    0,    0,    0,  847,
        0,  847,    0,  847,    0,  847,  852,    0,  852,    0,
        0,    0,    0,  852,    0,    0,    0,    0,    0,    0,
        0,    0,  852,  852,    0,    0,    0,    0,    0,    0,
      852,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  852,    0,    0,    0,  852,  852,    0,
        0,    0,  852,    0,    0,    0,    0,    0,    0,  852,
        0,    0,    0,  852,    0,  852,    0,  852,    0,  852,

      858,    0,  858,    0,    0,    0,    0,  858,    0,    0,
        0,    0,    0,    0,    0,    0,  858,  858,    0,    0,
        0,    0,    0,    0,  858,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  858,    0,    0,
        0,  858,  858,    0,    0,    0,  858,    0,    0,    0,
        0,    0,    0,  858,    0,    0,    0,  858,    0,  858,
        0,  858,    0,  858,  863,    0,  863,    0,    0,    0,
        0,  863,    0,    0,    0,    0,    0,    0,    0,    0,
      863,  863,    0,    0,    0,    0,    0,    0,  863,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  863,    0,    0,    0,  863,  863,    0,    0,    0,
      863,    0,    0,    0,    0,    0,    0,  863,    0,    0,
        0,  863,    0,  863,    0,  863,    0,  863,  866,    0,
        0,    0,  866,    0,    0,    0,    0,  866,    0,    0,
        0,    0,    0,    0,    0,    0,  866,  866,    0,    0,
        0,    0,    0,    0,  866,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  866,    0,    0,
        0,  866,  866,    0,    0,    0,  866,    0,    0,    0,
        0,    0,    0,  866,    0,    0,    0,  866,    0,  866,
        0,  866,    0,  866,  869,    0,    0,    0,  869,    0,

        0,    0,    0,  869,    0,    0,    0,    0,    0,    0,
        0,    0,  869,  869,    0,    0,    0,    0,    0,    0,
      869,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  869,    0,    0,    0,  869,  869,    0,
        0,    0,  869,    0,    0,    0,    0,    0,    0,  869,
        0,    0,    0,  869,    0,  869,    0,  869,    0,  869,
      873,    0,    0,    0,    0,  873,    0,    0,    0,    0,
        0,    0,    0,    0,  873,  873,    0,    0,    0,    0,
        0,    0,  873,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  873,    0,    0,    0,  873,

      873,    0,    0,    0,  873,    0,    0,    0,    0,    0,
        0,  873,    0,    0,    0,  873,    0,  873,    0,  873,
        0,  873,  875,    0,    0,    0,    0,  875,    0,    0,
        0,    0,    0,    0,    0,    0,  875,  875,    0,    0,
        0,    0,    0,    0,  875,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  875,    0,    0,
        0,  875,  875,    0,    0,    0,  875,    0,    0,    0,
        0,    0,    0,  875,    0,    0,    0,  875,    0,  875,
        0,  875,    0,  875,  912,    0,    0,    0,    0,  912,
        0,    0,    0,    0,    0,    0,    0,    0,  912,  912,

        0,    0,    0,    0,    0,    0,  912,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  912,
        0,    0,    0,  912,  912,    0,    0,    0,  912,    0,
        0,    0,    0,    0,    0,  912,    0,    0,    0,  912,
        0,  912,    0,  912,    0,  912,  917,    0,  917,    0,
        0,    0,    0,  917,    0,    0,    0,    0,    0,    0,
        0,    0,  917,  917,    0,    0,    0,    0,    0,    0,
      917,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  917,    0,    0,    0,  917,  917,    0,
        0,    0,  917,    0,    0,    0,    0,    0,    0,  917,

        0,    0,    0,  917,    0,  917,    0,  917,    0,  917,
      921,    0,  921,    0,    0,    0,    0,  921,    0,    0,
        0,    0,    0,    0,    0,    0,  921,  921,    0,    0,
        0,    0,    0,    0,  921,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  921,    0,    0,
        0,  921,  921,    0,    0,    0,  921,    0,    0,    0,
        0,    0,    0,  921,    0,    0,    0,  921,    0,  921,
        0,  921,    0,  921,  925,    0,  925,    0,    0,    0,
        0,  925,    0,    0,    0,    0,    0,    0,    0,    0,
      925,  925,    0,    0,    0,    0,    0,    0,  925,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  925,    0,    0,    0,  925,  925,    0,    0,    0,
      925,    0,    0,    0,    0,    0,    0,  925,    0,    0,
        0,  925,    0,  925,    0,  925,    0,  925,  928,    0,
      928,    0,    0,    0,    0,  928,    0,    0,    0,    0,
        0,    0,    0,    0,  928,  928,    0,    0,    0,    0,
        0,    0,  928,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  928,    0,    0,    0,  928,
      928,    0,    0,    0,  928,    0,    0,    0,    0,    0,
        0,  928,    0,    0,    0,  928,    0,  928,    0,  928,

        0,  928,  931,    0,  931,    0,    0,    0,    0,  931,
        0,    0,    0,    0,    0,    0,    0,    0,  931,  931,
        0,    0,    0,    0,    0,    0,  931,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  931,
        0,    0,    0,  931,  931,    0,    0,    0,  931,    0,
        0,    0,    0,    0,    0,  931,    0,    0,    0,  931,
        0,  931,    0,  931,    0,  931,  935,    0,  935,    0,
        0,    0,    0,  935,    0,    0,    0,    0,    0,    0,
        0,    0,  935,  935,    0,    0,    0,    0,    0,    0,
      935,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  935,    0,    0,    0,  935,  935,    0,
        0,    0,  935,    0,    0,    0,    0,    0,    0,  935,
        0,    0,    0,  935,    0,  935,    0,  935,    0,  935,
      939,    0,  939,    0,    0,    0,    0,  939,    0,    0,
        0,    0,    0,    0,    0,    0,  939,  939,    0,    0,
        0,    0,    0,    0,  939,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  939,    0,    0,
        0,  939,  939,    0,    0,    0,  939,    0,    0,    0,
        0,    0,    0,  939,    0,    0,    0,  939,    0,  939,
        0,  939,    0,  939,  942,    0,    0,    0,  942,    0,

        0,    0,    0,  942,    0,    0,    0,    0,    0,    0,
        0,    0,  942,  942,    0,    0,    0,    0,    0,    0,
      942,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  942,    0,    0,    0,  942,  942,    0,
        0,    0,  942,    0,    0,    0,    0,    0,    0,  942,
        0,    0,    0,  942,    0,  942,    0,  942,    0,  942,
      947,    0,    0,    0,    0,  947,    0,    0,    0,    0,
        0,    0,    0,    0,  947,  947,    0,    0,    0,    0,
        0,    0,  947,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  947,    0,    0,    0,  947,

      947,    0,    0,    0,  947,    0,    0,    0,    0,    0,
        0,  947,    0,    0,    0,  947,    0,  947,    0,  947,
        0,  947,  951,    0,    0,    0,    0,  951,    0,    0,
        0,    0,    0,    0,    0,    0,  951,  951,    0,    0,
        0,    0,    0,    0,  951,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  951,    0,    0,
        0,  951,  951,    0,    0,    0,  951,    0,    0,    0,
        0,    0,    0,  951,    0,    0,    0,  951,    0,  951,
        0,  951,    0,  951,  980,    0,    0,    0,    0,  980,
        0,    0,    0,    0,    0,    0,    0,    0,  980,  980,

        0,    0,    0,    0,    0,    0,  980,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  980,
        0,    0,    0,  980,  980,    0,    0,    0,  980,    0,
        0,    0,    0,    0,    0,  980,    0,    0,    0,  980,
        0,  980,    0,  980,    0,  980,  987,    0,  987,    0,
        0,    0,    0,  987,    0,    0,    0,    0,    0,    0,
        0,    0,  987,  987,    0,    0,    0,    0,    0,    0,
      987,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  987,    0,    0,    0,  987,  987,    0,
        0,    0,  987,    0,    0,    0,    0,    0,    0,  987,

        0,    0,    0,  987,    0,  987,    0,  987,    0,  987,
      993,    0,  993,    0,    0,    0,    0,  993,    0,    0,
        0,    0,    0,    0,    0,    0,  993,  993,    0,    0,
        0,    0,    0,    0,  993,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  993,    0,    0,
        0,  993,  993,    0,    0,    0,  993,    0,    0,    0,
        0,    0,    0,  993,    0,    0,    0,  993,    0,  993,
        0,  993,    0,  993,  998,    0,  998,    0,    0,    0,
        0,  998,    0,    0,    0,    0,    0,    0,    0,    0,
      998,  998,    0,    0,    0,    0,    0,    0,  998,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  998,    0,    0,    0,  998,  998,    0,    0,    0,
      998,    0,    0,    0,    0,    0,    0,  998,    0,    0,
        0,  998,    0,  998,    0,  998,    0,  998, 1004,    0,
     1004,    0,    0,    0,    0, 1004,    0,    0,    0,    0,
        0,    0,    0,    0, 1004, 1004,    0,    0,    0,    0,
        0,    0, 1004,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1004,    0,    0,    0, 1004,
     1004,    0,    0,    0, 1004,    0,    0,    0,    0,    0,
        0, 1004,    0,    0,    0, 1004,    0, 1004,    0, 1004,

        0, 1004, 1010,    0, 1010,    0,    0,    0,    0, 1010,
        0,    0,    0,    0,    0,    0,    0,    0, 1010, 1010,
        0,    0,    0,    0,    0,    0, 1010,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1010,
        0,    0,    0, 1010, 1010,    0,    0,    0, 1010,    0,
        0,    0,    0,    0,    0, 1010,    0,    0,    0, 1010,
        0, 1010,    0, 1010,    0, 1010, 1029,    0, 1029,    0,
        0,    0,    0, 1029,    0,    0,    0,    0,    0,    0,
        0,    0, 1029, 1029,    0,    0,    0,    0,    0,    0,
     1029,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1029,    0,    0,    0, 1029, 1029,    0,
        0,    0, 1029,    0,    0,    0,    0,    0,    0, 1029,
        0,    0,    0, 1029,    0, 1029,    0, 1029,    0, 1029,
     1033,    0, 1033,    0,    0,    0,    0, 1033,    0,    0,
        0,    0,    0,    0,    0,    0, 1033, 1033,    0,    0,
        0,    0,    0,    0, 1033,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1033,    0,    0,
        0, 1033, 1033,    0,    0,    0, 1033,    0,    0,    0,
        0,    0,    0, 1033,    0,    0,    0, 1033,    0, 1033,
        0, 1033,    0, 1033, 1050,    0, 1050,    0,    0,    0,

        0, 1050,    0,    0,    0,    0,    0,    0,    0,    0,
     1050, 1050,    0,    0,    0,    0,    0,    0, 1050,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1050,    0,    0,    0, 1050, 1050,    0,    0,    0,
     1050,    0,    0,    0,    0,    0,    0, 1050,    0,    0,
        0, 1050,    0, 1050,    0, 1050,    0, 1050, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1098,    0,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099,    0,
     1099, 1099,    0, 1099, 1099, 1099, 1099, 1099, 1100, 1100,
     1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101, 1102,    0,

     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104,
     1104, 1104, 1104, 1105, 1105, 1105, 1105, 1105, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108,
        0, 1108,    0,    0, 1108, 1109, 1109,    0, 1109,    0,
        0, 1109, 1110, 1110, 1110, 1110, 1110,    0, 1110, 1110,
     1110, 1110, 1111, 1111, 1112,    0,    0, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1114,    0,    0, 1114, 1114, 1114,

     1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115,    0,
     1115, 1115, 1115, 1115, 1116, 1116, 1117,    0, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1118,    0, 1118, 1118,
        0, 1118, 1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1120,    0, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1121,    0, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1122,    0, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1123,    0, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1124,    0, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1125,    0, 1125, 1125,

     1125, 1125, 1125, 1125, 1125, 1125, 1126,    0, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1127,    0, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1128,    0, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132,    0, 1132,
        0,    0, 1132, 1133,    0, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1134, 1134,    0, 1134,    0,    0, 1134,
     1135, 1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137,
     1138, 1138,    0, 1138,    0,    0, 1138, 1139,    0, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1140,    0, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1143,    0, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,    0,
     1144,    0,    0, 1144, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147,    0,

     1147, 1147, 1147, 1147, 1148,    0, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1149,    0, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1150,    0, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1151,    0, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152, 1153,
     1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1155,    0, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1156,    0, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1157,    0, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1158,    0, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1159,    0, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1160,    0, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1161,    0, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1162,    0, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,    0,
     1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1165,
        0, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
        0, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1167,
        0, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1168,
        0, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,

        0, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170,
        0, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,
        0, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1172,
        0, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1173,
        0, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
        0, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181,
     1181, 1181, 1181, 1181,    0, 1181, 1181, 1181, 1181, 1182,
        0, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1183,
        0, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
        0, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185,
        0, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186,
     1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1189,    0, 1189, 1189, 1189, 1189,

     1189, 1189, 1189, 1189, 1190,    0, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191, 1192,
        0, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193,
        0, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,
        0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195,
        0, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,
        0, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,
        0, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198,
        0, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,
        0, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200,

        0, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201,
        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202,
        0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,
        0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209,
        0, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1210,

        0, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1211,
        0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1212,
        0, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1213,
        0, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214,
        0, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,
        0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
     1216, 1216, 1216, 1216, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1219,    0, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1220,    0, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1221, 1221, 1221, 1221, 1221, 1222,
        0, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,
        0, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
        0, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,
        0, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
        0,    0, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227,
        0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228,
        0, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
        0, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230,
        0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,

        0, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1232,
        0, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,
        0, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
        0, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235,
        0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236,
        0, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1237,
        0, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238,
        0, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241,

        0, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242,
        0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243,
     1243, 1243, 1243, 1243, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1245,    0, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1246,    0, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1247,    0, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1248,    0, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1249,    0, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1250,    0, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1251,    0, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1251, 1252,    0, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1253,    0, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1254,    0, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1255,    0, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1256,    0, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1257,    0, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1258,    0, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[190] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int ann_flex_debug;
int ann_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *anntext;
#line 1 "language.l"
#line 2 "language.l"

#include "broadway.h"
#include "language.tab.h"

// --- Fix the names from the C parser

#define cblval annlval
#define cbtext anntext
#define cbleng annleng

// --- Routines from the C parser for handling constants

extern exprNode *char_constant(const char *);
extern exprNode *int_constant(const char *, bool decimal, bool octal);
extern exprNode *wide_char_const(const char *);
extern exprNode *float_constant(const char *s);
extern char * convert_escape_sequences(char *string);
void parse_line_directive(char *s);
void save_pragma_directive(char *s);

void EnterC(void);
void ExitC(void);

// --- Line number offset (to deal with preprocessing the code). We
// update this number when we see #line directives.

void adjust_line_number(char * text);

int line_number_offset = 0;

/* -- Prefix all symbols with "ann" */
/* -- Define the four states: "BDWY" for all Broadway annotations
language tokens, "C" for C code fragments, and "META" for
meta-symbols. The meta-symbols always embedded in the C
patterns. The "BDWYID" state is used for proecdure names, which
could conflict with reserved words in the annotation language. */




/* -- Define some useful short-hands */
#line 2454 "lex.ann.c"

#define INITIAL 0
#define BDWY 1
#define BDWYID 2
#define C 3
#define META 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int annlex_destroy (void );

int annget_debug (void );

void annset_debug (int debug_flag  );

YY_EXTRA_TYPE annget_extra (void );

void annset_extra (YY_EXTRA_TYPE user_defined  );

FILE *annget_in (void );

void annset_in  (FILE * in_str  );

FILE *annget_out (void );

void annset_out  (FILE * out_str  );

int annget_leng (void );

char *annget_text (void );

int annget_lineno (void );

void annset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int annwrap (void );
#else
extern int annwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( anntext, annleng, 1, annout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( annin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( annin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, annin))==0 && ferror(annin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(annin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int annlex (void);

#define YY_DECL int annlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after anntext and annleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( annleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(anntext[annleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 75 "language.l"


	/* -- General rules for handling line number directives */

#line 2653 "lex.ann.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! annin )
			annin = stdin;

		if ( ! annout )
			annout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			annensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				ann_create_buffer(annin,YY_BUF_SIZE );
		}

		ann_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of anntext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1097 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6775 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < annleng; ++yyl )
				if ( anntext[yyl] == '\n' )
					   
    annlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
#line 80 "language.l"
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 80 "language.l"
{ adjust_line_number(anntext); }
	YY_BREAK
/* -- State transition (context sensitivity) rules */
case 3:
YY_RULE_SETUP
#line 84 "language.l"
{ BEGIN(C); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "language.l"
{ BEGIN(BDWY); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "language.l"
{ BEGIN(META); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "language.l"
{ BEGIN(C); }
	YY_BREAK
/* -- General rules for handling white-space (including regular line number
              adjustment */
case 7:
YY_RULE_SETUP
#line 93 "language.l"
{  }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 95 "language.l"
{  }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 97 "language.l"
{  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- Broadway annotation tokens ------------------------------------------------------ */
case 11:
YY_RULE_SETUP
#line 103 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMUSTPROPERTY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINITIALLY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 107 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDIAGNOSTIC; /* TB new */ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 109 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGLOBAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 111 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset);
                         BEGIN(BDWYID);
                         return tokPROCEDURE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokENABLE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDISABLE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         BEGIN(BDWY);
                         return tokID; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokACCESS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMODIFY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 125 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANALYZE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 126 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDEFAULT ; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 127 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIF; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EXACTLY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCOULD_BE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATLEAST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATMOST; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_BOTTOM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBEFORE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAFTER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokALWAYS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEVER; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokTRACE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 141 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCONFIDENCE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokFORWARD; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 144 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBACKWARD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ALIASOF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_SAMEAS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 150 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_ENTRY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_EXIT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNEW; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 153 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokARROW; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 154 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDELETE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokPATTERN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANDAND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokOROR; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNOT_EQUALS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS_EQUALS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokLESS_EQUALS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGREATER_EQUALS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 166 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_CONSTANT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokASSIGN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 171 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWEAKASSIGN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 173 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPORT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 174 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokERROR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 175 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAPPEND; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 177 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWHEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPLACE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 179 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINLINE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 181 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_SET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 182 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_SET; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_EQUIV; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_EQUIV; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 186 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ELEMENT_OF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 187 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTYSET; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 189 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokADD; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 191 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return tokID;
                       }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 195 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 197 "language.l"
{ exprNode * e = int_constant(anntext, true, false);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 204 "language.l"
{ exprNode * e = int_constant(anntext, false, true);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "language.l"
{ exprNode * e = int_constant(anntext, false, false);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 218 "language.l"
{ yyless(annleng-1);
                                exprNode * e = float_constant(anntext);
                                if (e->typ() == Const)
                                  annlval.t_c_expression = (constNode *) e;
                                else
                                  annlval.t_c_expression = 0;
                                return tokCONSTANT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 227 "language.l"
{ exprNode * e = char_constant(anntext);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 234 "language.l"
{ char * text = strdup(&anntext[1]);
                            int length = strlen(text);
                            text[length - 1] = '\0';
                            annlval.t_id = new parserID(convert_escape_sequences(text),
                                                        (annlineno - line_number_offset));
                            free(text);
                            return tokSTRING; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 242 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- C grammar tokens ---------------------------------------------------------------- */
case 80:
YY_RULE_SETUP
#line 246 "language.l"
{  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 248 "language.l"
{ cblval.tok = get_pos(); return ctokAUTO;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 249 "language.l"
{ cblval.tok = get_pos(); return ctokBREAK;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 250 "language.l"
{ cblval.tok = get_pos(); return ctokCASE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 251 "language.l"
{ cblval.tok = get_pos(); return ctokCHAR;}
	YY_BREAK
case 85:
#line 253 "language.l"
case 86:
YY_RULE_SETUP
#line 253 "language.l"
{ cblval.tok = get_pos(); return ctokCONST;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 254 "language.l"
{ cblval.tok = get_pos(); return ctokCONTINUE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 255 "language.l"
{ cblval.tok = get_pos(); return ctokDEFAULT;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 256 "language.l"
{ cblval.tok = get_pos(); return ctokDO;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 257 "language.l"
{ cblval.tok = get_pos(); return ctokDOUBLE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 258 "language.l"
{ cblval.tok = get_pos(); return ctokELSE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 259 "language.l"
{ cblval.tok = get_pos(); return ctokENUM;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 260 "language.l"
{ cblval.tok = get_pos(); return ctokEXTERN;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 261 "language.l"
{ cblval.tok = get_pos(); return ctokFLOAT;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 262 "language.l"
{ cblval.tok = get_pos(); return ctokFOR;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 263 "language.l"
{ cblval.tok = get_pos(); return ctokGOTO;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 264 "language.l"
{ cblval.tok = get_pos(); return ctokIF;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 265 "language.l"
{ cblval.tok = get_pos(); return ctokINT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 266 "language.l"
{ cblval.tok = get_pos(); return ctokLONG;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 267 "language.l"
{ cblval.tok = get_pos(); return ctokREGISTER;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 268 "language.l"
{ cblval.tok = get_pos(); return ctokRETURN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 269 "language.l"
{ cblval.tok = get_pos(); return ctokSHORT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 270 "language.l"
{ cblval.tok = get_pos(); return ctokSIGNED;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 271 "language.l"
{ cblval.tok = get_pos(); return ctokSIZEOF;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 272 "language.l"
{ cblval.tok = get_pos(); return ctokSTATIC;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 273 "language.l"
{ cblval.tok = get_pos(); return ctokSTRUCT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 274 "language.l"
{ cblval.tok = get_pos(); return ctokSWITCH;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 275 "language.l"
{ cblval.tok = get_pos(); return ctokTYPEDEF;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 276 "language.l"
{ cblval.tok = get_pos(); return ctokUNION;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 277 "language.l"
{ cblval.tok = get_pos(); return ctokUNSIGNED;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 278 "language.l"
{ cblval.tok = get_pos(); return ctokVOID;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 279 "language.l"
{ cblval.tok = get_pos(); return ctokVOLATILE;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 280 "language.l"
{ cblval.tok = get_pos(); return ctokWHILE;}
	YY_BREAK
case 114:
#line 283 "language.l"
case 115:
#line 284 "language.l"
case 116:
YY_RULE_SETUP
#line 284 "language.l"
{ cblval.tok = get_pos(); return ctokINLINE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 285 "language.l"
{ cblval.tok = get_pos(); return ctokATTRIBUTE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 288 "language.l"
{ cblval.tok = get_pos();
                  cblval.idN = new idNode(cbtext, cblval.tok);
                  if (CBZ::current_unit->types()->is_a_type(cblval.idN->name())) {
                    cblval.idN->decl(CBZ::current_unit->types()->lookup(cblval.idN->name()));
                    return TYPEDEFname;
                  }
                  else
                   return IDENTIFIER; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 297 "language.l"
{ cblval.exprN = int_constant(cbtext, true, false);
                         return INTEGERconstant; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 300 "language.l"
{ cblval.exprN = int_constant(cbtext, false, true);
                         return OCTALconstant; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 303 "language.l"
{ cblval.exprN = int_constant(cbtext, false, false);
                         return HEXconstant; }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 306 "language.l"
{ yyless(cbleng-1);
                             cblval.exprN = float_constant(cbtext);
                             return FLOATINGconstant; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 311 "language.l"
{ cblval.exprN = char_constant(cbtext);
                         return CHARACTERconstant; }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 314 "language.l"
{ CBZ::SyntaxError(string("Unmatched '"));
                         cblval.exprN = char_constant("'X'");
                         CBZ::current_line++;
                         return CHARACTERconstant; }
	YY_BREAK
case 125:
#line 321 "language.l"
case 126:
#line 322 "language.l"
case 127:
YY_RULE_SETUP
#line 322 "language.l"
{ /* bad char constant */
                                  cblval.exprN = char_constant("'X'");
                                  CBZ::SyntaxError(
                                    string("invalid char constant ") + string(cbtext) +
                                    string(", treating as 'X'"));
                                  return CHARACTERconstant;
                                }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 331 "language.l"
{ cblval.exprN = wide_char_const(cbtext);
                         return WIDECHARconstant;
                        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 336 "language.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 346 "language.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 356 "language.l"
{ /* bad string constant */
            /* (unterminated string constants are caught by preprocessor) */
                      CBZ::SyntaxError(
                        string("string contains invalid escape code") +
                        string(cbtext));
		      cblval.tok = get_pos();
                      cblval.exprN = new constNode(constant(new string("")),
                                                   "\"\"",cblval.tok);
                      return STRINGliteral;
                    }
	YY_BREAK
case 132:
/* rule 132 can match eol */
#line 369 "language.l"
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 369 "language.l"
{
                     parse_line_directive(cbtext); }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 372 "language.l"
{ EnterC(); CBZ::current_line++; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 374 "language.l"
{ ExitC(); CBZ::current_line++; }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 376 "language.l"
{
                     save_pragma_directive(cbtext);
                     CBZ::current_line++; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 380 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACE;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 381 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 383 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACKET;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 384 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACKET;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 385 "language.l"
{ cblval.tok = get_pos(); return (int)ctokDOT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 386 "language.l"
{ cblval.tok = get_pos(); return (int)ctokAND;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 387 "language.l"
{ cblval.tok = get_pos(); return (int)ctokSTAR;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 388 "language.l"
{ cblval.tok = get_pos(); return (int)ctokPLUS;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 389 "language.l"
{ cblval.tok = get_pos(); return (int)ctokMINUS;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 390 "language.l"
{ cblval.tok = get_pos(); return (int)ctokTILDE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 391 "language.l"
{ cblval.tok = get_pos(); return (int)ctokNOT;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 392 "language.l"
{ cblval.tok = get_pos(); return (int)ctokDIVIDE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 393 "language.l"
{ cblval.tok = get_pos(); return (int)ctokPERCENT;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 394 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLESS;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 395 "language.l"
{ cblval.tok = get_pos(); return (int)ctokGREATER;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 396 "language.l"
{ cblval.tok = get_pos(); return (int)ctokHAT;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 397 "language.l"
{ cblval.tok = get_pos(); return (int)ctokOR;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 398 "language.l"
{ cblval.tok = get_pos(); return (int)ctokQUESTION;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 399 "language.l"
{ cblval.tok = get_pos(); return (int)ctokCOLON;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 400 "language.l"
{ cblval.tok = get_pos(); return (int)ctokSEMICOLON;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 401 "language.l"
{ cblval.tok = get_pos(); return (int)ctokEQUALS;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 403 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTPAREN;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 404 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTPAREN;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 405 "language.l"
{ cblval.tok = get_pos(); return (int)ctokCOMMA;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 407 "language.l"
{ cblval.tok = get_pos(); return ctokARROW;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 408 "language.l"
{ cblval.tok = get_pos(); return ctokICR;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 409 "language.l"
{ cblval.tok = get_pos(); return ctokDECR;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 410 "language.l"
{ cblval.tok = get_pos(); return ctokLS;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 411 "language.l"
{ cblval.tok = get_pos(); return ctokRS;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 412 "language.l"
{ cblval.tok = get_pos(); return ctokLE;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 413 "language.l"
{ cblval.tok = get_pos(); return ctokGE;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 414 "language.l"
{ cblval.tok = get_pos(); return ctokEQ;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 415 "language.l"
{ cblval.tok = get_pos(); return ctokNE;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 416 "language.l"
{ cblval.tok = get_pos(); return ctokANDAND;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 417 "language.l"
{ cblval.tok = get_pos(); return ctokOROR;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 418 "language.l"
{ cblval.tok = get_pos(); return ctokMULTassign;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 419 "language.l"
{ cblval.tok = get_pos(); return ctokDIVassign;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 420 "language.l"
{ cblval.tok = get_pos(); return ctokMODassign;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 421 "language.l"
{ cblval.tok = get_pos(); return ctokPLUSassign;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 422 "language.l"
{ cblval.tok = get_pos(); return ctokMINUSassign;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 423 "language.l"
{ cblval.tok = get_pos(); return ctokLSassign;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 424 "language.l"
{ cblval.tok = get_pos(); return ctokRSassign;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 425 "language.l"
{ cblval.tok = get_pos(); return ctokANDassign;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 426 "language.l"
{ cblval.tok = get_pos(); return ctokERassign;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 427 "language.l"
{ cblval.tok = get_pos(); return ctokORassign;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 428 "language.l"
{ cblval.tok = get_pos(); return ctokELLIPSIS;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 430 "language.l"
{ char tmp[20];
                          CBZ::char_to_text(tmp, *cbtext);
                          CBZ::SyntaxError(string("Unexpected character: ") + string(tmp));
                        }
	YY_BREAK
/* -- Embedded meta-tokens ------------------------------------------------------------ */
case 184:
YY_RULE_SETUP
#line 437 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokEXPR; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 438 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokSTMT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 439 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokTYPE; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 441 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return metatokID;
                       }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 445 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 447 "language.l"
ECHO;
	YY_BREAK
#line 3784 "lex.ann.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BDWY):
case YY_STATE_EOF(BDWYID):
case YY_STATE_EOF(C):
case YY_STATE_EOF(META):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed annin at a new source and called
			 * annlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = annin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( annwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * anntext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of annlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					annrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			annrestart(annin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) annrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1097 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1097 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1096);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up anntext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --annlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					annrestart(annin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( annwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve anntext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    annlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void annrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        annensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            ann_create_buffer(annin,YY_BUF_SIZE );
	}

	ann_init_buffer(YY_CURRENT_BUFFER,input_file );
	ann_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void ann_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		annpop_buffer_state();
	 *		annpush_buffer_state(new_buffer);
     */
	annensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ann_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (annwrap()) processing, but the only time this flag
	 * is looked at is after annwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void ann_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	annin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ann_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) annalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ann_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) annalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ann_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ann_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ann_create_buffer()
 * 
 */
    void ann_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		annfree((void *) b->yy_ch_buf  );

	annfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a annrestart() or at EOF.
 */
    static void ann_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	ann_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ann_init_buffer was _probably_
     * called from annrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void ann_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ann_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void annpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	annensure_buffer_stack();

	/* This block is copied from ann_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ann_switch_to_buffer. */
	ann_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void annpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	ann_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		ann_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void annensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)annalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in annensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)annrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in annensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ann_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) annalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ann_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ann_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to annlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ann_scan_bytes() instead.
 */
YY_BUFFER_STATE ann_scan_string (yyconst char * yystr )
{
    
	return ann_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to annlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ann_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) annalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ann_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ann_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ann_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up anntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		anntext[annleng] = (yy_hold_char); \
		(yy_c_buf_p) = anntext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		annleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int annget_lineno  (void)
{
        
    return annlineno;
}

/** Get the input stream.
 * 
 */
FILE *annget_in  (void)
{
        return annin;
}

/** Get the output stream.
 * 
 */
FILE *annget_out  (void)
{
        return annout;
}

/** Get the length of the current token.
 * 
 */
int annget_leng  (void)
{
        return annleng;
}

/** Get the current token.
 * 
 */

char *annget_text  (void)
{
        return anntext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void annset_lineno (int  line_number )
{
    
    annlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see ann_switch_to_buffer
 */
void annset_in (FILE *  in_str )
{
        annin = in_str ;
}

void annset_out (FILE *  out_str )
{
        annout = out_str ;
}

int annget_debug  (void)
{
        return ann_flex_debug;
}

void annset_debug (int  bdebug )
{
        ann_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from annlex_destroy(), so don't allocate here.
     */

    /* We do not touch annlineno unless the option is enabled. */
    annlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    annin = stdin;
    annout = stdout;
#else
    annin = (FILE *) 0;
    annout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * annlex_init()
     */
    return 0;
}

/* annlex_destroy is for both reentrant and non-reentrant scanners. */
int annlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ann_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		annpop_buffer_state();
	}

	/* Destroy the stack itself. */
	annfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * annlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *annalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *annrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void annfree (void * ptr )
{
	free( (char *) ptr );	/* see annrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 447 "language.l"



// --- Adapted from parse_line_directive in lex.l

void adjust_line_number(char * s)
{
 char *p;
  int val;

  // Read until a '#' sign
  for (p = s; *p != '\n' && *p != '#'; p++);
  assert(*p != '\n');

  // Read spaces and tabs
  for (p = p + 1; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
  assert(*p != '\n');

  // Swallow "line" and any trailing whitespace
  if (strncmp(p, "line", 4) == 0) {
    p = p + 4;

    // There must be whitespace
    assert(*p == ' ' || *p == '\t');

    for (     ; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
    assert(*p != '\n');
  }

  // Read an integer from the string
  if (isdigit(*p))
    for (val = 0; *p && isdigit(*p); p++)
      val = val * 10 + (*p - '0');
  else {
    CBZ::SyntaxError(string("#line error: expecting line number"));
    return;
  }

  line_number_offset = annlineno - val;
}

