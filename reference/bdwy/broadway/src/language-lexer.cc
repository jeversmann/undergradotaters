#define yy_create_buffer ann_create_buffer
#define yy_delete_buffer ann_delete_buffer
#define yy_scan_buffer ann_scan_buffer
#define yy_scan_string ann_scan_string
#define yy_scan_bytes ann_scan_bytes
#define yy_flex_debug ann_flex_debug
#define yy_init_buffer ann_init_buffer
#define yy_flush_buffer ann_flush_buffer
#define yy_load_buffer_state ann_load_buffer_state
#define yy_switch_to_buffer ann_switch_to_buffer
#define yyin annin
#define yyleng annleng
#define yylex annlex
#define yyout annout
#define yyrestart annrestart
#define yytext anntext
#define yylineno annlineno

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /projects/broadway/cvsroot/broadway/src/language-lexer.cc,v 1.35 2003/02/19 17:32:33 sammy Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
static yyconst short int yy_acclist[886] =
    {   0,
      189,   10,  188,    7,   10,  188,    8,  188,   10,  188,
       10,  188,    7,   10,  188,   10,  188,   78,  188,    7,
       78,  188,   78,  188,   78,  188,   78,  188,   78,  188,
       78,  188,   78,  188,   78,  188,   78,  188,   78,  188,
       72,   73,   78,  188,   72,   78,  188,   78,  188,   54,
       78,  188,   78,  188,   78,  188,   70,   78,  188,   70,
       78,  188,   70,   78,  188,   70,   78,  188,   70,   78,
      188,   70,   78,  188,   70,   78,  188,   70,   78,  188,
       70,   78,  188,   70,   78,  188,   70,   78,  188,   70,
       78,  188,   70,   78,  188,   70,   78,  188,   70,   78,

      188,   78,  188,   78,  188,    7,   78,  188,   78,  188,
      188,    7,  188,  188,   19,  188,  182,  188,    7,   79,
      182,  188,  146,  182,  188,  182,  188,  182,  188,  148,
      182,  188,  141,  182,  188,  182,  188,  157,  182,  188,
      158,  182,  188,  142,  182,  188,  143,  182,  188,  159,
      182,  188,  144,  182,  188,  140,  182,  188,  147,  182,
      188,  118,  119,  182,  188,  118,  182,  188,  154,  182,
      188,  155,  182,  188,  149,  182,  188,  156,  182,  188,
      150,  182,  188,  153,  182,  188,  117,  182,  188,  117,
      182,  188,  138,  182,  188,  139,  182,  188,  151,  182,

      188,  117,  182,  188,  117,  182,  188,  117,  182,  188,
      117,  182,  188,  117,  182,  188,  117,  182,  188,  117,
      182,  188,  117,  182,  188,  117,  182,  188,  117,  182,
      188,  117,  182,  188,  117,  182,  188,  117,  182,  188,
      117,  182,  188,  117,  182,  188,  117,  182,  188,  136,
      182,  188,  152,  182,  188,  137,  182,  188,  145,  182,
      188,    7,   79,  182,  188,  182,  188,  187,  188,    7,
      187,  188,  187,  188,  186,  187,  188,  186,  187,  188,
      186,  187,  188,  186,  187,  188,    6,  187,  188,    7,
      187,  188,  187,  188,    7,    3,    7,   49,   77,   47,

       59,   73,   72,   73,   72,   73,   72,   72,   72,   55,
       51,   50,   52,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   24,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   48,   19,    7,   79,
      168,  128,    5,  173,  169,  178,  123,  125,  171,  161,
      174,  162,  175,  160,  172,  119,  118,  119,  118,  119,
      118,  118,  118,  163,  165,  167,  166,  164,  117,  179,
      117,  117,  117,  117,  117,  117,  117,   88,  117,  117,
      117,  117,  117,  117,  117,   96,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  180,  170,

        4,    7,   79,  186,  186,  186,  186,    9,    1,   76,
       44,   75,   75,   75,   75,   73,   73,   72,   73,   72,
       73,   72,   73,   74,   72,   72,   72,   56,   71,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   43,   70,   70,   70,   70,   70,   70,
       70,  122,  181,  121,  121,  121,  121,  119,  119,  118,
      119,  118,  119,  118,  119,  120,  118,  118,  118,  176,
      177,  129,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,   94,  117,  117,  117,
       97,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,    1,  131,  186,
      186,  186,   77,   77,   73,   73,   73,   75,   72,   73,
       72,   73,   74,   74,   72,   72,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   53,   70,   70,
       70,   70,   70,   70,   70,   70,   60,   70,  130,  128,
      128,  122,  124,  124,  126,  119,  119,  119,  121,  118,
      119,  118,  119,  120,  120,  118,  118,  127,  117,  117,
      117,   80,  117,  117,   82,  117,   83,  117,  117,  117,
      117,  117,   90,  117,   91,  117,  117,  117,   95,  117,
      117,   98,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  110,  117,  117,  117,  183,  186,
      184,  186,  185,  186,   77,   77,   76,   75,   73,   73,
       74,   74,   74,   33,   70,   70,   70,   70,   70,   70,
       70,   58,   70,   70,   70,   70,   29,   68,   70,   70,
       70,   70,   70,   70,   70,   70,  128,  128,  124,  122,
      121,  119,  119,  120,  120,  120,  129,  129,  117,  117,
      117,   81,  117,   84,  117,  117,  117,  117,  117,   93,
      117,  117,  117,  117,  101,  117,  117,  117,  117,  117,
      117,  117,  108,  117,  117,  117,  112,  117,    2,   77,
       74,   74,   31,   34,   20,   70,   70,   70,   45,   70,

       70,   17,   70,   15,   70,   70,   62,   70,   21,   70,
       70,   70,   70,   70,   70,   70,   57,   70,  130,  130,
      128,  130,  128,  128,  130,  122,  124,  120,  120,  129,
      129,  127,  117,  117,  117,  117,  117,   89,  117,   92,
      117,  113,  117,  117,  100,  117,  102,  117,  103,  117,
      104,  117,  105,  117,  106,  117,  117,  117,  117,    2,
      132,   77,   32,   30,   22,   70,   23,   70,   18,   70,
       70,   70,   42,   70,   46,   70,   70,   70,   70,   69,
      130,  130,  128,  130,  128,  128,  128,  129,  117,   85,
      117,  117,  117,   87,  117,  117,  107,  117,  117,  117,

      135,   36,   26,   70,   40,   41,   70,   70,   11,   70,
      130,  128,  130,  128,  130,  128,  130,  128,  130,  128,
      130,  128,  130,  128,  130,  129,  117,  114,  117,   86,
      117,   99,  117,  109,  117,  111,  117,   37,   14,   70,
       28,   39,   16,   70,  130,  128,  130,  128,  130,  128,
      128,  130,  128,  130,  117,  117,   38,   27,   25,  128,
      130,  128,  130,  117,  115,  117,   35,   63,  128,  130,
      117,   12,   61,  117,   67,   13,  116,  117,   64,  133,
      135,  134,  135,   65,   66
    } ;

static yyconst short int yy_accept[1090] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   11,   13,   16,   18,   20,
       23,   25,   27,   29,   31,   33,   35,   37,   39,   41,
       45,   48,   50,   53,   55,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  104,  106,  109,  111,  112,  114,  115,  117,  119,
      123,  126,  128,  130,  133,  136,  138,  141,  144,  147,
      150,  153,  156,  159,  162,  166,  169,  172,  175,  178,
      181,  184,  187,  190,  193,  196,  199,  202,  205,  208,
      211,  214,  217,  220,  223,  226,  229,  232,  235,  238,

      241,  244,  247,  250,  253,  256,  259,  262,  266,  268,
      270,  273,  275,  278,  281,  284,  287,  290,  293,  295,
      296,  297,  297,  298,  298,  298,  298,  298,  299,  299,
      300,  300,  301,  301,  301,  302,  302,  302,  302,  303,
      303,  303,  305,  307,  307,  308,  309,  310,  311,  312,
      313,  314,  314,  314,  314,  314,  314,  314,  315,  315,
      316,  317,  318,  319,  320,  321,  322,  323,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      337,  337,  337,  338,  339,  341,  342,  342,  343,  343,
      344,  345,  346,  347,  347,  348,  349,  349,  350,  351,

      352,  353,  354,  355,  355,  355,  356,  356,  357,  357,
      357,  359,  361,  361,  362,  363,  364,  365,  366,  367,
      368,  369,  370,  370,  370,  371,  372,  373,  374,  375,
      376,  377,  378,  380,  381,  382,  383,  384,  385,  386,
      388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  399,  400,  401,  402,  404,  404,  404,  404,  404,
      404,  404,  405,  406,  407,  408,  408,  409,  409,  410,
      410,  410,  410,  411,  411,  411,  412,  413,  414,  415,
      416,  417,  418,  418,  418,  420,  422,  424,  425,  426,
      427,  428,  429,  429,  429,  429,  429,  429,  429,  429,

      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      439,  440,  441,  441,  442,  443,  444,  446,  447,  448,
      449,  450,  451,  452,  452,  452,  452,  452,  452,  452,
      453,  453,  453,  453,  453,  453,  454,  455,  456,  457,
      458,  459,  460,  460,  460,  462,  464,  466,  467,  468,
      469,  470,  471,  472,  472,  473,  473,  473,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  486,  487,  489,  490,  491,  493,  494,  495,  496,
      497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
      507,  508,  508,  510,  510,  510,  510,  511,  512,  513,

      513,  513,  514,  514,  514,  515,  515,  515,  515,  515,
      515,  515,  515,  516,  517,  518,  519,  521,  523,  524,
      525,  526,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  528,  529,  530,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  539,  539,  539,  539,  539,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  547,  549,  549,
      549,  549,  550,  550,  550,  551,  551,  551,  552,  552,
      554,  554,  555,  555,  555,  555,  556,  556,  556,  556,
      556,  556,  556,  556,  557,  558,  559,  560,  562,  564,
      565,  566,  567,  568,  568,  568,  569,  569,  569,  570,

      571,  572,  574,  575,  577,  579,  580,  581,  582,  583,
      585,  587,  588,  589,  591,  592,  594,  595,  596,  597,
      598,  599,  600,  601,  602,  603,  604,  605,  607,  608,
      609,  609,  609,  609,  611,  613,  615,  615,  616,  616,
      616,  616,  616,  616,  617,  617,  617,  617,  617,  617,
      618,  618,  618,  618,  618,  618,  618,  618,  619,  620,
      621,  622,  623,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  626,  627,  628,  629,  630,  631,  632,  634,
      635,  636,  637,  638,  638,  638,  638,  638,  638,  638,
      639,  639,  640,  640,  641,  642,  643,  644,  645,  646,

      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  651,  651,  651,  651,  651,
      651,  651,  651,  652,  653,  654,  655,  656,  657,  657,
      658,  658,  658,  659,  659,  659,  659,  659,  659,  660,
      661,  662,  664,  666,  667,  668,  669,  670,  672,  673,
      674,  675,  677,  678,  679,  680,  681,  682,  683,  685,
      686,  687,  689,  689,  689,  689,  689,  690,  690,  691,
      691,  691,  691,  692,  693,  694,  694,  694,  694,  694,
      694,  695,  697,  698,  698,  699,  701,  702,  704,  706,

      707,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      711,  711,  712,  713,  714,  715,  716,  717,  719,  719,
      719,  719,  719,  720,  720,  720,  721,  721,  721,  723,
      723,  723,  723,  724,  724,  724,  726,  726,  726,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  729,
      730,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  733,  733,  733,  733,  733,  733,  733,
      733,  734,  735,  736,  737,  738,  740,  742,  744,  745,
      747,  749,  751,  753,  755,  757,  758,  759,  760,  760,
      760,  762,  762,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  764,  764,  765,  765,  765,  767,  767,  769,
      771,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  773,  775,  777,  778,  779,  780,  781,  781,  781,
      782,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  785,  785,  786,  786,  786,  786,  786,  786,  786,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  789,  789,  789,
      789,  790,  792,  793,  794,  796,  797,  799,  800,  801,
      801,  802,  802,  802,  802,  803,  804,  805,  805,  805,
      805,  805,  806,  806,  806,  806,  806,  808,  809,  811,

      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      814,  814,  814,  816,  816,  816,  816,  816,  818,  818,
      818,  820,  820,  820,  822,  822,  822,  824,  824,  824,
      824,  824,  826,  826,  826,  826,  826,  826,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  828,  830,  832,
      834,  836,  838,  838,  839,  839,  841,  841,  841,  842,
      842,  842,  843,  843,  843,  845,  845,  845,  845,  845,
      846,  846,  846,  846,  846,  846,  848,  848,  848,  848,
      848,  848,  848,  850,  850,  850,  850,  850,  851,  851,
      851,  851,  851,  851,  853,  853,  853,  853,  853,  853,

      855,  855,  855,  855,  855,  856,  857,  857,  857,  858,
      859,  859,  860,  860,  860,  860,  860,  860,  860,  860,
      862,  862,  862,  864,  864,  864,  864,  865,  867,  867,
      868,  868,  868,  868,  868,  868,  868,  869,  869,  871,
      871,  871,  871,  871,  872,  872,  872,  873,  873,  874,
      874,  874,  874,  875,  875,  876,  877,  877,  877,  877,
      879,  879,  879,  879,  879,  879,  879,  879,  880,  880,
      880,  880,  880,  880,  880,  882,  882,  884,  884,  884,
      884,  884,  884,  885,  885,  885,  885,  886,  886
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   32,   31,   33,   34,
       35,   35,   36,   35,   35,   37,   35,   35,   38,   35,
       35,   35,   35,   35,   39,   35,   35,   40,   35,   35,
       41,   42,   43,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   35,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    1,    1,    6,    1,
        7,    7,    8,    1,    1,    1,    1,    1,    4,    1,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        1,    4,    1,    1,    9,    7,    7,    8,    8,    8,
        7,    9,    9,    9,    9,    9,    9,   10,    9,    9,
        9,   10,    9,   10,    9,   10,    9,   10,    9,    9,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[1251] =
    {   0,
        0,    4,   24,   11,   98,    0,  172,   13,  246,  319,
     2373, 6775,  321, 6775, 2301, 2351,  326,  327, 6775,  331,
     2343,  315, 2298, 2357, 2325, 2350, 2347,  316, 2344,  365,
      341,  324, 2335, 2334,  308,    0, 2340,  295, 2300,  290,
      283, 2302,  310,  306, 2307, 2296,  320, 2303, 2302, 2298,
      316, 2278,  388,  405, 6775,  407, 2329,    0, 6775,  412,
     2321,  378, 2276, 2318,  368,  396, 6775, 6775, 2317,  373,
     6775,  349,  413,  374,  443,  421, 6775, 6775,  320, 2316,
      391, 6775,    0,   10, 6775, 6775, 2315, 2294, 2272, 2273,
      378,  363,  383,  389, 2274,  395, 2273, 2281,  403, 2260,

     2270, 2268, 2273, 6775,  396, 2315, 6775,  470,  479, 6775,
      445, 2304,    0, 2254, 2257, 2251, 6775,  483,  492,  501,
     6775, 2314,  514,  502,  507, 2313, 2261, 6775,  448, 6775,
      474, 6775,  417,  499, 6775, 2285,  522,  531,  567,  572,
      553,  495,  436,    0,  588,  501,  442, 2296, 6775, 6775,
     6775,  475,  491, 2252, 2244, 2250, 2246,    0, 2269, 2258,
     2259, 2239,  528, 2240, 2256, 2238, 2240,    0,  493, 2280,
     2228, 2247, 2232, 2225, 2246, 2226, 2230, 2228, 2223, 2236,
     2227, 2225, 6775,    0,  594, 6775,  520, 6775,  647, 6775,
     6775, 6775, 6775,  589, 6775, 6775,  709, 6775, 6775, 6775,

     6775, 6775, 6775, 2263,  614, 6775,  640,  662,  593,  634,
      602,  480,    0,  703,  641,  524, 2254, 6775, 6775, 6775,
     2253,    0,  543, 2235, 6775,  654, 2211, 2223, 2208, 2224,
     2211, 2216, 2201, 2202, 2199, 2199, 2203, 2198, 2195,    0,
      564, 2200,  566, 2196,  572,  551, 2200, 2193,  586,  632,
     2197, 6775, 6775, 6775,  715,  727,  741, 2247, 2200, 2194,
     2185,    0, 2186, 2188, 2184, 2240, 6775, 2239, 6775, 2183,
      727,  740, 6775,  591,  633, 6775, 6775,  757,  782,    0,
      737,  546,  763,  788,  424,  623,  677,  775,  569,  698,
      733, 6775, 2176, 2171, 2189, 2185, 2177, 2184, 2171, 2184,

     6775, 2179, 2172, 2171, 2180, 2175, 2178, 2176, 2162, 2173,
     2155, 2164,  788, 2197, 2159, 2147,    0, 2159, 2144,  644,
      651, 2189, 2147, 2140, 2149,  730,  808,  811,  816, 6775,
      853, 2190,  821,  824,  829, 6775, 6775,  846,  868,    0,
      808,  779,  833,  871,  607,  792,  793,  864,  727,  805,
      806, 6775, 6775,  830, 6775,  855,  716,  866, 2137, 2141,
     2140, 2138, 2150, 2143, 2130,  681, 2145, 2142, 2138, 2130,
     2136, 2139,    0, 2125, 2129,    0, 2130, 2127, 2115, 2117,
     2120, 2126, 2111, 2109, 2109, 2122, 2112, 2114, 2118, 2120,
     2109, 2161, 6775, 2113, 2104, 2115, 2097, 2094, 2107, 2106,

      900,  902,  938,  906,  919, 1000,  886, 1062,  894, 1124,
      916,  931,  787,  879,  887,  935, 6775, 6775,  910,  895,
     6775, 6775, 2103, 2105, 2094, 2088, 2095, 2083, 2076, 2094,
     2078, 2071, 2090, 2073, 2072, 2088, 2078, 2069, 2084, 2075,
     2069, 6775, 2097,  701,  906, 2079, 2051, 2063, 2071, 2103,
      561, 2070, 2069, 2068, 2071, 2054, 2068,    0, 2063, 2053,
      839, 6775,  949,  934,  966, 1188,  976,  983, 1252, 6775,
     2099,  952,  989, 1002, 2098, 6775,  977, 1007, 1318, 1008,
     1384, 1005, 1038,  938,  960,  976, 1056, 6775, 6775,  998,
      978, 6775, 6775, 1029, 1031, 6775,  898,  967, 2045, 2048,

     2049,    0, 2049,    0,    0, 2039, 2048, 2036, 2044,    0,
        0, 2037, 2033,    0, 2038,    0, 2032, 2032, 2027, 2039,
     2028, 2031, 2036, 2035, 2032, 2022, 2027,    0, 2014, 2027,
     2018, 2024, 2021,    0,    0,    0, 2069, 1045, 1023, 1069,
     1073, 1446, 1085, 1091, 1093, 1107, 1508, 1109,  981, 1028,
     1044, 1570, 1076, 1083, 1087, 1632, 1090, 1118, 6775, 6775,
     1057, 1011, 1045, 2007, 1999, 2000, 2003, 2010, 6775, 2017,
     2012, 1998, 1990, 2041, 2002, 2007, 2000, 2005,    0, 1998,
     2006, 2001, 6775, 1996, 1081, 1999, 1988, 2001, 1987, 6775,
     1981, 1973, 1981, 1976, 1985, 1976, 1988, 1973, 1986, 1969,

     1983, 1968, 1971, 1135, 1136, 1147, 1149, 1116, 1155, 1156,
     1696, 1169, 1172, 1173, 1187, 1189, 1760, 1195, 6775, 1161,
     1826, 1201, 1892, 1209, 1213, 1216, 1958, 1220, 1221, 1224,
     2024, 1235, 1246, 6775, 6775, 1095, 1150, 1185, 1233, 1237,
     2086, 1253, 1264, 2148, 1206, 2210, 1230, 2272, 1966, 1962,
     1969,    0,    0, 1963, 1963, 1968, 1959,    0, 1965, 1950,
     1955,    0, 1963, 1960, 1962, 1944, 1954, 1956,    0, 1945,
     1948,    0, 1937, 1996, 1940, 1992, 6775, 1275, 1277, 2334,
     1249, 2396, 6775, 6775, 6775, 1931, 1947, 1942, 1941, 1924,
     6775,    0, 1934, 1931, 1913,    0, 1922,    0,    0, 1912,

        0, 1917, 1912, 1898, 1892, 1883, 1896, 1887, 1876,    0,
     1864, 1854, 1846, 1850, 1841, 1836, 1836,    0, 1834, 1819,
     1860, 1281, 1289, 2458, 1293, 1300, 2520, 1301, 1315, 1302,
     2584, 1317, 1321, 2648, 1325, 1329, 2712, 1343, 1346, 1350,
     2778, 1358, 1365, 1369, 2844, 1386, 1387, 2910, 6775, 6775,
     1366, 1308, 1367, 1390, 2972, 1403, 1405, 1407, 1409, 3034,
     1413, 1292, 1314, 1333, 3096, 1381, 1382, 1391, 3158, 1392,
     1812, 1800, 1802, 1788, 1786,    0,    0,    0, 1799,    0,
        0,    0,    0,    0,    0, 1792, 1792, 1784, 1817, 1816,
     6775, 1767, 1415, 1429, 1431, 3220, 1432, 1428, 1442, 3282,

     1444, 6775, 1750, 6775, 1753, 1751,    0, 1749,    0,    0,
     1738, 1728, 1738, 1717, 1727, 1707, 1702, 1710, 1691, 1681,
     1665,    0,    0, 1661, 1651, 1696, 6775, 1663,  807, 1452,
     1341, 1453, 1454, 3344, 1465, 1469, 1471, 1475, 3406, 1491,
     6775, 3468, 1493, 1359, 1494, 1509, 3532, 1511, 1515, 1519,
     1527, 1531, 3596, 1533, 1537, 1551, 1553, 3660, 1555, 1477,
     3726, 1529, 1544, 3792, 1577, 1571, 1578, 3854, 1457, 3916,
     1665,    0, 1638, 1630,    0, 1611,    0, 1623, 1618, 1663,
     6775, 1349, 1600, 1582, 6775, 6775, 1557, 1564, 1545, 1540,
     1530, 6775, 1531, 1518, 1518, 1492,    0, 1498,    0, 1479,

     1494, 1467, 1474, 1589, 1591, 3978, 1593, 1595, 1599, 1603,
     4042, 1615, 1617, 1618, 4106, 1635, 1639, 1643, 4170, 1651,
     1655, 4234, 1657, 1663, 4298, 1664, 1677, 1679, 4362, 1680,
     1695, 1697, 4426, 1606, 1640, 4492, 1653, 1703, 1704, 1717,
     4554, 1719, 1467, 1552, 4616, 1572, 1437, 1446,    0,    0,
        0,    0, 1730, 6775, 1437,    0, 1412, 1398, 6775, 1373,
     1349, 6775, 1333, 1288,    0, 1257, 1228, 1225, 1222, 1729,
     1737, 1741, 4678, 1743, 1745, 1756, 1483, 1762, 1763, 4742,
     1766, 1781, 1783, 1785, 1789, 4806, 1802, 1803, 1809, 1823,
     4870, 1825, 1827, 1829, 1845, 1847, 4934, 1849, 1851, 1863,

     1867, 1869, 4998, 1873, 1221, 1233,  978, 1220, 6775, 6775,
     1235, 6775, 1162, 1158, 1144, 1187, 1129, 1099, 1889, 1890,
     5062, 1891, 1900, 1910, 5126, 1911, 1115,    0,  875, 6775,
     1091, 1048, 1046, 1053, 1094,  989, 6775, 1913, 1917, 1929,
     1933, 5190, 1939, 1008,  400,  988, 6775,  964, 6775,  869,
      875,  839,  776, 1725, 6775, 6775,  741,  735,  732,    0,
     1980,  707,  668,  653, 1814, 1916,  621, 6775,  624, 1925,
     1964,  625,  618, 1971, 6775, 1986, 6775,  521,  520,  496,
      437,  411, 6775,  377,  325,  296, 6775, 6775, 5258, 5268,
     5278, 5283, 5288, 5298, 5308, 5313, 5318, 5328, 5338, 5345,

     5352, 5362, 5366, 5374, 5384, 5394, 5404, 5408, 5416, 5426,
     5436, 5446, 5456, 5466, 5476, 5486, 5496, 5506, 5516, 5526,
     5536, 5546, 5556, 5563, 5573, 5580, 5585, 5595, 5600, 5607,
     5617, 5627, 5637, 5647, 5657, 5664, 5674, 5684, 5694, 5704,
     5714, 5724, 5734, 5739, 5744, 5754, 5764, 5774, 5784, 5794,
     5804, 5814, 5824, 5834, 5844, 5849, 5859, 5869, 5879, 5889,
     5899, 5909, 5919, 5929, 5939, 5949, 5959, 5969, 5979, 5989,
     5999, 6009, 6019, 6029, 6039, 6049, 6059, 6064, 6074, 6084,
     6094, 6104, 6109, 6119, 6129, 6139, 6149, 6159, 6169, 6179,
     6189, 6199, 6209, 6219, 6229, 6239, 6249, 6259, 6269, 6279,

     6289, 6299, 6309, 6319, 6329, 6339, 6349, 6354, 6364, 6374,
     6384, 6394, 6399, 6409, 6419, 6429, 6439, 6449, 6459, 6469,
     6479, 6489, 6499, 6509, 6519, 6529, 6539, 6549, 6559, 6569,
     6579, 6589, 6599, 6609, 6614, 6624, 6634, 6644, 6654, 6664,
     6674, 6684, 6694, 6704, 6714, 6724, 6734, 6744, 6754, 6764
    } ;

static yyconst short int yy_def[1251] =
    {   0,
     1089, 1089, 1088,    3, 1088,    5, 1088,    7, 1088,    9,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1090, 1088, 1088, 1091, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1093, 1088, 1088,
     1088, 1094, 1088, 1088, 1088, 1095, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1096, 1096, 1088, 1088, 1088, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1097, 1097, 1097, 1097, 1088, 1088, 1088, 1088,
     1088, 1098, 1088, 1088, 1088, 1099, 1088, 1088, 1090, 1088,
     1100, 1088, 1091, 1101, 1088, 1088, 1102, 1102, 1088, 1088,
     1088, 1088, 1088, 1103, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1092, 1088, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1088, 1088, 1088, 1093, 1088, 1088, 1094, 1088, 1104, 1088,
     1088, 1088, 1088, 1105, 1088, 1088, 1106, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1107, 1088, 1107, 1088, 1088, 1088,
     1088, 1088, 1108, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1096, 1109, 1110, 1088, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1088, 1088, 1088, 1088, 1088, 1088, 1111, 1088, 1088,
     1088, 1097, 1097, 1097, 1097, 1098, 1088, 1099, 1088, 1088,
     1112, 1113, 1088, 1114, 1115, 1088, 1088, 1102, 1088, 1102,
     1088, 1088, 1088, 1102, 1088, 1088, 1088, 1103, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1088, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1088, 1088, 1116, 1117, 1118, 1105, 1088,
     1119, 1120, 1121, 1122, 1123, 1088, 1088, 1107, 1088, 1107,
     1088, 1088, 1088, 1107, 1088, 1088, 1088, 1108, 1088, 1088,
     1088, 1088, 1088, 1109, 1088, 1124, 1125, 1126, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1128, 1088, 1088, 1088, 1088, 1129, 1129, 1129, 1088,

     1112, 1112, 1112, 1113, 1113, 1113, 1114, 1114, 1115, 1115,
     1088, 1102, 1088, 1088, 1088, 1102, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1088, 1092, 1088, 1088,
     1116, 1088, 1130, 1117, 1117, 1131, 1118, 1118, 1132, 1088,
     1119, 1121, 1133, 1134, 1135, 1088, 1136, 1137, 1137, 1138,
     1138, 1088, 1139, 1088, 1088, 1088, 1139, 1088, 1088, 1088,
     1088, 1088, 1088, 1140, 1141, 1088, 1142, 1143, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1088, 1088, 1088, 1145, 1145, 1145, 1146, 1147, 1148, 1147,
     1147, 1147, 1149, 1150, 1149, 1150, 1150, 1150, 1151, 1152,
     1151, 1151, 1153, 1154, 1153, 1154, 1154, 1155, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1156, 1088, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1088, 1088, 1088, 1157, 1158, 1159, 1160, 1161, 1160, 1160,
     1162, 1163, 1164, 1165, 1163, 1165, 1166, 1165, 1088, 1167,
     1167, 1168, 1168, 1169, 1170, 1169, 1169, 1171, 1172, 1171,
     1172, 1172, 1173, 1088, 1088, 1088, 1088, 1088, 1174, 1174,
     1174, 1175, 1175, 1175, 1176, 1176, 1177, 1177, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1088, 1179, 1088, 1180, 1088, 1181, 1181, 1181,
     1182, 1182, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1183, 1183, 1088, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1183,
     1088, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1088, 1088,
     1088, 1184, 1184, 1184, 1185, 1185, 1185, 1186, 1187, 1188,
     1189, 1190, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1195,
     1195, 1197, 1198, 1197, 1198, 1198, 1199, 1199, 1088, 1088,
     1200, 1201, 1200, 1200, 1200, 1202, 1203, 1202, 1203, 1203,
     1203, 1204, 1205, 1204, 1204, 1206, 1207, 1206, 1207, 1207,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1210,
     1088, 1088, 1211, 1211, 1211, 1211, 1211, 1212, 1212, 1212,

     1212, 1088, 1088, 1088, 1088, 1088, 1213, 1088, 1213, 1213,
     1213, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1213, 1213, 1213, 1213, 1213, 1213, 1088, 1088, 1088, 1214,
     1215, 1214, 1214, 1214, 1216, 1217, 1216, 1217, 1217, 1217,
     1088, 1218, 1219, 1220, 1221, 1219, 1222, 1223, 1224, 1225,
     1225, 1225, 1226, 1225, 1227, 1228, 1227, 1229, 1230, 1231,
     1231, 1232, 1232, 1232, 1232, 1233, 1233, 1233, 1234, 1234,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236,
     1088, 1236, 1088, 1088, 1088, 1088, 1213, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1213, 1213, 1213, 1088,

     1088, 1088, 1088, 1216, 1216, 1216, 1221, 1230, 1221, 1221,
     1237, 1219, 1238, 1219, 1239, 1224, 1223, 1223, 1240, 1224,
     1225, 1226, 1228, 1228, 1241, 1227, 1242, 1224, 1243, 1227,
     1230, 1230, 1244, 1231, 1231, 1231, 1231, 1233, 1233, 1233,
     1233, 1233, 1234, 1234, 1234, 1234, 1235, 1235, 1235, 1235,
     1235, 1235, 1236, 1088, 1088, 1213, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1213, 1088, 1088, 1088, 1088, 1216,
     1216, 1216, 1216, 1216, 1221, 1221, 1245, 1221, 1221, 1237,
     1246, 1223, 1223, 1246, 1223, 1240, 1223, 1224, 1228, 1224,
     1247, 1223, 1228, 1228, 1228, 1228, 1241, 1246, 1230, 1230,

     1246, 1230, 1244, 1230, 1235, 1235, 1236, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1246, 1246,
     1248, 1224, 1249, 1224, 1250, 1224, 1235, 1235, 1236, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1246, 1246, 1246,
     1246, 1248, 1246, 1235, 1236, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1235, 1236, 1088, 1088, 1088, 1088, 1088, 1235,
     1236, 1088, 1088, 1088, 1236, 1236, 1088, 1088, 1088, 1236,
     1236, 1088, 1088, 1236, 1088, 1236, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,    0, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088
    } ;

static yyconst short int yy_nxt[6850] =
    {   0,
     1088,   13,   14,   13,   13,   17,   14,   13,   17,   15,
     1088,   18,   53,   15,  108,   53,  223,  108,   54,   16,
      109,  224, 1088,   16,   19,   20,   14,   20,   20,   21,
       22,   19,   19,   23,   24,   25,   19,   19,   19,   26,
       19,   27,   28,   29,   30,   31,   31,   19,   19,   32,
       33,   34,   19,   35,   36,   36,   36,   36,   36,   37,
       36,   36,   36,   36,   19,   19,   19,   19,   36,   38,
       36,   39,   40,   41,   36,   42,   36,   43,   36,   36,
       44,   45,   46,   47,   36,   48,   49,   36,   36,   36,
       50,   36,   36,   36,   51,   52,   19,   19,   55,   56,

       14,   56,   56,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   55,   55,
       55,   55,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   55,   55,
       55,   55,   59,   60,   14,   60,   60,   61,   62,   59,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   76,   77,   78,   79,   80,   81,

       82,   59,   83,   83,   83,   83,   83,   83,   84,   83,
       83,   83,   85,   59,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   83,   96,   83,   97,   83,   83,
       83,   83,   83,   98,   99,  100,  101,  102,  103,   83,
       83,   83,  104,  105,  106,  107,  110,  111,   14,  111,
      111,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  112,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  110,  110,  110,  110,
      113,  113,  113,  113,  113,  114,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  115,  116,
      113,  113,  113,  113,  113,  113,  110,  110,  117,  110,
      118,  130,  120,  118,  120,  120,  119,  123,  125,  120,
      123,  125,  120,  124,  120,  120,  137,  137,  137,  163,
      165,  148,  160,  164,  166,  217,  218,  126,  126,  126,
      149,  171,  161,  152,  153,  154,  131,  155,  156,  138,
      168,  145,  145,  145,  172,  176,  201,  169, 1087,  181,
      173,  157,  170,  141, 1086,  202,  203,  146,  192,  147,
      182,  177,  127,  138,  188,  139,  139,  140,  199,  123,
      141,  120,  123,  122,  193,  124,  146,  141,  195,  200,

      206,  142,  881,  143,  144,  147,  125,  196,  120,  125,
      120,  120,  232,  185,  141,  185,  185,  220,  221,  189,
      142,  233,  252,  229, 1085,  126,  126,  126,  273,  143,
      230,  204,  144,  205,  205,  205,  231,  197,  234,  207,
      235,  214,  214,  214,  237,  240,  120,  238,  120,  120,
      236, 1054,  241,  210,  130,  244,  245,  215,  134,  216,
      127,  207,  417,  208,  208,  209,  246,  253, 1084,  247,
      210,  255,  287,  185,  255,  210,  215,  256,  291,  211,
      257,  212,  213,  257,  123,  216,  120,  123,  417,  131,
      124,  287,  210,  125,  271,  271,  125,  291,  211,  258,

      258,  258,  120,  125,  120,  120,  125,  212,  125, 1083,
      213,  125,  126,  126,  126,  123,  347,  120,  123,  274,
      274,  124,  126,  126,  126,  293,  188,  126,  126,  126,
      294,  285,  259,  286,  260,  347,  295,  289,  261,  290,
      296,  272,  278,  278,  278, 1082,  311,  127,  312,  355,
      285,  278,  278,  278,  279,  280,  289,  127,  280,  286,
      351,  189,  127,  279,  280,  290,  275,  280,  283, 1081,
      283,  279,  280,  284,  284,  284, 1080,  280,  305,  351,
      279,  280,  415,  306,  356,  138,  280,  139,  139,  140,
      138,  195,  140,  140,  140,  185,  383,  185,  185,  141,

      330,  415,  273,  281,  141,  282,  138,  421,  145,  145,
      145,  207,  384,  209,  209,  209,  141,  378,  594,  375,
      141,  141,  281,  381,  146,  210,  147,  376,  595,  379,
      331,  282,  408,  421,  338,  338,  338,  141,  345,  387,
      346,  382,  210,  146,  273,  488,  339,  340,  388,  343,
      340,  343,  147,  187,  344,  344,  344,  345,  187,  418,
      338,  338,  338,  339,  340, 1079,  346,  327,  327,  340,
     1078,  488,  339,  340,  410,  187,  340,  349,  418,  350,
      207, 1073,  208,  208,  209,  389, 1072,  390,  187,  339,
      340,  453,  187,  187,  210,  340,  349,  187,  341,  359,

      342,  360, 1069,  454,  187,  350,  455,  361,  187,  456,
      187,  210,  187,  417,  328,  333,  255,  341,  185,  255,
      333,  207,  256,  214,  214,  214,  342,  496,  257,  334,
      334,  257,  417,  402,  422,  210,  462,  333,  129,  215,
     1068,  216,  257,  506,  507,  257,  405,  258,  258,  258,
      333,  129,  210,  422,  333,  333,  584,  358,  215,  333,
     1067,  258,  258,  258,  585,  492,  333,  216,  403,  421,
      333,  463,  333,  413,  333,  414,  335,  278,  278,  278,
      259,  406,  260,  284,  284,  284,  261, 1064,  421,  279,
      280,  492,  413,  280,  259,  442,  260,  411, 1063,  411,

      261,  414,  412,  412,  412, 1062,  279,  280,  416,  416,
      416,  419,  280,  420,  465,  486,  443,  468,  195,  187,
     1060,  280,  187,  195,  280,  559,  195,  470,  489,  488,
      419,  195,  330,  444,  486,  330,  355,  445,  280,  420,
      330,  493,  492,  280,  484,  462,  485,  489,  488,  466,
      446,  559,  469,  344,  344,  344,  902,  331,  447,  329,
      493,  492,  477,  484,  472,  479,  338,  338,  338,  903,
      481,  356,  485,  473,  473,  494,  494,  881,  339,  340,
      463,  329,  340,  482, 1059,  482,  497,  497,  483,  483,
      483,  487,  487,  487,  329,  339,  340,  273,  329,  329,

      490,  340,  491,  329,  340,  273,  402,  340,  402,  496,
      329,  129,  405,  129,  329,  560,  329,  129,  329,  490,
      474,  340,  495,  559, 1058,  405,  340,  408,  491, 1057,
      129,  563, 1045,  498,  560,  410,  412,  412,  412,  646,
      465,  403,  559,  403,  538,  187,  561,  406,  562,  539,
      563,  558,  558,  558,  195,  416,  416,  416,  540,  540,
      406,  586,  587,  330,  280,  561,  541,  280,  280,  604,
      604,  280,  465,  588,  562,  466,  634,  187,  496,  542,
      881,  280,  468,  541,  541,  280,  280,  187,  541,  468,
      280,  195,  273,  477,  187,  541,  635,  334,  334,  541,

      470,  541,  634,  541,  195,  543,  544,  466,  648,  195,
      195,  539,  634,  470,  638,  635,  605,  469,  330,  330,
      545,  545,  408, 1029,  469,  483,  483,  483,  546,  130,
      621,  634, 1056,  638,  636,  640,  637,  643, 1055,  273,
      354,  547,  354,  623,  335,  546,  546,  684,  479,  481,
      546,  402, 1053,  636, 1052,  273,  129,  546,  633,  633,
      633,  546,  637,  546,  131,  546,  684,  548,  549,  134,
      641,  340,  644,  550,  340,  402,  487,  487,  487,  402,
      129,  683,  551,  551,  129,  408,  403,  273,  340,  340,
      549,  679,  340,  340,  273,  683,  129,  405,  273,  679,

      683,  273,  129,  552,  129, 1049,  340,  549,  549, 1048,
      403,  340,  549,  405,  403,  405, 1047,  682,  129,  549,
      129,  683,  188,  549,  410,  549,  680,  549,  682,  553,
      554,  410,  406,  749,  680,  550,  703,  704,  558,  558,
      558,  723,  726, 1050,  555,  555,  461,  461,  406, 1046,
      406,  280,  554,  729,  280,  465, 1051,  189,  730,  749,
      187,  465,  465,  195, 1044,  556,  187,  187,  280,  554,
      554, 1037,  470,  280,  554,  733,  724,  727,  736,  468,
      187,  554, 1036,  730,  187,  554,  750,  554,  731,  554,
      466,  557,  464,  733,  607,  468,  466,  466,  187,  608,

      187,  468,  621,  195, 1035,  750,  187, 1034,  609,  609,
      734,  195,  470,  737,  469,  195,  610,  496,  195, 1033,
      330,  749,  195,  195,  330, 1032,  195,  330,  734,  611,
      469,  330,  330,  610,  610,  330,  469,  195,  610,  640,
      749,  496,  623,  640,  354,  610,  330,  646,  354,  610,
      479,  610, 1031,  610,  477,  612,  467,  479,  614,  643,
      273,  748,  481,  608,  354,  748,  633,  633,  633, 1030,
      643,  648,  615,  615,  641,  354,  481, 1028,  641,  340,
      616,  679,  340,  679, 1027, 1018,  129,  723,  129, 1017,
      682, 1016,  461,  617,  644,  723,  340,  616,  616,  726,

      461,  340,  616,  496,  461,  644,  726,  729,  841,  616,
     1015,  461,  730,  616,  355,  616,  680,  616,  680,  618,
      195,  465,  724,  733,  624,  496,  187,  733,  187,  625,
      724,  736,  187,  646,  727,  468,  730, 1014,  626,  626,
      187,  727,  731,  842,  496,  195,  624,  462,  195,  356,
      953,  881,  195,  953,  470,  358,  466,  330,  734,  627,
      195,  470,  734,  624,  624,  841,  737,  195,  624,  470,
      469,  195,  640,  640,  646,  624,  470,  354,  354,  624,
      470,  624,  463,  624,  621,  628,  195,  477,  195,  195,
      629,  621,  496,  496, 1013,  625,  640,  470,  330,  861,

      842,  354,  496,  496,  630,  630,  623,  641,  641,  867,
      861,  643,  629,  867,  354,  643,  354, 1012,  354,  643,
      354,  679,  870,  648,  354,  631,  129,  623,  748,  629,
      629,  641,  870,  648,  629,  679, 1011,  679,  679,  273,
      129,  629,  129,  129,  868,  629,  644,  629,  868,  629,
      644,  632,  538,  273,  644,  273,  680,  539,  723,  723,
      723, 1010, 1009,  461,  461,  461,  540,  540,  496,  682,
      680,  905,  680,  680,  541,  726,  461,  905,  496,  195,
      461,  726,  461,  682, 1008,  682,  461,  542,  470,  841,
     1006,  541,  541,  724,  724,  724,  541,  726,  870,  729,

      910, 1005,  461,  541,  730,  730,  906,  541,  870,  541,
      727,  541,  906,  543,  544,  729,  727,  918,  861,  539,
      730,  921,  730,  969,  842,  733,  730,  968,  545,  545,
      187,  195,  727,  733,  731,  911,  546,  733,  187,  733,
      330,  967,  187,  736,  187,  966,  195,  965,  730,  547,
      731,  964,  919,  546,  546,  330,  922,  924,  546,  736,
      734,  932,  730,  496,  730,  546,  730,  963,  734,  546,
      748,  546,  734,  546,  734,  548,  549,  867,  737,  195,
      962,  550,  354,  496,  867,  748,  961,  960,  330,  354,
      551,  551,  925,  870,  737,  905,  933,  905,  549,  910,

      461,  932,  461,  959,  730,  910,  730,  958,  195,  910,
      730,  552,  868,  870,  730,  549,  549,  470,  748,  868,
      549,  729,  957,  465,  729,  956,  730,  549,  187,  730,
      906,  549,  906,  549,  911,  549,  933,  553,  554,  955,
      911,  921,  195,  550,  911,  918,  730,  861,  954,  918,
      730,  470,  555,  555,  730,  195,  731,  921,  466,  731,
      554,  733,  730,  924,  470,  881,  187,  952,  730,  924,
      736,  951,  950,  556,  730,  730,  922,  554,  554,  949,
      919,  861,  554,  468,  919,  921,  736,  948,  187,  554,
      730,  730,  922,  554,  861,  554,  734,  554,  925,  557,

      464,  932,  607,  932,  925,  737,  730,  608,  730,  867,
      867,  947,  901,  900,  354,  354,  609,  609,  469,  899,
      922,  737,  898,  867,  610,  867, 1061,  881,  354, 1061,
      354,  953,  881,  897,  953,  905,  933,  611,  933,  896,
      461,  610,  610,  905,  868,  868,  610,  905,  461,  905,
      895,  910,  461,  610,  461,  894,  730,  610,  868,  610,
      868,  610,  910,  612,  467,  893,  614,  730,  910,  910,
      906,  608, 1020,  730,  730,  892,  891,  730,  906,  890,
      615,  615,  906,  889,  906, 1007,  911,  918,  616,  918,
      888, 1020,  730,  887,  730,  918,  730,  911,  886,  885,

      730,  617,  884,  911,  911,  616,  616, 1021,  918,  921,
      616,  883,  882,  730,  730,  924,  881,  616,  791,  881,
      730,  616,  919,  616,  919,  616, 1021,  618,  195,  921,
      919,  918,  738,  924,  730,  924,  730,  739,  730,  879,
      730,  878,  877,  919,  922, 1070,  740,  740,  876,  875,
      925,  924,  874,  924,  738, 1020,  730,  932,  730,  873,
      730, 1070,  730,  872,  922,  871,  919,  741,  925,  932,
      925,  738,  738, 1020,  730,  932,  738,  829,  730,  932,
      730,  828,  827,  738,  730,  826,  925,  738,  925,  738,
     1021,  738,  933,  742,  195, 1020, 1020,  921,  743,  825,

      730,  730,  730,  739,  933,  824,  733,  823, 1021,  822,
      933,  187,  744,  744,  933,  821,  921,  921,  881, 1020,
      743,  730,  730, 1020,  730,  820, 1074, 1075,  730, 1074,
     1021, 1021,  922,  745,  819, 1020,  818,  743,  743, 1020,
      730,  734,  743,  817,  730, 1020,  816, 1071,  815,  743,
      730,  922,  922,  743, 1021,  743,  814,  743, 1021,  746,
      195,  813,  812, 1071,  624, 1076, 1077,  811, 1076,  625,
     1021,  810, 1074, 1075, 1021, 1074,  809,  808,  626,  626,
     1021, 1061,  881,  807, 1061,  806,  624, 1076, 1077,  805,
     1076,  804,  803,  802,  677, 1065,  792, 1066,  791,  627,

      789,  788,  787,  624,  624,  786,  785,  784,  624,  783,
      782,  781,  780,  779,  778,  624,  777,  776,  775,  624,
      774,  624,  773,  624,  772,  628,  195,  771,  721,  720,
      629,  719,  718,  717,  716,  625,  715,  714,  713,  712,
      711,  710,  709,  708,  630,  630,  707,  706,  705,  702,
      701,  700,  629,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  631,  687,  686,  685,  629,
      629,  677,  675,  674,  629,  673,  672,  671,  670,  669,
      668,  629,  667,  666,  665,  629,  664,  629,  663,  629,
      662,  632,  751,  661,  660,  659,  658,  752,  657,  656,

      655,  654,  653,  652,  651,  650,  753,  753,  649,  476,
      619,  603,  602,  601,  754,  600,  599,  598,  597,  596,
      593,  592,  591,  590,  589,  583,  582,  755,  581,  580,
      579,  754,  754,  578,  577,  576,  754,  575,  574,  573,
      572,  571,  570,  754,  569,  568,  567,  754,  566,  754,
      565,  754,  564,  756,  757,  537,  536,  535,  534,  752,
      533,  532,  531,  393,  530,  529,  528,  527,  758,  758,
      526,  525,  524,  523,  522,  521,  759,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  760,
      508,  505,  504,  759,  759,  503,  502,  501,  759,  500,

      499,  476,  460,  459,  458,  759,  457,  452,  451,  759,
      450,  759,  449,  759,  448,  761,  762,  441,  440,  439,
      438,  763,  437,  436,  435,  434,  433,  432,  431,  430,
      764,  764,  429,  428,  427,  426,  425,  424,  762,  423,
      400,  269,  267,  399,  398,  397,  396,  395,  394,  393,
      391,  765,  386,  385,  380,  762,  762,  377,  374,  373,
      762,  372,  371,  370,  369,  368,  367,  762,  366,  365,
      364,  762,  363,  762,  362,  762,  358,  766,  767,  353,
      352,  336,  325,  763,  324,  323,  322,  321,  320,  319,
      318,  317,  768,  768,  316,  315,  314,  313,  310,  309,

      767,  308,  307,  304,  303,  302,  301,  300,  299,  298,
      297,  292,  276,  769,  270,  269,  267,  767,  767,  265,
      264,  263,  767,  122,  254,  251,  250,  249,  248,  767,
      243,  242,  239,  767,  228,  767,  227,  767,  226,  770,
      793,  225,  219,  198,  191,  539,  190,  186,  122,  183,
      180,  179,  178,  175,  794,  794,  174,  167,  162,  159,
      151,  150,  795,  122,  136,  135,  134,  132,  121,  128,
      122,  121, 1088, 1088, 1088,  796, 1088, 1088, 1088,  795,
      795, 1088, 1088, 1088,  795, 1088, 1088, 1088, 1088, 1088,
     1088,  795, 1088, 1088, 1088,  795, 1088,  795, 1088,  795,

     1088,  797,  798, 1088, 1088, 1088, 1088,  550, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  799,  799, 1088, 1088,
     1088, 1088, 1088, 1088,  798, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  800, 1088, 1088,
     1088,  798,  798, 1088, 1088, 1088,  798, 1088, 1088, 1088,
     1088, 1088, 1088,  798, 1088, 1088, 1088,  798, 1088,  798,
     1088,  798, 1088,  801,  830, 1088, 1088, 1088, 1088,  831,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  832,  832,
     1088, 1088, 1088, 1088, 1088, 1088,  833, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  834,

     1088, 1088, 1088,  833,  833, 1088, 1088, 1088,  833, 1088,
     1088, 1088, 1088, 1088, 1088,  833, 1088, 1088, 1088,  833,
     1088,  833, 1088,  833, 1088,  835,  836, 1088, 1088, 1088,
     1088,  831, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
      837,  837, 1088, 1088, 1088, 1088, 1088, 1088,  838, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088,  839, 1088, 1088, 1088,  838,  838, 1088, 1088, 1088,
      838, 1088, 1088, 1088, 1088, 1088, 1088,  838, 1088, 1088,
     1088,  838, 1088,  838, 1088,  838, 1088,  840,  464, 1088,
      843, 1088, 1088, 1088, 1088,  844, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088,  845,  845, 1088, 1088, 1088, 1088,
     1088, 1088,  846, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  847, 1088, 1088, 1088,  846,
      846, 1088, 1088, 1088,  846, 1088, 1088, 1088, 1088, 1088,
     1088,  846, 1088, 1088, 1088,  846, 1088,  846, 1088,  846,
     1088,  848,  732, 1088,  850, 1088, 1088, 1088, 1088,  608,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  851,  851,
     1088, 1088, 1088, 1088, 1088, 1088,  852, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  853,
     1088, 1088, 1088,  852,  852, 1088, 1088, 1088,  852, 1088,

     1088, 1088, 1088, 1088, 1088,  852, 1088, 1088, 1088,  852,
     1088,  852, 1088,  852, 1088,  854,  467, 1088,  855, 1088,
     1088, 1088, 1088,  844, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  856,  856, 1088, 1088, 1088, 1088, 1088, 1088,
      857, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  858, 1088, 1088, 1088,  857,  857, 1088,
     1088, 1088,  857, 1088, 1088, 1088, 1088, 1088, 1088,  857,
     1088, 1088, 1088,  857, 1088,  857, 1088,  857, 1088,  859,
      195, 1088, 1088, 1088,  738, 1088, 1088, 1088, 1088,  739,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  740,  740,

     1088, 1088, 1088, 1088, 1088, 1088,  738, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  741,
     1088, 1088, 1088,  738,  738, 1088, 1088, 1088,  738, 1088,
     1088, 1088, 1088, 1088, 1088,  738, 1088, 1088, 1088,  738,
     1088,  738, 1088,  738, 1088,  742,  195, 1088, 1088, 1088,
      743, 1088, 1088, 1088, 1088,  739, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  744,  744, 1088, 1088, 1088, 1088,
     1088, 1088,  743, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  745, 1088, 1088, 1088,  743,
      743, 1088, 1088, 1088,  743, 1088, 1088, 1088, 1088, 1088,

     1088,  743, 1088, 1088, 1088,  743, 1088,  743, 1088,  743,
     1088,  746,  195, 1088, 1088, 1088,  862, 1088, 1088, 1088,
     1088,  625, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
      863,  863, 1088, 1088, 1088, 1088, 1088, 1088,  862, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088,  864, 1088, 1088, 1088,  862,  862, 1088, 1088, 1088,
      862, 1088, 1088, 1088, 1088, 1088, 1088,  862, 1088, 1088,
     1088,  862, 1088,  862, 1088,  862, 1088,  865,  751, 1088,
     1088, 1088, 1088,  752, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  753,  753, 1088, 1088, 1088, 1088, 1088, 1088,

      754, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  755, 1088, 1088, 1088,  754,  754, 1088,
     1088, 1088,  754, 1088, 1088, 1088, 1088, 1088, 1088,  754,
     1088, 1088, 1088,  754, 1088,  754, 1088,  754, 1088,  756,
      757, 1088, 1088, 1088, 1088,  752, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  758,  758, 1088, 1088, 1088, 1088,
     1088, 1088,  759, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  760, 1088, 1088, 1088,  759,
      759, 1088, 1088, 1088,  759, 1088, 1088, 1088, 1088, 1088,
     1088,  759, 1088, 1088, 1088,  759, 1088,  759, 1088,  759,

     1088,  761,  762, 1088, 1088, 1088, 1088,  763, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  764,  764, 1088, 1088,
     1088, 1088, 1088, 1088,  762, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  765, 1088, 1088,
     1088,  762,  762, 1088, 1088, 1088,  762, 1088, 1088, 1088,
     1088, 1088, 1088,  762, 1088, 1088, 1088,  762, 1088,  762,
     1088,  762, 1088,  766,  767, 1088, 1088, 1088, 1088,  763,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  768,  768,
     1088, 1088, 1088, 1088, 1088, 1088,  767, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  769,

     1088, 1088, 1088,  767,  767, 1088, 1088, 1088,  767, 1088,
     1088, 1088, 1088, 1088, 1088,  767, 1088, 1088, 1088,  767,
     1088,  767, 1088,  767, 1088,  770,  793, 1088, 1088, 1088,
     1088,  539, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
      794,  794, 1088, 1088, 1088, 1088, 1088, 1088,  795, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088,  796, 1088, 1088, 1088,  795,  795, 1088, 1088, 1088,
      795, 1088, 1088, 1088, 1088, 1088, 1088,  795, 1088, 1088,
     1088,  795, 1088,  795, 1088,  795, 1088,  797,  798, 1088,
     1088, 1088, 1088,  550, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088,  799,  799, 1088, 1088, 1088, 1088, 1088, 1088,
      798, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  800, 1088, 1088, 1088,  798,  798, 1088,
     1088, 1088,  798, 1088, 1088, 1088, 1088, 1088, 1088,  798,
     1088, 1088, 1088,  798, 1088,  798, 1088,  798, 1088,  801,
      830, 1088, 1088, 1088, 1088,  831, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  832,  832, 1088, 1088, 1088, 1088,
     1088, 1088,  833, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  834, 1088, 1088, 1088,  833,
      833, 1088, 1088, 1088,  833, 1088, 1088, 1088, 1088, 1088,

     1088,  833, 1088, 1088, 1088,  833, 1088,  833, 1088,  833,
     1088,  835,  836, 1088, 1088, 1088, 1088,  831, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  837,  837, 1088, 1088,
     1088, 1088, 1088, 1088,  838, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  839, 1088, 1088,
     1088,  838,  838, 1088, 1088, 1088,  838, 1088, 1088, 1088,
     1088, 1088, 1088,  838, 1088, 1088, 1088,  838, 1088,  838,
     1088,  838, 1088,  840,  730, 1088, 1088, 1088, 1088,  730,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  907,  907,
     1088, 1088, 1088, 1088, 1088, 1088,  730, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  730,
     1088, 1088, 1088,  730,  730, 1088, 1088, 1088,  730, 1088,
     1088, 1088, 1088, 1088, 1088,  730, 1088, 1088, 1088,  730,
     1088,  730, 1088,  730, 1088,  908,  728, 1088,  913, 1088,
     1088, 1088, 1088,  844, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  914,  914, 1088, 1088, 1088, 1088, 1088, 1088,
      846, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  915, 1088, 1088, 1088,  846,  846, 1088,
     1088, 1088,  846, 1088, 1088, 1088, 1088, 1088, 1088,  846,
     1088, 1088, 1088,  846, 1088,  846, 1088,  846, 1088,  916,

      732, 1088,  850, 1088, 1088, 1088, 1088,  608, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  851,  851, 1088, 1088,
     1088, 1088, 1088, 1088,  852, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  853, 1088, 1088,
     1088,  852,  852, 1088, 1088, 1088,  852, 1088, 1088, 1088,
     1088, 1088, 1088,  852, 1088, 1088, 1088,  852, 1088,  852,
     1088,  852, 1088,  854,  735, 1088,  927, 1088, 1088, 1088,
     1088,  844, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
      928,  928, 1088, 1088, 1088, 1088, 1088, 1088,  857, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088,  929, 1088, 1088, 1088,  857,  857, 1088, 1088, 1088,
      857, 1088, 1088, 1088, 1088, 1088, 1088,  857, 1088, 1088,
     1088,  857, 1088,  857, 1088,  857, 1088,  930,  195, 1088,
     1088, 1088,  934, 1088, 1088, 1088, 1088,  739, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  935,  935, 1088, 1088,
     1088, 1088, 1088, 1088,  934, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  936, 1088, 1088,
     1088,  934,  934, 1088, 1088, 1088,  934, 1088, 1088, 1088,
     1088, 1088, 1088,  934, 1088, 1088, 1088,  934, 1088,  934,
     1088,  934, 1088,  937,  195, 1088, 1088, 1088,  862, 1088,

     1088, 1088, 1088,  625, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  863,  863, 1088, 1088, 1088, 1088, 1088, 1088,
      862, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  864, 1088, 1088, 1088,  862,  862, 1088,
     1088, 1088,  862, 1088, 1088, 1088, 1088, 1088, 1088,  862,
     1088, 1088, 1088,  862, 1088,  862, 1088,  862, 1088,  865,
      938, 1088, 1088, 1088, 1088,  752, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  939,  939, 1088, 1088, 1088, 1088,
     1088, 1088,  940, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  941, 1088, 1088, 1088,  940,

      940, 1088, 1088, 1088,  940, 1088, 1088, 1088, 1088, 1088,
     1088,  940, 1088, 1088, 1088,  940, 1088,  940, 1088,  940,
     1088,  942,  943, 1088, 1088, 1088, 1088,  763, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  944,  944, 1088, 1088,
     1088, 1088, 1088, 1088,  943, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  945, 1088, 1088,
     1088,  943,  943, 1088, 1088, 1088,  943, 1088, 1088, 1088,
     1088, 1088, 1088,  943, 1088, 1088, 1088,  943, 1088,  943,
     1088,  943, 1088,  946,  970, 1088, 1088, 1088, 1088,  831,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  971,  971,

     1088, 1088, 1088, 1088, 1088, 1088,  972, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  973,
     1088, 1088, 1088,  972,  972, 1088, 1088, 1088,  972, 1088,
     1088, 1088, 1088, 1088, 1088,  972, 1088, 1088, 1088,  972,
     1088,  972, 1088,  972, 1088,  974,  909, 1088,  976, 1088,
     1088, 1088, 1088,  977, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  978,  978, 1088, 1088, 1088, 1088, 1088, 1088,
      979, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  980, 1088, 1088, 1088,  979,  979, 1088,
     1088, 1088,  979, 1088, 1088, 1088, 1088, 1088, 1088,  979,

     1088, 1088, 1088,  979, 1088,  979, 1088,  979, 1088,  981,
      464, 1088,  843, 1088, 1088, 1088, 1088,  844, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  845,  845, 1088, 1088,
     1088, 1088, 1088, 1088,  846, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  847, 1088, 1088,
     1088,  846,  846, 1088, 1088, 1088,  846, 1088, 1088, 1088,
     1088, 1088, 1088,  846, 1088, 1088, 1088,  846, 1088,  846,
     1088,  846, 1088,  848,  917, 1088,  983, 1088, 1088, 1088,
     1088,  977, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
      984,  984, 1088, 1088, 1088, 1088, 1088, 1088,  985, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088,  986, 1088, 1088, 1088,  985,  985, 1088, 1088, 1088,
      985, 1088, 1088, 1088, 1088, 1088, 1088,  985, 1088, 1088,
     1088,  985, 1088,  985, 1088,  985, 1088,  987,  732, 1088,
      988, 1088, 1088, 1088, 1088,  844, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  989,  989, 1088, 1088, 1088, 1088,
     1088, 1088,  990, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  991, 1088, 1088, 1088,  990,
      990, 1088, 1088, 1088,  990, 1088, 1088, 1088, 1088, 1088,
     1088,  990, 1088, 1088, 1088,  990, 1088,  990, 1088,  990,

     1088,  992,  923, 1088,  994, 1088, 1088, 1088, 1088,  977,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  995,  995,
     1088, 1088, 1088, 1088, 1088, 1088,  996, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  997,
     1088, 1088, 1088,  996,  996, 1088, 1088, 1088,  996, 1088,
     1088, 1088, 1088, 1088, 1088,  996, 1088, 1088, 1088,  996,
     1088,  996, 1088,  996, 1088,  998,  467, 1088,  855, 1088,
     1088, 1088, 1088,  844, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  856,  856, 1088, 1088, 1088, 1088, 1088, 1088,
      857, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088,  858, 1088, 1088, 1088,  857,  857, 1088,
     1088, 1088,  857, 1088, 1088, 1088, 1088, 1088, 1088,  857,
     1088, 1088, 1088,  857, 1088,  857, 1088,  857, 1088,  859,
      931, 1088, 1000, 1088, 1088, 1088, 1088,  977, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1001, 1001, 1088, 1088,
     1088, 1088, 1088, 1088, 1002, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1003, 1088, 1088,
     1088, 1002, 1002, 1088, 1088, 1088, 1002, 1088, 1088, 1088,
     1088, 1088, 1088, 1002, 1088, 1088, 1088, 1002, 1088, 1002,
     1088, 1002, 1088, 1004,  195, 1088, 1088, 1088,  934, 1088,

     1088, 1088, 1088,  739, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  935,  935, 1088, 1088, 1088, 1088, 1088, 1088,
      934, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  936, 1088, 1088, 1088,  934,  934, 1088,
     1088, 1088,  934, 1088, 1088, 1088, 1088, 1088, 1088,  934,
     1088, 1088, 1088,  934, 1088,  934, 1088,  934, 1088,  937,
      938, 1088, 1088, 1088, 1088,  752, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  939,  939, 1088, 1088, 1088, 1088,
     1088, 1088,  940, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  941, 1088, 1088, 1088,  940,

      940, 1088, 1088, 1088,  940, 1088, 1088, 1088, 1088, 1088,
     1088,  940, 1088, 1088, 1088,  940, 1088,  940, 1088,  940,
     1088,  942,  943, 1088, 1088, 1088, 1088,  763, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  944,  944, 1088, 1088,
     1088, 1088, 1088, 1088,  943, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  945, 1088, 1088,
     1088,  943,  943, 1088, 1088, 1088,  943, 1088, 1088, 1088,
     1088, 1088, 1088,  943, 1088, 1088, 1088,  943, 1088,  943,
     1088,  943, 1088,  946,  970, 1088, 1088, 1088, 1088,  831,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  971,  971,

     1088, 1088, 1088, 1088, 1088, 1088,  972, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,  973,
     1088, 1088, 1088,  972,  972, 1088, 1088, 1088,  972, 1088,
     1088, 1088, 1088, 1088, 1088,  972, 1088, 1088, 1088,  972,
     1088,  972, 1088,  972, 1088,  974,  909, 1088,  976, 1088,
     1088, 1088, 1088,  977, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  978,  978, 1088, 1088, 1088, 1088, 1088, 1088,
      979, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,  980, 1088, 1088, 1088,  979,  979, 1088,
     1088, 1088,  979, 1088, 1088, 1088, 1088, 1088, 1088,  979,

     1088, 1088, 1088,  979, 1088,  979, 1088,  979, 1088,  981,
      917, 1088,  983, 1088, 1088, 1088, 1088,  977, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  984,  984, 1088, 1088,
     1088, 1088, 1088, 1088,  985, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  986, 1088, 1088,
     1088,  985,  985, 1088, 1088, 1088,  985, 1088, 1088, 1088,
     1088, 1088, 1088,  985, 1088, 1088, 1088,  985, 1088,  985,
     1088,  985, 1088,  987,  920, 1088, 1023, 1088, 1088, 1088,
     1088,  844, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1024, 1024, 1088, 1088, 1088, 1088, 1088, 1088,  990, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1025, 1088, 1088, 1088,  990,  990, 1088, 1088, 1088,
      990, 1088, 1088, 1088, 1088, 1088, 1088,  990, 1088, 1088,
     1088,  990, 1088,  990, 1088,  990, 1088, 1026,  923, 1088,
      994, 1088, 1088, 1088, 1088,  977, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088,  995,  995, 1088, 1088, 1088, 1088,
     1088, 1088,  996, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  997, 1088, 1088, 1088,  996,
      996, 1088, 1088, 1088,  996, 1088, 1088, 1088, 1088, 1088,
     1088,  996, 1088, 1088, 1088,  996, 1088,  996, 1088,  996,

     1088,  998,  931, 1088, 1000, 1088, 1088, 1088, 1088,  977,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1001, 1001,
     1088, 1088, 1088, 1088, 1088, 1088, 1002, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1003,
     1088, 1088, 1088, 1002, 1002, 1088, 1088, 1088, 1002, 1088,
     1088, 1088, 1088, 1088, 1088, 1002, 1088, 1088, 1088, 1002,
     1088, 1002, 1088, 1002, 1088, 1004, 1019, 1088, 1039, 1088,
     1088, 1088, 1088,  977, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1040, 1040, 1088, 1088, 1088, 1088, 1088, 1088,
     1041, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1042, 1088, 1088, 1088, 1041, 1041, 1088,
     1088, 1088, 1041, 1088, 1088, 1088, 1088, 1088, 1088, 1041,
     1088, 1088, 1088, 1041, 1088, 1041, 1088, 1041, 1088, 1043,
      732, 1088,  988, 1088, 1088, 1088, 1088,  844, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088,  989,  989, 1088, 1088,
     1088, 1088, 1088, 1088,  990, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088,  991, 1088, 1088,
     1088,  990,  990, 1088, 1088, 1088,  990, 1088, 1088, 1088,
     1088, 1088, 1088,  990, 1088, 1088, 1088,  990, 1088,  990,
     1088,  990, 1088,  992, 1019, 1088, 1039, 1088, 1088, 1088,

     1088,  977, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1040, 1040, 1088, 1088, 1088, 1088, 1088, 1088, 1041, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1042, 1088, 1088, 1088, 1041, 1041, 1088, 1088, 1088,
     1041, 1088, 1088, 1088, 1088, 1088, 1088, 1041, 1088, 1088,
     1088, 1041, 1088, 1041, 1088, 1041, 1088, 1043,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  129, 1088,
      129,  129,  129,  129,  129,  129,  129,  129,  133, 1088,
      133,  133, 1088,  133,  133,  133,  133,  133,  158,  158,
      158,  158,  158,  184,  184,  184,  184,  184,  187, 1088,

      187,  187,  187,  187,  187,  187,  187,  187,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  222,  222,
      222,  222,  222,  262,  262,  262,  262,  262,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  129,  129,
     1088,  129, 1088, 1088,  129,  133,  133, 1088,  133, 1088,
     1088,  133,  277,  277,  277,  277,  277, 1088,  277,  277,
      277,  277,  288,  288,  326, 1088, 1088,  326,  326,  326,
      326,  326,  326,  326,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  332, 1088, 1088,  332,  332,  332,

      332,  332,  332,  332,  337,  337,  337,  337,  337, 1088,
      337,  337,  337,  337,  348,  348,  354, 1088,  354,  354,
      354,  354,  354,  354,  354,  354,  357, 1088,  357,  357,
     1088,  357,  357,  357,  357,  357,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  401, 1088,  401,  401,
      401,  401,  401,  401,  401,  401,  404, 1088,  404,  404,
      404,  404,  404,  404,  404,  404,  407, 1088,  407,  407,
      407,  407,  407,  407,  407,  407,  409, 1088,  409,  409,
      409,  409,  409,  409,  409,  409,  461, 1088,  461,  461,
      461,  461,  461,  461,  461,  461,  464, 1088,  464,  464,

      464,  464,  464,  464,  464,  464,  467, 1088,  467,  467,
      467,  467,  467,  467,  467,  467,  471, 1088,  471,  471,
      471,  471,  471,  471,  471,  471,  475, 1088,  475,  475,
      475,  475,  475,  475,  475,  475,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  354,  354, 1088,  354,
     1088, 1088,  354,  357, 1088,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357, 1088,  357, 1088, 1088,  357,
      222,  222,  222,  222,  222,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  262,  262,  262,  262,  262,
      461,  461, 1088,  461, 1088, 1088,  461,  606, 1088,  606,
      606,  606,  606,  606,  606,  606,  606,  613, 1088,  613,
      613,  613,  613,  613,  613,  613,  613,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  475, 1088,  475,
      475,  475,  475,  475,  475,  475,  475,  333,  333, 1088,
      333, 1088, 1088,  333,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  337,  337,  337,  337,  337, 1088,

      337,  337,  337,  337,  639, 1088,  639,  639,  639,  639,
      639,  639,  639,  639,  642, 1088,  642,  642,  642,  642,
      642,  642,  642,  642,  645, 1088,  645,  645,  645,  645,
      645,  645,  645,  645,  647, 1088,  647,  647,  647,  647,
      647,  647,  647,  647,  222,  222,  222,  222,  222,  262,
      262,  262,  262,  262,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  401, 1088,  401,  401,  401,  401,
      401,  401,  401,  401,  129, 1088,  129,  129,  129,  129,
      129,  129,  129,  129,  678, 1088,  678,  678,  678,  678,
      678,  678,  678,  678,  404, 1088,  404,  404,  404,  404,

      404,  404,  404,  404,  407, 1088,  407,  407,  407,  407,
      407,  407,  407,  407,  133, 1088,  133,  133,  133,  133,
      133,  133,  133,  133,  681, 1088,  681,  681,  681,  681,
      681,  681,  681,  681,  409, 1088,  409,  409,  409,  409,
      409,  409,  409,  409,  277,  277,  277,  277,  277, 1088,
      277,  277,  277,  277,  158,  158,  158,  158,  158,  722,
     1088,  722,  722,  722,  722,  722,  722,  722,  722,  725,
     1088,  725,  725,  725,  725,  725,  725,  725,  725,  728,
     1088,  728,  728,  728,  728,  728,  728,  728,  728,  464,
     1088,  464,  464,  464,  464,  464,  464,  464,  464,  187,

     1088,  187,  187,  187,  187,  187,  187,  187,  187,  606,
     1088,  606,  606,  606,  606,  606,  606,  606,  606,  732,
     1088,  732,  732,  732,  732,  732,  732,  732,  732,  735,
     1088,  735,  735,  735,  735,  735,  735,  735,  735,  467,
     1088,  467,  467,  467,  467,  467,  467,  467,  467,  613,
     1088,  613,  613,  613,  613,  613,  613,  613,  613,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  747,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  337,
      337,  337,  337,  337, 1088,  337,  337,  337,  337,  639,
     1088,  639,  639,  639,  639,  639,  639,  639,  639,  642,
     1088,  642,  642,  642,  642,  642,  642,  642,  642,  645,
     1088,  645,  645,  645,  645,  645,  645,  645,  645,  647,
     1088,  647,  647,  647,  647,  647,  647,  647,  647,  222,
      222,  222,  222,  222,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  678, 1088,  678,  678,  678,  678,

      678,  678,  678,  678,  681, 1088,  681,  681,  681,  681,
      681,  681,  681,  681,  158,  158,  158,  158,  158,  722,
     1088,  722,  722,  722,  722,  722,  722,  722,  722,  725,
     1088,  725,  725,  725,  725,  725,  725,  725,  725,  728,
     1088,  728,  728,  728,  728,  728,  728,  728,  728,  464,
     1088,  464,  464,  464,  464,  464,  464,  464,  464,  730,
     1088,  730,  730,  730,  730,  730,  730,  730,  730,  606,
     1088,  606,  606,  606,  606,  606,  606,  606,  606,  732,
     1088,  732,  732,  732,  732,  732,  732,  732,  732,  849,
     1088,  849,  849,  849,  849,  849,  849,  849,  849,  735,

     1088,  735,  735,  735,  735,  735,  735,  735,  735,  467,
     1088,  467,  467,  467,  467,  467,  467,  467,  467,  613,
     1088,  613,  613,  613,  613,  613,  613,  613,  613,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  639,
     1088,  639,  639,  639,  639,  639,  639,  639,  639,  354,
     1088,  354,  354,  354,  354,  354,  354,  354,  354,  866,

     1088,  866,  866,  866,  866,  866,  866,  866,  866,  642,
     1088,  642,  642,  642,  642,  642,  642,  642,  642,  645,
     1088,  645,  645,  645,  645,  645,  645,  645,  645,  357,
     1088,  357,  357,  357,  357,  357,  357,  357,  357,  869,
     1088,  869,  869,  869,  869,  869,  869,  869,  869,  647,
     1088,  647,  647,  647,  647,  647,  647,  647,  647,  222,
      222,  222,  222,  222,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  678, 1088,  678,  678,  678,  678,
      678,  678,  678,  678,  681, 1088,  681,  681,  681,  681,

      681,  681,  681,  681,  158,  158,  158,  158,  158,  722,
     1088,  722,  722,  722,  722,  722,  722,  722,  722,  461,
     1088,  461,  461,  461,  461,  461,  461,  461,  461,  904,
     1088,  904,  904,  904,  904,  904,  904,  904,  904,  725,
     1088,  725,  725,  725,  725,  725,  725,  725,  725,  326,
     1088, 1088,  326,  326,  326,  326,  326,  326,  326,  728,
     1088,  728,  728,  728,  728,  728,  728,  728,  728,  730,
     1088,  730,  730,  730,  730,  730,  730,  730,  730,  909,
     1088,  909,  909,  909,  909,  909,  909,  909,  909,  912,
     1088,  912,  912,  912,  912,  912,  912,  912,  912,  917,

     1088,  917,  917,  917,  917,  917,  917,  917,  917,  920,
     1088,  920,  920,  920,  920,  920,  920,  920,  920,  732,
     1088,  732,  732,  732,  732,  732,  732,  732,  732,  849,
     1088,  849,  849,  849,  849,  849,  849,  849,  849,  735,
     1088,  735,  735,  735,  735,  735,  735,  735,  735,  923,
     1088,  923,  923,  923,  923,  923,  923,  923,  923,  926,
     1088,  926,  926,  926,  926,  926,  926,  926,  926,  931,
     1088,  931,  931,  931,  931,  931,  931,  931,  931,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  866,

     1088,  866,  866,  866,  866,  866,  866,  866,  866,  869,
     1088,  869,  869,  869,  869,  869,  869,  869,  869,  222,
      222,  222,  222,  222,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  975, 1088,  975,  975,  975,  975,
      975,  975,  975,  975,  464, 1088,  464,  464,  464,  464,
      464,  464,  464,  464,  606, 1088,  606,  606,  606,  606,
      606,  606,  606,  606,  982, 1088,  982,  982,  982,  982,
      982,  982,  982,  982,  993, 1088,  993,  993,  993,  993,
      993,  993,  993,  993,  467, 1088,  467,  467,  467,  467,
      467,  467,  467,  467,  613, 1088,  613,  613,  613,  613,

      613,  613,  613,  613,  999, 1088,  999,  999,  999,  999,
      999,  999,  999,  999,  730, 1088,  730,  730,  730,  730,
      730,  730,  730,  730, 1019, 1088, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1022, 1088, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1038, 1088, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038,  732, 1088,  732,  732,  732,  732,
      732,  732,  732,  732,  849, 1088,  849,  849,  849,  849,
      849,  849,  849,  849,   11, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088
    } ;

static yyconst short int yy_chk[6850] =
    {   0,
        0,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        0,    2,    4,    2,    8,    4,   84,    8,    4,    1,
        8,   84,    0,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       10,   22,   13,   10,   13,   13,   10,   17,   18,   17,
       17,   18,   20,   17,   20,   20,   28,   28,   28,   40,
       41,   32,   38,   40,   41,   79,   79,   18,   18,   18,
       32,   44,   38,   35,   35,   35,   22,   35,   35,   31,
       43,   31,   31,   31,   44,   47,   72,   43, 1086,   51,
       44,   35,   43,   31, 1085,   72,   72,   31,   65,   31,
       51,   47,   18,   30,   62,   30,   30,   30,   70,   53,
       31,   53,   53,   74,   65,   53,   31,   30,   66,   70,

       74,   30, 1045,   30,   30,   31,   54,   66,   56,   54,
       56,   56,   92,   60,   30,   60,   60,   81,   81,   62,
       30,   92,  105,   91, 1084,   54,   54,   54,  133,   30,
       91,   73,   30,   73,   73,   73,   91,   66,   93,   76,
       93,   76,   76,   76,   94,   96,  111,   94,  111,  111,
       93, 1045,   96,   76,  129,   99,   99,   76,  133,   76,
       54,   75,  285,   75,   75,   75,   99,  105, 1082,   99,
       76,  108,  143,  108,  108,   75,   76,  108,  147,   75,
      109,   75,   75,  109,  118,   76,  118,  118,  285,  129,
      118,  143,   75,  119,  131,  131,  119,  147,   75,  109,

      109,  109,  120,  124,  120,  120,  124,   75,  125, 1081,
       75,  125,  119,  119,  119,  123,  212,  123,  123,  134,
      134,  123,  124,  124,  124,  152,  187,  125,  125,  125,
      152,  142,  109,  142,  109,  212,  153,  146,  109,  146,
      153,  131,  137,  137,  137, 1080,  169,  119,  169,  223,
      142,  138,  138,  138,  137,  137,  146,  124,  137,  142,
      216,  187,  125,  138,  138,  146,  134,  138,  141, 1079,
      141,  137,  137,  141,  141,  141, 1078,  137,  163,  216,
      138,  138,  282,  163,  223,  139,  138,  139,  139,  139,
      140,  194,  140,  140,  140,  185,  246,  185,  185,  139,

      194,  282,  274,  139,  140,  139,  145,  289,  145,  145,
      145,  209,  246,  209,  209,  209,  139,  243,  451,  241,
      145,  140,  139,  245,  145,  209,  145,  241,  451,  243,
      194,  139,  274,  289,  205,  205,  205,  145,  211,  249,
      211,  245,  209,  145,  275,  345,  205,  205,  249,  210,
      205,  210,  145,  189,  210,  210,  210,  211,  189,  286,
      207,  207,  207,  205,  205, 1073,  211,  189,  189,  205,
     1072,  345,  207,  207,  275,  189,  207,  215,  286,  215,
      208, 1069,  208,  208,  208,  250, 1067,  250,  189,  207,
      207,  320,  189,  189,  208,  207,  215,  189,  208,  226,

      208,  226, 1064,  320,  189,  215,  321,  226,  189,  321,
      189,  208,  189,  287,  189,  197,  255,  208,  255,  255,
      197,  214,  255,  214,  214,  214,  208,  357,  256,  197,
      197,  256,  287,  271,  290,  214,  326,  197,  271,  214,
     1063,  214,  257,  366,  366,  257,  272,  256,  256,  256,
      197,  272,  214,  290,  197,  197,  444,  357,  214,  197,
     1062,  257,  257,  257,  444,  349,  197,  214,  271,  291,
      197,  326,  197,  281,  197,  281,  197,  278,  278,  278,
      256,  272,  256,  283,  283,  283,  256, 1059,  291,  278,
      278,  349,  281,  278,  257,  313,  257,  279, 1058,  279,

      257,  281,  279,  279,  279, 1057,  278,  278,  284,  284,
      284,  288,  278,  288,  327,  342,  313,  328,  329,  327,
     1053,  284,  328,  333,  284,  413,  334,  329,  346,  347,
      288,  335,  333,  313,  342,  334,  354,  313,  284,  288,
      335,  350,  351,  284,  341,  461,  341,  346,  347,  327,
      313,  413,  328,  343,  343,  343,  829,  329,  313,  331,
      350,  351,  333,  341,  331,  334,  338,  338,  338,  829,
      335,  354,  341,  331,  331,  356,  356, 1029,  338,  338,
      461,  331,  338,  339, 1052,  339,  358,  358,  339,  339,
      339,  344,  344,  344,  331,  338,  338,  407,  331,  331,

      348,  338,  348,  331,  344,  409,  401,  344,  402,  497,
      331,  401,  404,  402,  331,  414,  331,  404,  331,  348,
      331,  344,  356,  415, 1051,  405,  344,  407,  348, 1050,
      405,  420, 1029,  358,  414,  409,  411,  411,  411,  497,
      464,  401,  415,  402,  403,  464,  419,  404,  419,  403,
      420,  412,  412,  412,  472,  416,  416,  416,  403,  403,
      405,  445,  445,  472,  412,  419,  403,  412,  416,  463,
      463,  416,  465,  445,  419,  464,  484,  465,  498,  403,
     1007,  412,  467,  403,  403,  416,  412,  467,  403,  468,
      416,  473,  549,  472,  468,  403,  485,  477,  477,  403,

      473,  403,  484,  403,  474,  403,  406,  465,  498,  478,
      480,  406,  486,  474,  491,  485,  463,  467,  478,  480,
      406,  406,  549, 1007,  468,  482,  482,  482,  406,  539,
      473,  486, 1048,  491,  490,  494,  490,  495, 1046,  550,
      494,  406,  495,  474,  477,  406,  406,  562,  478,  480,
      406,  538, 1044,  490, 1036,  551,  538,  406,  483,  483,
      483,  406,  490,  406,  539,  406,  562,  406,  408,  550,
      494,  483,  495,  408,  483,  540,  487,  487,  487,  541,
      540,  563,  408,  408,  541,  551,  538,  553,  483,  487,
      408,  543,  487,  483,  554,  561,  543,  544,  555,  545,

      563,  557,  544,  408,  545, 1034,  487,  408,  408, 1033,
      540,  487,  408,  546,  541,  548, 1032,  553,  546,  408,
      548,  561,  608,  408,  554,  408,  543,  408,  555,  408,
      410,  557,  544,  636,  545,  410,  585,  585,  558,  558,
      558,  604,  605, 1035,  410,  410,  604,  605,  546, 1031,
      548,  558,  410,  606,  558,  607, 1035,  608,  606,  636,
      607,  609,  610,  620, 1027,  410,  609,  610,  558,  410,
      410, 1018,  620,  558,  410,  612,  604,  605,  613,  614,
      612,  410, 1017,  613,  614,  410,  637,  410,  606,  410,
      607,  410,  466,  615,  466,  616,  609,  610,  615,  466,

      616,  618,  620,  622, 1016,  637,  618, 1015,  466,  466,
      612,  624,  622,  613,  614,  625,  466,  645,  626, 1014,
      624,  638,  628,  629,  625, 1013,  630,  626,  615,  466,
      616,  628,  629,  466,  466,  630,  618,  632,  466,  639,
      638,  647,  622,  640,  639,  466,  632,  645,  640,  466,
      624,  466, 1011,  466,  625,  466,  469,  626,  469,  642,
      681,  628,  629,  469,  642,  630,  633,  633,  633, 1008,
      643,  647,  469,  469,  639,  643,  632, 1006,  640,  633,
      469,  678,  633,  679, 1005,  969,  678,  722,  679,  968,
      681,  967,  722,  469,  642,  723,  633,  469,  469,  725,

      723,  633,  469,  762,  725,  643,  726,  728,  730,  469,
      966,  726,  728,  469,  752,  469,  678,  469,  679,  469,
      479,  729,  722,  732,  479,  763,  729,  733,  732,  479,
      723,  735,  733,  762,  725,  736,  735,  964,  479,  479,
      736,  726,  728,  730,  764,  738,  479,  831,  739,  752,
      882,  882,  740,  882,  738,  763,  729,  739,  732,  479,
      742,  740,  733,  479,  479,  844,  735,  743,  479,  742,
      736,  744,  751,  753,  764,  479,  743,  751,  753,  479,
      744,  479,  831,  479,  738,  479,  481,  739,  746,  747,
      481,  740,  766,  767,  963,  481,  754,  746,  747,  742,

      844,  754,  768,  770,  481,  481,  743,  751,  753,  756,
      744,  757,  481,  758,  756,  759,  757,  961,  758,  761,
      759,  793,  766,  767,  761,  481,  793,  746,  747,  481,
      481,  754,  768,  770,  481,  794,  960,  795,  797,  798,
      794,  481,  795,  797,  756,  481,  757,  481,  758,  481,
      759,  481,  542,  799,  761,  801,  793,  542,  830,  832,
      833,  958,  957,  830,  832,  833,  542,  542,  869,  798,
      794,  835,  795,  797,  542,  836,  835,  837,  943,  860,
      836,  838,  837,  799,  955,  801,  838,  542,  860,  977,
      948,  542,  542,  830,  832,  833,  542,  840,  869,  843,

      845,  947,  840,  542,  843,  845,  835,  542,  943,  542,
      836,  542,  837,  542,  547,  846,  838,  848,  860,  547,
      846,  849,  848,  903,  977,  850,  849,  902,  547,  547,
      850,  862,  840,  851,  843,  845,  547,  852,  851,  854,
      862,  901,  852,  855,  854,  900,  863,  898,  855,  547,
      846,  896,  848,  547,  547,  863,  849,  856,  547,  857,
      850,  859,  856,  944,  857,  547,  859,  895,  851,  547,
      862,  547,  852,  547,  854,  547,  552,  866,  855,  865,
      894,  552,  866,  946,  867,  863,  893,  891,  865,  867,
      552,  552,  856,  944,  857,  904,  859,  905,  552,  907,

      904,  908,  905,  890,  907,  909,  908,  889,  934,  910,
      909,  552,  866,  946,  910,  552,  552,  934,  865,  867,
      552,  912,  888,  913,  914,  887,  912,  552,  913,  914,
      904,  552,  905,  552,  907,  552,  908,  552,  556,  884,
      909,  916,  935,  556,  910,  917,  916,  934,  883,  918,
      917,  935,  556,  556,  918,  937,  912,  920,  913,  914,
      556,  921,  920,  923,  937,  880,  921,  879,  923,  924,
      926,  878,  876,  556,  924,  926,  916,  556,  556,  874,
      917,  935,  556,  927,  918,  928,  930,  873,  927,  556,
      928,  930,  920,  556,  937,  556,  921,  556,  923,  556,

      611,  931,  611,  932,  924,  926,  931,  611,  932,  938,
      939,  871,  828,  826,  938,  939,  611,  611,  927,  825,
      928,  930,  824,  940,  611,  942, 1054, 1054,  940, 1054,
      942,  953,  953,  821,  953,  970,  931,  611,  932,  820,
      970,  611,  611,  971,  938,  939,  611,  972,  971,  974,
      819,  975,  972,  611,  974,  818,  975,  611,  940,  611,
      942,  611,  976,  611,  617,  817,  617,  976,  978,  979,
      970,  617,  981,  978,  979,  816,  815,  981,  971,  814,
      617,  617,  972,  813,  974,  953,  975,  982,  617,  983,
      812,  984,  982,  811,  983,  985,  984,  976,  808,  806,

      985,  617,  805,  978,  979,  617,  617,  981,  987,  988,
      617,  803,  792,  987,  988,  989, 1065,  617,  790,  789,
      989,  617,  982,  617,  983,  617,  984,  617,  621,  990,
      985,  992,  621,  993,  990,  994,  992,  621,  993,  788,
      994,  787,  786,  987,  988, 1065,  621,  621,  779,  775,
      989,  995,  774,  996,  621,  998,  995,  999,  996,  773,
      998, 1065,  999,  772,  990,  771,  992,  621,  993, 1000,
      994,  621,  621, 1001, 1000, 1002,  621,  721, 1001, 1004,
     1002,  720,  719,  621, 1004,  717,  995,  621,  996,  621,
      998,  621,  999,  621,  623, 1019, 1020, 1022,  623,  716,

     1019, 1020, 1022,  623, 1000,  715, 1023,  714, 1001,  713,
     1002, 1023,  623,  623, 1004,  712, 1024, 1026, 1066, 1038,
      623, 1024, 1026, 1039, 1038,  711, 1070, 1070, 1039, 1070,
     1019, 1020, 1022,  623,  709, 1040,  708,  623,  623, 1041,
     1040, 1023,  623,  707, 1041, 1043,  706, 1066,  705,  623,
     1043, 1024, 1026,  623, 1038,  623,  704,  623, 1039,  623,
      627,  703,  702, 1066,  627, 1071, 1071,  700, 1071,  627,
     1040,  697, 1074, 1074, 1041, 1074,  695,  694,  627,  627,
     1043, 1061, 1061,  693, 1061,  690,  627, 1076, 1076,  689,
     1076,  688,  687,  686,  676, 1061,  675, 1061,  674,  627,

      673,  671,  670,  627,  627,  668,  667,  666,  627,  665,
      664,  663,  661,  660,  659,  627,  657,  656,  655,  627,
      654,  627,  651,  627,  650,  627,  631,  649,  603,  602,
      631,  601,  600,  599,  598,  631,  597,  596,  595,  594,
      593,  592,  591,  589,  631,  631,  588,  587,  586,  584,
      582,  581,  631,  580,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  568,  567,  631,  566,  565,  564,  631,
      631,  537,  533,  532,  631,  531,  530,  529,  527,  526,
      525,  631,  524,  523,  522,  631,  521,  631,  520,  631,
      519,  631,  641,  518,  517,  515,  513,  641,  512,  509,

      508,  507,  506,  503,  501,  500,  641,  641,  499,  475,
      471,  460,  459,  457,  641,  456,  455,  454,  453,  452,
      450,  449,  448,  447,  446,  443,  441,  641,  440,  439,
      438,  641,  641,  437,  436,  435,  641,  434,  433,  432,
      431,  430,  429,  641,  428,  427,  426,  641,  425,  641,
      424,  641,  423,  641,  644,  400,  399,  398,  397,  644,
      396,  395,  394,  392,  391,  390,  389,  388,  644,  644,
      387,  386,  385,  384,  383,  382,  644,  381,  380,  379,
      378,  377,  375,  374,  372,  371,  370,  369,  368,  644,
      367,  365,  364,  644,  644,  363,  362,  361,  644,  360,

      359,  332,  325,  324,  323,  644,  322,  319,  318,  644,
      316,  644,  315,  644,  314,  644,  646,  312,  311,  310,
      309,  646,  308,  307,  306,  305,  304,  303,  302,  300,
      646,  646,  299,  298,  297,  296,  295,  294,  646,  293,
      270,  268,  266,  265,  264,  263,  261,  260,  259,  258,
      251,  646,  248,  247,  244,  646,  646,  242,  239,  238,
      646,  237,  236,  235,  234,  233,  232,  646,  231,  230,
      229,  646,  228,  646,  227,  646,  224,  646,  648,  221,
      217,  204,  182,  648,  181,  180,  179,  178,  177,  176,
      175,  174,  648,  648,  173,  172,  171,  170,  167,  166,

      648,  165,  164,  162,  161,  160,  159,  157,  156,  155,
      154,  148,  136,  648,  127,  126,  122,  648,  648,  116,
      115,  114,  648,  112,  106,  103,  102,  101,  100,  648,
       98,   97,   95,  648,   90,  648,   89,  648,   88,  648,
      680,   87,   80,   69,   64,  680,   63,   61,   57,   52,
       50,   49,   48,   46,  680,  680,   45,   42,   39,   37,
       34,   33,  680,   29,   27,   26,   25,   24,   23,   21,
       16,   15,   11,    0,    0,  680,    0,    0,    0,  680,
      680,    0,    0,    0,  680,    0,    0,    0,    0,    0,
        0,  680,    0,    0,    0,  680,    0,  680,    0,  680,

        0,  680,  682,    0,    0,    0,    0,  682,    0,    0,
        0,    0,    0,    0,    0,    0,  682,  682,    0,    0,
        0,    0,    0,    0,  682,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  682,    0,    0,
        0,  682,  682,    0,    0,    0,  682,    0,    0,    0,
        0,    0,    0,  682,    0,    0,    0,  682,    0,  682,
        0,  682,    0,  682,  724,    0,    0,    0,    0,  724,
        0,    0,    0,    0,    0,    0,    0,    0,  724,  724,
        0,    0,    0,    0,    0,    0,  724,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  724,

        0,    0,    0,  724,  724,    0,    0,    0,  724,    0,
        0,    0,    0,    0,    0,  724,    0,    0,    0,  724,
        0,  724,    0,  724,    0,  724,  727,    0,    0,    0,
        0,  727,    0,    0,    0,    0,    0,    0,    0,    0,
      727,  727,    0,    0,    0,    0,    0,    0,  727,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  727,    0,    0,    0,  727,  727,    0,    0,    0,
      727,    0,    0,    0,    0,    0,    0,  727,    0,    0,
        0,  727,    0,  727,    0,  727,    0,  727,  731,    0,
      731,    0,    0,    0,    0,  731,    0,    0,    0,    0,

        0,    0,    0,    0,  731,  731,    0,    0,    0,    0,
        0,    0,  731,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  731,    0,    0,    0,  731,
      731,    0,    0,    0,  731,    0,    0,    0,    0,    0,
        0,  731,    0,    0,    0,  731,    0,  731,    0,  731,
        0,  731,  734,    0,  734,    0,    0,    0,    0,  734,
        0,    0,    0,    0,    0,    0,    0,    0,  734,  734,
        0,    0,    0,    0,    0,    0,  734,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  734,
        0,    0,    0,  734,  734,    0,    0,    0,  734,    0,

        0,    0,    0,    0,    0,  734,    0,    0,    0,  734,
        0,  734,    0,  734,    0,  734,  737,    0,  737,    0,
        0,    0,    0,  737,    0,    0,    0,    0,    0,    0,
        0,    0,  737,  737,    0,    0,    0,    0,    0,    0,
      737,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  737,    0,    0,    0,  737,  737,    0,
        0,    0,  737,    0,    0,    0,    0,    0,    0,  737,
        0,    0,    0,  737,    0,  737,    0,  737,    0,  737,
      741,    0,    0,    0,  741,    0,    0,    0,    0,  741,
        0,    0,    0,    0,    0,    0,    0,    0,  741,  741,

        0,    0,    0,    0,    0,    0,  741,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  741,
        0,    0,    0,  741,  741,    0,    0,    0,  741,    0,
        0,    0,    0,    0,    0,  741,    0,    0,    0,  741,
        0,  741,    0,  741,    0,  741,  745,    0,    0,    0,
      745,    0,    0,    0,    0,  745,    0,    0,    0,    0,
        0,    0,    0,    0,  745,  745,    0,    0,    0,    0,
        0,    0,  745,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  745,    0,    0,    0,  745,
      745,    0,    0,    0,  745,    0,    0,    0,    0,    0,

        0,  745,    0,    0,    0,  745,    0,  745,    0,  745,
        0,  745,  748,    0,    0,    0,  748,    0,    0,    0,
        0,  748,    0,    0,    0,    0,    0,    0,    0,    0,
      748,  748,    0,    0,    0,    0,    0,    0,  748,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  748,    0,    0,    0,  748,  748,    0,    0,    0,
      748,    0,    0,    0,    0,    0,    0,  748,    0,    0,
        0,  748,    0,  748,    0,  748,    0,  748,  755,    0,
        0,    0,    0,  755,    0,    0,    0,    0,    0,    0,
        0,    0,  755,  755,    0,    0,    0,    0,    0,    0,

      755,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  755,    0,    0,    0,  755,  755,    0,
        0,    0,  755,    0,    0,    0,    0,    0,    0,  755,
        0,    0,    0,  755,    0,  755,    0,  755,    0,  755,
      760,    0,    0,    0,    0,  760,    0,    0,    0,    0,
        0,    0,    0,    0,  760,  760,    0,    0,    0,    0,
        0,    0,  760,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  760,    0,    0,    0,  760,
      760,    0,    0,    0,  760,    0,    0,    0,    0,    0,
        0,  760,    0,    0,    0,  760,    0,  760,    0,  760,

        0,  760,  765,    0,    0,    0,    0,  765,    0,    0,
        0,    0,    0,    0,    0,    0,  765,  765,    0,    0,
        0,    0,    0,    0,  765,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  765,    0,    0,
        0,  765,  765,    0,    0,    0,  765,    0,    0,    0,
        0,    0,    0,  765,    0,    0,    0,  765,    0,  765,
        0,  765,    0,  765,  769,    0,    0,    0,    0,  769,
        0,    0,    0,    0,    0,    0,    0,    0,  769,  769,
        0,    0,    0,    0,    0,    0,  769,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  769,

        0,    0,    0,  769,  769,    0,    0,    0,  769,    0,
        0,    0,    0,    0,    0,  769,    0,    0,    0,  769,
        0,  769,    0,  769,    0,  769,  796,    0,    0,    0,
        0,  796,    0,    0,    0,    0,    0,    0,    0,    0,
      796,  796,    0,    0,    0,    0,    0,    0,  796,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  796,    0,    0,    0,  796,  796,    0,    0,    0,
      796,    0,    0,    0,    0,    0,    0,  796,    0,    0,
        0,  796,    0,  796,    0,  796,    0,  796,  800,    0,
        0,    0,    0,  800,    0,    0,    0,    0,    0,    0,

        0,    0,  800,  800,    0,    0,    0,    0,    0,    0,
      800,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  800,    0,    0,    0,  800,  800,    0,
        0,    0,  800,    0,    0,    0,    0,    0,    0,  800,
        0,    0,    0,  800,    0,  800,    0,  800,    0,  800,
      834,    0,    0,    0,    0,  834,    0,    0,    0,    0,
        0,    0,    0,    0,  834,  834,    0,    0,    0,    0,
        0,    0,  834,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  834,    0,    0,    0,  834,
      834,    0,    0,    0,  834,    0,    0,    0,    0,    0,

        0,  834,    0,    0,    0,  834,    0,  834,    0,  834,
        0,  834,  839,    0,    0,    0,    0,  839,    0,    0,
        0,    0,    0,    0,    0,    0,  839,  839,    0,    0,
        0,    0,    0,    0,  839,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  839,    0,    0,
        0,  839,  839,    0,    0,    0,  839,    0,    0,    0,
        0,    0,    0,  839,    0,    0,    0,  839,    0,  839,
        0,  839,    0,  839,  842,    0,    0,    0,    0,  842,
        0,    0,    0,    0,    0,    0,    0,    0,  842,  842,
        0,    0,    0,    0,    0,    0,  842,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  842,
        0,    0,    0,  842,  842,    0,    0,    0,  842,    0,
        0,    0,    0,    0,    0,  842,    0,    0,    0,  842,
        0,  842,    0,  842,    0,  842,  847,    0,  847,    0,
        0,    0,    0,  847,    0,    0,    0,    0,    0,    0,
        0,    0,  847,  847,    0,    0,    0,    0,    0,    0,
      847,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  847,    0,    0,    0,  847,  847,    0,
        0,    0,  847,    0,    0,    0,    0,    0,    0,  847,
        0,    0,    0,  847,    0,  847,    0,  847,    0,  847,

      853,    0,  853,    0,    0,    0,    0,  853,    0,    0,
        0,    0,    0,    0,    0,    0,  853,  853,    0,    0,
        0,    0,    0,    0,  853,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  853,    0,    0,
        0,  853,  853,    0,    0,    0,  853,    0,    0,    0,
        0,    0,    0,  853,    0,    0,    0,  853,    0,  853,
        0,  853,    0,  853,  858,    0,  858,    0,    0,    0,
        0,  858,    0,    0,    0,    0,    0,    0,    0,    0,
      858,  858,    0,    0,    0,    0,    0,    0,  858,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  858,    0,    0,    0,  858,  858,    0,    0,    0,
      858,    0,    0,    0,    0,    0,    0,  858,    0,    0,
        0,  858,    0,  858,    0,  858,    0,  858,  861,    0,
        0,    0,  861,    0,    0,    0,    0,  861,    0,    0,
        0,    0,    0,    0,    0,    0,  861,  861,    0,    0,
        0,    0,    0,    0,  861,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  861,    0,    0,
        0,  861,  861,    0,    0,    0,  861,    0,    0,    0,
        0,    0,    0,  861,    0,    0,    0,  861,    0,  861,
        0,  861,    0,  861,  864,    0,    0,    0,  864,    0,

        0,    0,    0,  864,    0,    0,    0,    0,    0,    0,
        0,    0,  864,  864,    0,    0,    0,    0,    0,    0,
      864,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  864,    0,    0,    0,  864,  864,    0,
        0,    0,  864,    0,    0,    0,    0,    0,    0,  864,
        0,    0,    0,  864,    0,  864,    0,  864,    0,  864,
      868,    0,    0,    0,    0,  868,    0,    0,    0,    0,
        0,    0,    0,    0,  868,  868,    0,    0,    0,    0,
        0,    0,  868,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  868,    0,    0,    0,  868,

      868,    0,    0,    0,  868,    0,    0,    0,    0,    0,
        0,  868,    0,    0,    0,  868,    0,  868,    0,  868,
        0,  868,  870,    0,    0,    0,    0,  870,    0,    0,
        0,    0,    0,    0,    0,    0,  870,  870,    0,    0,
        0,    0,    0,    0,  870,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  870,    0,    0,
        0,  870,  870,    0,    0,    0,  870,    0,    0,    0,
        0,    0,    0,  870,    0,    0,    0,  870,    0,  870,
        0,  870,    0,  870,  906,    0,    0,    0,    0,  906,
        0,    0,    0,    0,    0,    0,    0,    0,  906,  906,

        0,    0,    0,    0,    0,    0,  906,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  906,
        0,    0,    0,  906,  906,    0,    0,    0,  906,    0,
        0,    0,    0,    0,    0,  906,    0,    0,    0,  906,
        0,  906,    0,  906,    0,  906,  911,    0,  911,    0,
        0,    0,    0,  911,    0,    0,    0,    0,    0,    0,
        0,    0,  911,  911,    0,    0,    0,    0,    0,    0,
      911,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  911,    0,    0,    0,  911,  911,    0,
        0,    0,  911,    0,    0,    0,    0,    0,    0,  911,

        0,    0,    0,  911,    0,  911,    0,  911,    0,  911,
      915,    0,  915,    0,    0,    0,    0,  915,    0,    0,
        0,    0,    0,    0,    0,    0,  915,  915,    0,    0,
        0,    0,    0,    0,  915,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  915,    0,    0,
        0,  915,  915,    0,    0,    0,  915,    0,    0,    0,
        0,    0,    0,  915,    0,    0,    0,  915,    0,  915,
        0,  915,    0,  915,  919,    0,  919,    0,    0,    0,
        0,  919,    0,    0,    0,    0,    0,    0,    0,    0,
      919,  919,    0,    0,    0,    0,    0,    0,  919,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  919,    0,    0,    0,  919,  919,    0,    0,    0,
      919,    0,    0,    0,    0,    0,    0,  919,    0,    0,
        0,  919,    0,  919,    0,  919,    0,  919,  922,    0,
      922,    0,    0,    0,    0,  922,    0,    0,    0,    0,
        0,    0,    0,    0,  922,  922,    0,    0,    0,    0,
        0,    0,  922,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  922,    0,    0,    0,  922,
      922,    0,    0,    0,  922,    0,    0,    0,    0,    0,
        0,  922,    0,    0,    0,  922,    0,  922,    0,  922,

        0,  922,  925,    0,  925,    0,    0,    0,    0,  925,
        0,    0,    0,    0,    0,    0,    0,    0,  925,  925,
        0,    0,    0,    0,    0,    0,  925,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  925,
        0,    0,    0,  925,  925,    0,    0,    0,  925,    0,
        0,    0,    0,    0,    0,  925,    0,    0,    0,  925,
        0,  925,    0,  925,    0,  925,  929,    0,  929,    0,
        0,    0,    0,  929,    0,    0,    0,    0,    0,    0,
        0,    0,  929,  929,    0,    0,    0,    0,    0,    0,
      929,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  929,    0,    0,    0,  929,  929,    0,
        0,    0,  929,    0,    0,    0,    0,    0,    0,  929,
        0,    0,    0,  929,    0,  929,    0,  929,    0,  929,
      933,    0,  933,    0,    0,    0,    0,  933,    0,    0,
        0,    0,    0,    0,    0,    0,  933,  933,    0,    0,
        0,    0,    0,    0,  933,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  933,    0,    0,
        0,  933,  933,    0,    0,    0,  933,    0,    0,    0,
        0,    0,    0,  933,    0,    0,    0,  933,    0,  933,
        0,  933,    0,  933,  936,    0,    0,    0,  936,    0,

        0,    0,    0,  936,    0,    0,    0,    0,    0,    0,
        0,    0,  936,  936,    0,    0,    0,    0,    0,    0,
      936,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  936,    0,    0,    0,  936,  936,    0,
        0,    0,  936,    0,    0,    0,    0,    0,    0,  936,
        0,    0,    0,  936,    0,  936,    0,  936,    0,  936,
      941,    0,    0,    0,    0,  941,    0,    0,    0,    0,
        0,    0,    0,    0,  941,  941,    0,    0,    0,    0,
        0,    0,  941,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  941,    0,    0,    0,  941,

      941,    0,    0,    0,  941,    0,    0,    0,    0,    0,
        0,  941,    0,    0,    0,  941,    0,  941,    0,  941,
        0,  941,  945,    0,    0,    0,    0,  945,    0,    0,
        0,    0,    0,    0,    0,    0,  945,  945,    0,    0,
        0,    0,    0,    0,  945,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  945,    0,    0,
        0,  945,  945,    0,    0,    0,  945,    0,    0,    0,
        0,    0,    0,  945,    0,    0,    0,  945,    0,  945,
        0,  945,    0,  945,  973,    0,    0,    0,    0,  973,
        0,    0,    0,    0,    0,    0,    0,    0,  973,  973,

        0,    0,    0,    0,    0,    0,  973,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  973,
        0,    0,    0,  973,  973,    0,    0,    0,  973,    0,
        0,    0,    0,    0,    0,  973,    0,    0,    0,  973,
        0,  973,    0,  973,    0,  973,  980,    0,  980,    0,
        0,    0,    0,  980,    0,    0,    0,    0,    0,    0,
        0,    0,  980,  980,    0,    0,    0,    0,    0,    0,
      980,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  980,    0,    0,    0,  980,  980,    0,
        0,    0,  980,    0,    0,    0,    0,    0,    0,  980,

        0,    0,    0,  980,    0,  980,    0,  980,    0,  980,
      986,    0,  986,    0,    0,    0,    0,  986,    0,    0,
        0,    0,    0,    0,    0,    0,  986,  986,    0,    0,
        0,    0,    0,    0,  986,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  986,    0,    0,
        0,  986,  986,    0,    0,    0,  986,    0,    0,    0,
        0,    0,    0,  986,    0,    0,    0,  986,    0,  986,
        0,  986,    0,  986,  991,    0,  991,    0,    0,    0,
        0,  991,    0,    0,    0,    0,    0,    0,    0,    0,
      991,  991,    0,    0,    0,    0,    0,    0,  991,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  991,    0,    0,    0,  991,  991,    0,    0,    0,
      991,    0,    0,    0,    0,    0,    0,  991,    0,    0,
        0,  991,    0,  991,    0,  991,    0,  991,  997,    0,
      997,    0,    0,    0,    0,  997,    0,    0,    0,    0,
        0,    0,    0,    0,  997,  997,    0,    0,    0,    0,
        0,    0,  997,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  997,    0,    0,    0,  997,
      997,    0,    0,    0,  997,    0,    0,    0,    0,    0,
        0,  997,    0,    0,    0,  997,    0,  997,    0,  997,

        0,  997, 1003,    0, 1003,    0,    0,    0,    0, 1003,
        0,    0,    0,    0,    0,    0,    0,    0, 1003, 1003,
        0,    0,    0,    0,    0,    0, 1003,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1003,
        0,    0,    0, 1003, 1003,    0,    0,    0, 1003,    0,
        0,    0,    0,    0,    0, 1003,    0,    0,    0, 1003,
        0, 1003,    0, 1003,    0, 1003, 1021,    0, 1021,    0,
        0,    0,    0, 1021,    0,    0,    0,    0,    0,    0,
        0,    0, 1021, 1021,    0,    0,    0,    0,    0,    0,
     1021,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1021,    0,    0,    0, 1021, 1021,    0,
        0,    0, 1021,    0,    0,    0,    0,    0,    0, 1021,
        0,    0,    0, 1021,    0, 1021,    0, 1021,    0, 1021,
     1025,    0, 1025,    0,    0,    0,    0, 1025,    0,    0,
        0,    0,    0,    0,    0,    0, 1025, 1025,    0,    0,
        0,    0,    0,    0, 1025,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1025,    0,    0,
        0, 1025, 1025,    0,    0,    0, 1025,    0,    0,    0,
        0,    0,    0, 1025,    0,    0,    0, 1025,    0, 1025,
        0, 1025,    0, 1025, 1042,    0, 1042,    0,    0,    0,

        0, 1042,    0,    0,    0,    0,    0,    0,    0,    0,
     1042, 1042,    0,    0,    0,    0,    0,    0, 1042,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1042,    0,    0,    0, 1042, 1042,    0,    0,    0,
     1042,    0,    0,    0,    0,    0,    0, 1042,    0,    0,
        0, 1042,    0, 1042,    0, 1042,    0, 1042, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1090,    0,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1091,    0,
     1091, 1091,    0, 1091, 1091, 1091, 1091, 1091, 1092, 1092,
     1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093, 1094,    0,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1096, 1096,
     1096, 1096, 1096, 1097, 1097, 1097, 1097, 1097, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100,
        0, 1100,    0,    0, 1100, 1101, 1101,    0, 1101,    0,
        0, 1101, 1102, 1102, 1102, 1102, 1102,    0, 1102, 1102,
     1102, 1102, 1103, 1103, 1104,    0,    0, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1106,    0,    0, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107,    0,
     1107, 1107, 1107, 1107, 1108, 1108, 1109,    0, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1110,    0, 1110, 1110,
        0, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1112,    0, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1113,    0, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1114,    0, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1115,    0, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1116,    0, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1117,    0, 1117, 1117,

     1117, 1117, 1117, 1117, 1117, 1117, 1118,    0, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1119,    0, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1120,    0, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124,    0, 1124,
        0,    0, 1124, 1125,    0, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1126, 1126,    0, 1126,    0,    0, 1126,
     1127, 1127, 1127, 1127, 1127, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129, 1129,
     1130, 1130,    0, 1130,    0,    0, 1130, 1131,    0, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132,    0, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135,    0, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1136, 1136,    0,
     1136,    0,    0, 1136, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139,    0,

     1139, 1139, 1139, 1139, 1140,    0, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1141,    0, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1142,    0, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1143,    0, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1144, 1145,
     1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1147,    0, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1148,    0, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1149,    0, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1150,    0, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1151,    0, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1152,    0, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1153,    0, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1154,    0, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155,    0,
     1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156, 1156, 1157,
        0, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
        0, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159,
        0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160,
        0, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161,

        0, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162,
        0, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1163,
        0, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164,
        0, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165,
        0, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
        0, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1173,
     1173, 1173, 1173, 1173,    0, 1173, 1173, 1173, 1173, 1174,
        0, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175,
        0, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176,
        0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177,
        0, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1178,
     1178, 1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1181,    0, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1182,    0, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1184,
        0, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185,
        0, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186,
        0, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1187,
        0, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,
        0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,
        0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190,
        0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,
        0, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1192,

        0, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193,
        0, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,
        0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200,
        0, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201,
        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202,

        0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203,
        0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
        0, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205,
        0, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206,
        0, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,
        0, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,
     1208, 1208, 1208, 1208, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1211,    0, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1212,    0, 1212, 1212, 1212, 1212,

     1212, 1212, 1212, 1212, 1213, 1213, 1213, 1213, 1213, 1214,
        0, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,
        0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
        0, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217,
        0, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218,
        0,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219,
        0, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220,
        0, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1221,
        0, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1222,
        0, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,

        0, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
        0, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,
        0, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
        0, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227,
        0, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228,
        0, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
        0, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230,
        0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,

        0, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
        0, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1237,    0, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1238,    0, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1239,    0, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1240,    0, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1241,    0, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1242,    0, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1243,    0, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1244,    0, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1245,    0, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1246,    0, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1247,    0, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1248,    0, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1249,    0, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1250,    0, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "language.l"
#define INITIAL 0
#line 2 "language.l"

#include "broadway.h"
#include "language.tab.h"

// --- Fix the names from the C parser

#define cblval annlval
#define cbtext anntext
#define cbleng annleng

// --- Routines from the C parser for handling constants

extern exprNode *char_constant(const char *);
extern exprNode *int_constant(const char *, bool decimal, bool octal);
extern exprNode *wide_char_const(const char *);
extern exprNode *float_constant(const char *s);
extern char * convert_escape_sequences(char *string);
void parse_line_directive(char *s);
void save_pragma_directive(char *s);

void EnterC(void);
void ExitC(void);

// --- Line number offset (to deal with preprocessing the code). We
// update this number when we see #line directives.

void adjust_line_number(char * text);

int line_number_offset = 0;

/* -- Prefix all symbols with "ann" */
/* -- Define the four states: "BDWY" for all Broadway annotations
language tokens, "C" for C code fragments, and "META" for
meta-symbols. The meta-symbols always embedded in the C
patterns. The "BDWYID" state is used for proecdure names, which
could conflict with reserved words in the annotation language. */
#define BDWY 1

#define BDWYID 2

#define C 3

#define META 4

/* -- Define some useful short-hands */
#line 2439 "lex.ann.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 75 "language.l"


	/* -- General rules for handling line number directives */

#line 2598 "lex.ann.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1089 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6775 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
#line 80 "language.l"
case 2:
YY_RULE_SETUP
#line 80 "language.l"
{ adjust_line_number(anntext); }
	YY_BREAK
/* -- State transition (context sensitivity) rules */
case 3:
YY_RULE_SETUP
#line 84 "language.l"
{ BEGIN(C); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "language.l"
{ BEGIN(BDWY); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "language.l"
{ BEGIN(META); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "language.l"
{ BEGIN(C); }
	YY_BREAK
/* -- General rules for handling white-space (including regular line number
              adjustment */
case 7:
YY_RULE_SETUP
#line 93 "language.l"
{  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 95 "language.l"
{  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "language.l"
{  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- Broadway annotation tokens ------------------------------------------------------ */
case 11:
YY_RULE_SETUP
#line 103 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMAYPROPERTY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMUSTPROPERTY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 106 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINITIALLY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 108 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGLOBAL; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 110 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset);
                         BEGIN(BDWYID);
                         return tokPROCEDURE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokENABLE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDISABLE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 117 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         BEGIN(BDWY);
                         return tokID; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokACCESS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokMODIFY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 124 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANALYZE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 125 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDEFAULT ; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 126 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIF; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 128 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EXACTLY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCOULD_BE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 131 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATLEAST; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ATMOST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_BOTTOM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBEFORE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAFTER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokALWAYS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEVER; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokTRACE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokCONFIDENCE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 142 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokFORWARD; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokBACKWARD; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ALIASOF; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_SAMEAS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 149 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_ENTRY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 150 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokON_EXIT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNEW; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokARROW; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 153 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokDELETE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokPATTERN; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 157 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokANDAND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokOROR; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokNOT_EQUALS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS_EQUALS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokLESS_EQUALS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokGREATER_EQUALS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 165 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_CONSTANT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokEQUALS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 169 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokASSIGN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWEAKASSIGN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 172 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPORT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 173 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokERROR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 174 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokAPPEND; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 176 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokWHEN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 177 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokREPLACE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINLINE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 180 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_SET; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 181 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_SET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 182 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokUNION_EQUIV; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokINTERSECT_EQUIV; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 185 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_ELEMENT_OF; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 186 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIS_EMPTYSET; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 188 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokADD; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 190 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return tokID;
                       }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 194 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return tokIO; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 196 "language.l"
{ exprNode * e = int_constant(anntext, true, false);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 203 "language.l"
{ exprNode * e = int_constant(anntext, false, true);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "language.l"
{ exprNode * e = int_constant(anntext, false, false);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 217 "language.l"
{ yyless(annleng-1);
                                exprNode * e = float_constant(anntext);
                                if (e->typ() == Const)
                                  annlval.t_c_expression = (constNode *) e;
                                else
                                  annlval.t_c_expression = 0;
                                return tokCONSTANT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 226 "language.l"
{ exprNode * e = char_constant(anntext);
                            if (e->typ() == Const)
                              annlval.t_c_expression = (constNode *) e;
                            else
                              annlval.t_c_expression = 0;
                            return tokCONSTANT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 233 "language.l"
{ char * text = strdup(&anntext[1]);
                            int length = strlen(text);
                            text[length - 1] = '\0';
                            annlval.t_id = new parserID(convert_escape_sequences(text),
                                                        (annlineno - line_number_offset));
                            free(text);
                            return tokSTRING; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 241 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
/* -- C grammar tokens ---------------------------------------------------------------- */
case 79:
YY_RULE_SETUP
#line 245 "language.l"
{  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 247 "language.l"
{ cblval.tok = get_pos(); return ctokAUTO;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 248 "language.l"
{ cblval.tok = get_pos(); return ctokBREAK;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 249 "language.l"
{ cblval.tok = get_pos(); return ctokCASE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 250 "language.l"
{ cblval.tok = get_pos(); return ctokCHAR;}
	YY_BREAK
case 84:
#line 252 "language.l"
case 85:
YY_RULE_SETUP
#line 252 "language.l"
{ cblval.tok = get_pos(); return ctokCONST;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 253 "language.l"
{ cblval.tok = get_pos(); return ctokCONTINUE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 254 "language.l"
{ cblval.tok = get_pos(); return ctokDEFAULT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 255 "language.l"
{ cblval.tok = get_pos(); return ctokDO;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 256 "language.l"
{ cblval.tok = get_pos(); return ctokDOUBLE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 257 "language.l"
{ cblval.tok = get_pos(); return ctokELSE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 258 "language.l"
{ cblval.tok = get_pos(); return ctokENUM;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 259 "language.l"
{ cblval.tok = get_pos(); return ctokEXTERN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 260 "language.l"
{ cblval.tok = get_pos(); return ctokFLOAT;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 261 "language.l"
{ cblval.tok = get_pos(); return ctokFOR;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 262 "language.l"
{ cblval.tok = get_pos(); return ctokGOTO;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 263 "language.l"
{ cblval.tok = get_pos(); return ctokIF;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 264 "language.l"
{ cblval.tok = get_pos(); return ctokINT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 265 "language.l"
{ cblval.tok = get_pos(); return ctokLONG;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 266 "language.l"
{ cblval.tok = get_pos(); return ctokREGISTER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 267 "language.l"
{ cblval.tok = get_pos(); return ctokRETURN;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 268 "language.l"
{ cblval.tok = get_pos(); return ctokSHORT;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 269 "language.l"
{ cblval.tok = get_pos(); return ctokSIGNED;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 270 "language.l"
{ cblval.tok = get_pos(); return ctokSIZEOF;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 271 "language.l"
{ cblval.tok = get_pos(); return ctokSTATIC;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 272 "language.l"
{ cblval.tok = get_pos(); return ctokSTRUCT;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 273 "language.l"
{ cblval.tok = get_pos(); return ctokSWITCH;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 274 "language.l"
{ cblval.tok = get_pos(); return ctokTYPEDEF;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 275 "language.l"
{ cblval.tok = get_pos(); return ctokUNION;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 276 "language.l"
{ cblval.tok = get_pos(); return ctokUNSIGNED;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 277 "language.l"
{ cblval.tok = get_pos(); return ctokVOID;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 278 "language.l"
{ cblval.tok = get_pos(); return ctokVOLATILE;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 279 "language.l"
{ cblval.tok = get_pos(); return ctokWHILE;}
	YY_BREAK
case 113:
#line 282 "language.l"
case 114:
#line 283 "language.l"
case 115:
YY_RULE_SETUP
#line 283 "language.l"
{ cblval.tok = get_pos(); return ctokINLINE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 284 "language.l"
{ cblval.tok = get_pos(); return ctokATTRIBUTE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 287 "language.l"
{ cblval.tok = get_pos();
                  cblval.idN = new idNode(cbtext, cblval.tok);
                  if (CBZ::current_unit->types()->is_a_type(cblval.idN->name())) {
                    cblval.idN->decl(CBZ::current_unit->types()->lookup(cblval.idN->name()));
                    return TYPEDEFname;
                  }
                  else
                   return IDENTIFIER; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 296 "language.l"
{ cblval.exprN = int_constant(cbtext, true, false);
                         return INTEGERconstant; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 299 "language.l"
{ cblval.exprN = int_constant(cbtext, false, true);
                         return OCTALconstant; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 302 "language.l"
{ cblval.exprN = int_constant(cbtext, false, false);
                         return HEXconstant; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 305 "language.l"
{ yyless(cbleng-1);
                             cblval.exprN = float_constant(cbtext);
                             return FLOATINGconstant; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 310 "language.l"
{ cblval.exprN = char_constant(cbtext);
                         return CHARACTERconstant; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 313 "language.l"
{ CBZ::SyntaxError(string("Unmatched '"));
                         cblval.exprN = char_constant("'X'");
                         CBZ::current_line++;
                         return CHARACTERconstant; }
	YY_BREAK
case 124:
#line 320 "language.l"
case 125:
#line 321 "language.l"
case 126:
YY_RULE_SETUP
#line 321 "language.l"
{ /* bad char constant */
                                  cblval.exprN = char_constant("'X'");
                                  CBZ::SyntaxError(
                                    string("invalid char constant ") + string(cbtext) +
                                    string(", treating as 'X'"));
                                  return CHARACTERconstant;
                                }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 330 "language.l"
{ cblval.exprN = wide_char_const(cbtext);
                         return WIDECHARconstant;
                        }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 335 "language.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 345 "language.l"
{ int length = strlen(cbtext);
                         char * text = strdup(cbtext);  /* save original */
                         cbtext[length-1] = 0;  /* remove trailing double quote */
		         cblval.tok = get_pos();
                         /* remove leading double quote */
                         cblval.exprN = new constNode(
			     constant(convert_escape_sequences(&cbtext[1])),
                             text, cblval.tok);
                         return STRINGliteral;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 355 "language.l"
{ /* bad string constant */
            /* (unterminated string constants are caught by preprocessor) */
                      CBZ::SyntaxError(
                        string("string contains invalid escape code") +
                        string(cbtext));
		      cblval.tok = get_pos();
                      cblval.exprN = new constNode(constant(new string("")),
                                                   "\"\"",cblval.tok);
                      return STRINGliteral;
                    }
	YY_BREAK
case 131:
#line 368 "language.l"
case 132:
YY_RULE_SETUP
#line 368 "language.l"
{
                     parse_line_directive(cbtext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 371 "language.l"
{ EnterC(); CBZ::current_line++; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 373 "language.l"
{ ExitC(); CBZ::current_line++; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 375 "language.l"
{
                     save_pragma_directive(cbtext);
                     CBZ::current_line++; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 379 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACE;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 380 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACE;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 382 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTBRACKET;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 383 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTBRACKET;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 384 "language.l"
{ cblval.tok = get_pos(); return (int)ctokDOT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 385 "language.l"
{ cblval.tok = get_pos(); return (int)ctokAND;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 386 "language.l"
{ cblval.tok = get_pos(); return (int)ctokSTAR;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 387 "language.l"
{ cblval.tok = get_pos(); return (int)ctokPLUS;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 388 "language.l"
{ cblval.tok = get_pos(); return (int)ctokMINUS;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 389 "language.l"
{ cblval.tok = get_pos(); return (int)ctokTILDE;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 390 "language.l"
{ cblval.tok = get_pos(); return (int)ctokNOT;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 391 "language.l"
{ cblval.tok = get_pos(); return (int)ctokDIVIDE;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 392 "language.l"
{ cblval.tok = get_pos(); return (int)ctokPERCENT;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 393 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLESS;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 394 "language.l"
{ cblval.tok = get_pos(); return (int)ctokGREATER;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 395 "language.l"
{ cblval.tok = get_pos(); return (int)ctokHAT;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 396 "language.l"
{ cblval.tok = get_pos(); return (int)ctokOR;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 397 "language.l"
{ cblval.tok = get_pos(); return (int)ctokQUESTION;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 398 "language.l"
{ cblval.tok = get_pos(); return (int)ctokCOLON;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 399 "language.l"
{ cblval.tok = get_pos(); return (int)ctokSEMICOLON;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 400 "language.l"
{ cblval.tok = get_pos(); return (int)ctokEQUALS;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 402 "language.l"
{ cblval.tok = get_pos(); return (int)ctokLEFTPAREN;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 403 "language.l"
{ cblval.tok = get_pos(); return (int)ctokRIGHTPAREN;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 404 "language.l"
{ cblval.tok = get_pos(); return (int)ctokCOMMA;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 406 "language.l"
{ cblval.tok = get_pos(); return ctokARROW;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 407 "language.l"
{ cblval.tok = get_pos(); return ctokICR;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 408 "language.l"
{ cblval.tok = get_pos(); return ctokDECR;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 409 "language.l"
{ cblval.tok = get_pos(); return ctokLS;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 410 "language.l"
{ cblval.tok = get_pos(); return ctokRS;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 411 "language.l"
{ cblval.tok = get_pos(); return ctokLE;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 412 "language.l"
{ cblval.tok = get_pos(); return ctokGE;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 413 "language.l"
{ cblval.tok = get_pos(); return ctokEQ;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 414 "language.l"
{ cblval.tok = get_pos(); return ctokNE;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 415 "language.l"
{ cblval.tok = get_pos(); return ctokANDAND;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 416 "language.l"
{ cblval.tok = get_pos(); return ctokOROR;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 417 "language.l"
{ cblval.tok = get_pos(); return ctokMULTassign;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 418 "language.l"
{ cblval.tok = get_pos(); return ctokDIVassign;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 419 "language.l"
{ cblval.tok = get_pos(); return ctokMODassign;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 420 "language.l"
{ cblval.tok = get_pos(); return ctokPLUSassign;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 421 "language.l"
{ cblval.tok = get_pos(); return ctokMINUSassign;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 422 "language.l"
{ cblval.tok = get_pos(); return ctokLSassign;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 423 "language.l"
{ cblval.tok = get_pos(); return ctokRSassign;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 424 "language.l"
{ cblval.tok = get_pos(); return ctokANDassign;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 425 "language.l"
{ cblval.tok = get_pos(); return ctokERassign;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 426 "language.l"
{ cblval.tok = get_pos(); return ctokORassign;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 427 "language.l"
{ cblval.tok = get_pos(); return ctokELLIPSIS;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 429 "language.l"
{ char tmp[20];
                          CBZ::char_to_text(tmp, *cbtext);
                          CBZ::SyntaxError(string("Unexpected character: ") + string(tmp));
                        }
	YY_BREAK
/* -- Embedded meta-tokens ------------------------------------------------------------ */
case 183:
YY_RULE_SETUP
#line 436 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokEXPR; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 437 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokSTMT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 438 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return metatokTYPE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 440 "language.l"
{ annlval.t_id = new parserID(anntext, (annlineno - line_number_offset));
                         return metatokID;
                       }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 444 "language.l"
{ annlval.t_tok = (annlineno - line_number_offset); return anntext[0]; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 446 "language.l"
ECHO;
	YY_BREAK
#line 3710 "lex.ann.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BDWY):
			case YY_STATE_EOF(BDWYID):
			case YY_STATE_EOF(C):
			case YY_STATE_EOF(META):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1089 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1089 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1088);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 446 "language.l"


// --- Adapted from parse_line_directive in lex.l

void adjust_line_number(char * s)
{
 char *p;
  int val;

  // Read until a '#' sign
  for (p = s; *p != '\n' && *p != '#'; p++);
  assert(*p != '\n');

  // Read spaces and tabs
  for (p = p + 1; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
  assert(*p != '\n');

  // Swallow "line" and any trailing whitespace
  if (strncmp(p, "line", 4) == 0) {
    p = p + 4;

    // There must be whitespace
    assert(*p == ' ' || *p == '\t');

    for (     ; *p != '\n' && (*p == ' ' || *p == '\t'); p++);
    assert(*p != '\n');
  }

  // Read an integer from the string
  if (isdigit(*p))
    for (val = 0; *p && isdigit(*p); p++)
      val = val * 10 + (*p - '0');
  else {
    CBZ::SyntaxError(string("#line error: expecting line number"));
    return;
  }

  line_number_offset = annlineno - val;
}
