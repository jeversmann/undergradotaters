annotation_file:
    annotation
  | annotation_file annotation
  ;

annotation:
    global
  | property
  | procedure
  | pattern
  | header
  | analyze_annotation
      {
        Annotations::Current->init()->add_analysis($1);
      }
  ;

header:
    declaration.list
      { Annotations::Current->store_header($1); }
  ;

/* --- Global variables ----------------------- */

global:
    tokGLOBAL '{' structures '}'
      {
        Annotations::Current->add_globals( $3 );
        delete $3;
      }

  | tokGLOBAL structure
      {
        structuretree_list * temp = new structuretree_list();
	temp->push_back( $2);
        Annotations::Current->add_globals( temp );
      }
  ;

/* --- Property declarations ------------------ */

property:
    tokMAYPROPERTY tokID ':' optional_direction user_defined_class optional_default
      {
        Annotations::Current->add_enum_property(new enumPropertyAnn($2, $4, true, $6, $5));
	delete $2;
	delete $5;
	delete $6;
      }

  | tokMUSTPROPERTY tokID ':' optional_direction user_defined_class optional_default
      {
        Annotations::Current->add_enum_property(new enumPropertyAnn($2, $4, false, $6, $5));
	delete $2;
	delete $5;
	delete $6;
      }

  | tokMAYPROPERTY tokID ':' tokUNION_SET
      {
        Annotations::Current->add_set_property(new setPropertyAnn($2, Forward, 
								  setPropertyAnn::Set,
								  setPropertyAnn::Union));
	delete $2;
      }

  | tokMUSTPROPERTY tokID ':' tokINTERSECT_SET
      {
        Annotations::Current->add_set_property(new setPropertyAnn($2, Forward, 
								  setPropertyAnn::Set,
								  setPropertyAnn::Intersect));
	delete $2;
      }

  | tokMAYPROPERTY tokID ':' tokUNION_EQUIV
      {
        Annotations::Current->add_set_property(new setPropertyAnn($2, Forward, 
								  setPropertyAnn::Equivalence,
								  setPropertyAnn::Union));
	delete $2;
      }

  | tokMUSTPROPERTY tokID ':' tokINTERSECT_EQUIV
      {
        Annotations::Current->add_set_property(new setPropertyAnn($2, Forward, 
								  setPropertyAnn::Equivalence,
								  setPropertyAnn::Intersect));
	delete $2;
      }

  ;

optional_direction:
    {
      $$ = Forward;
    }

  | tokFORWARD
    {
      $$ = Forward;
    }

  | tokBACKWARD
    {
      $$ = Backward;
    }
;

optional_default:

      {
        $$ = (parserID *)0;
      }

  | tokINITIALLY tokID
      {
	$$ = $2;
      }
  ;

user_defined_class:
    '{' members '}'
      {
	$$ = $2;
      }
  ;

members:
    member
      {
        $$ = new enumvalue_list();
	$$->push_back($1);
      }

  | members ',' member
      {
	$$ = $1;
	$$->push_back($3);
      }
  ;

member:
    tokID
      {
        $$ = new enumValueAnn($1, (enumvalue_list *) 0);
	delete $1;
      }

  | tokID user_defined_class
      {
	$$ = new enumValueAnn($1, $2);
	delete $1;
	delete $2;
      }
  ;

/* --- Procedure annotations ------------------ */

procedure:
    procedure_declaration '{' procedure_annotations '}'
      {
        Annotations::Current->add_procedure(procedureAnn::Current);
        procedureAnn::Current = 0;
      }

  | procedure_declaration '{' '}'
      {
        Annotations::Current->add_procedure(procedureAnn::Current);
        procedureAnn::Current = 0;
      }
  ;

procedure_declaration:
    tokPROCEDURE tokID '(' identifier_list ')'
      {
        procedureAnn::Current = new procedureAnn($2, $4, Annotations::Current, $1);
        delete $2;
      }

  | tokPROCEDURE tokID '(' ')'
      {
        procedureAnn::Current = new procedureAnn($2, (parserid_list *)0, Annotations::Current, $1);
        delete $2;
      }
  ;

procedure_annotations:
    procedure_annotation
  | procedure_annotations procedure_annotation
  ;

procedure_annotation:
    structure_annotation
      {
      }

  | behavior_annotation
      {
      }

  | analyze_annotation
      {
	procedureAnn::Current->add_analysis($1);
      }

  | report_annotation
      {
      }

  | action_annotation
      {
      }
  ;

/* --- Structure declarations ----------------- */

structure_annotation:
    tokON_ENTRY '{' structures '}'
      {
        procedureAnn::Current->add_on_entry($3);
      }

  | tokON_EXIT  '{' structures '}'
      {
        procedureAnn::Current->add_on_exit(new pointerRuleAnn((exprAnn *)0, $3, $1));
      }

  | tokON_EXIT '{' pointer_rule_list '}'
      {
      }

  | tokON_ENTRY '{' '}'
      {
      }

  | tokON_EXIT '{' '}'
      {
      }
  ;

pointer_rule_list:
  | pointer_rule
  | pointer_rule_list pointer_rule
  ;

pointer_rule:
    tokIF '(' condition ')' '{' structures '}'
      {
	procedureAnn::Current->add_on_exit(new pointerRuleAnn($3, $6, $1));
      }

  | tokIF '(' condition ')' structure
      {
	structuretree_list * temp = new structuretree_list();
	temp->push_back($5);
	procedureAnn::Current->add_on_exit(new pointerRuleAnn($3, temp, $1));
      }

  | tokDEFAULT '{' structures '}'
      {
	procedureAnn::Current->add_on_exit(new pointerRuleAnn((exprAnn *)0, $3, $1));
      }

  | tokDEFAULT structure
      {
	structuretree_list * temp = new structuretree_list();
	temp->push_back($2);
	procedureAnn::Current->add_on_exit(new pointerRuleAnn((exprAnn *)0, temp, $1));
      }

  ;

structures:
    structure
      {
        $$ = new structuretree_list();
	$$->push_back($1);
      }

  | structures structure
      {
	$$ = $1;
	$$->push_back($2);
      }

  | structures ',' structure
      {
	$$ = $1;
	$$->push_back($3);
      }

  | tokDELETE qualified_identifier
      { 
        procedureAnn::Current->add_delete($2);
        delete $2;

        /* "delete" doesn't actually add anything to the structure tree, so
           we just pass an empty list back. Similarly for the next two
           productions. */

        $$ = new structuretree_list();
      }

  | structures tokDELETE qualified_identifier
      {
        procedureAnn::Current->add_delete($3);
        delete $3;
	$$ = $1;
      }

  | structures ',' tokDELETE qualified_identifier
      {
        procedureAnn::Current->add_delete($4);
        delete $4;
	$$ = $1;
      }
  ;

structure:
    qualified_identifier
      {
        $$ = new structureTreeAnn($1, (structuretree_list *)0,
                                  structureTreeAnn::None, false);
	delete $1;
      }

  | tokID tokARROW structure
      {
        $$ = new structureTreeAnn($1, $3, structureTreeAnn::Arrow, false);
	delete $1;
      }

  | tokID tokARROW tokNEW structure
      {
        $$ = new structureTreeAnn($1, $4, structureTreeAnn::Arrow, true);
	delete $1;
      }

  | tokID '{' structures '}'
      {
        $$ = new structureTreeAnn($1, $3, structureTreeAnn::Dot, false);
	delete $1;
      }
  ;

/* --- Behavior ------------------------------- */

behavior_annotation:

    tokACCESS '{' identifier_list '}'
      {
        procedureAnn::Current->add_uses( $3 );
	delete $3;
      }

  | tokACCESS tokID
      {
        parserid_list temp;
	temp.push_back( * $2);
        procedureAnn::Current->add_uses( & temp );
	delete $2;
      }

  | tokMODIFY '{' identifier_list '}'
      {
        procedureAnn::Current->add_defs( $3 );
	delete $3;
      }

  | tokMODIFY tokID
      {
        parserid_list temp;
	temp.push_back( * $2);
        procedureAnn::Current->add_defs( & temp );
	delete $2;
      }

  ;

/* --- Analyzer rules ------------------------- */

analyze_annotation:
    tokANALYZE tokID '{' rules '}'
      {
	$$ = new analyzeAnn(Annotations::Current, $2, $4, $1);
	delete $2;
      }

  | tokANALYZE tokID '{' effects '}'
      {
	rule_list * temp_rules = new rule_list();
	temp_rules->push_back(new ruleAnn((exprAnn *)0, $4, $3));
	$$ = new analyzeAnn(Annotations::Current, $2, temp_rules, $1);
	delete $2;
      }
  ;

rules:
    rule
      {
	$$ = new rule_list();
	$$->push_back($1);
      }

  | rules rule
      {
	$$ = $1;
	$$->push_back($2);
      }
  ;

rule:
    tokIF '(' condition ')' '{' effects '}'
      {
	$$ = new ruleAnn($3, $6, $1);
      }

  | tokIF '(' condition ')' effect
      {
	exprann_list * temp = new exprann_list();
	temp->push_back($5);
	$$ = new ruleAnn($3, temp, $1);
      }

  | tokDEFAULT '{' effects '}'
      {
	$$ = new ruleAnn((exprAnn *)0, $3, $1);
      }

  | tokDEFAULT effect
      {
	exprann_list * temp = new exprann_list();
	temp->push_back($2);
	$$ = new ruleAnn((exprAnn *)0, temp, $1);
      }

  ;

condition:
    test
      {
        $$ = $1;
      }

  | condition tokOROR condition
      {
        $$ = new connectiveExprAnn(Broadway::Or, $1, $3, $2);
      }

  | condition tokANDAND condition
      {
        $$ = new connectiveExprAnn(Broadway::And, $1, $3, $2);
      }

  | '!' condition
      {
        $$ = new connectiveExprAnn(Broadway::Not, $2, (exprAnn *)0, $1);
      }

  | '(' condition ')'
      {
        $$ = $2;
      }
  ;

test:
    /* --- Enum property tests --- */

    tokID ':' tokID property_sensitivity tokIS_BOTTOM
      {
        $$ = new enumPropertyExprAnn($4.fs, $1, $3, Broadway::Is_Bottom,
				     (const parserID *)0, $4.line);
	delete $1;
	delete $3;
      }

  | tokID property_sensitivity tokIS_BOTTOM
      {
        $$ = new enumPropertyExprAnn($2.fs, (const parserID *)0, $1, Broadway::Is_Bottom,
				     (const parserID *)0, $2.line);
	delete $1;
      }

  | tokID ':' tokID property_sensitivity binary_property_operator tokID
      {
        $$ = new enumPropertyExprAnn($4.fs, $1, $3, $5.op, $6, $5.line);
	delete $1;
	delete $3;
	delete $6;
      }

  | tokID property_sensitivity binary_property_operator tokID
      {
        $$ = new enumPropertyExprAnn($2.fs, (const parserID *)0, $1, $3.op, $4, $3.line);
	delete $1;
	delete $4;
      }

    /* --- Set property tests --- */

  | tokID tokID tokID
      {
        $$ = new setPropertyExprAnn(Broadway::Before, $2, $1, Broadway::Is_Equivalent, $3, $1->line());
	delete $1;
	delete $2;
	delete $3;
      }

  | tokID tokIS_ELEMENT_OF tokID
      {
        $$ = new setPropertyExprAnn(Broadway::Before, $3, $1, Broadway::Is_Element_Of,
				    (const parserID *)0, $2);
	delete $1;
	delete $3;
      }

  | tokID tokIS_EMPTYSET
      {
        $$ = new setPropertyExprAnn(Broadway::Before, $1, (const parserID *)0,
                                    Broadway::Is_EmptySet, (const parserID *)0, $2);

	delete $1;
      }

    /* --- Numeric tests --- */

  | c_compare_expression
      {
        $$ = new numericExprAnn($1, annlineno);
      }

  | tokID tokIS_CONSTANT
      {
        $$ = new numericExprAnn($1, annlineno);
      }

    /* --- Pointer tests --- */

  | tokID tokIS_ALIASOF tokID
      {
        $$ = new pointerExprAnn(Broadway::Is_AliasOf, $1, $3);
        delete $1;
        delete $3;
      }

  | tokID tokIS_SAMEAS tokID
      {
        $$ = new pointerExprAnn(Broadway::Is_SameAs, $1, $3);
        delete $1;
        delete $3;
      }

  | tokID tokIS_EMPTY
      {
        $$ = new pointerExprAnn(Broadway::Is_Empty, $1, (const parserID *)0);
        delete $1;
      }

  ;

effects:
    effect
      {
	$$ = new exprann_list();
	$$->push_back($1);
      }

  | effects effect
      {
	$$ = $1;
	$$->push_back($2);
      }
  ;

effect:

    tokID tokEQUALS c_expression
      {
	$$ = new numericExprAnn($1, $3, $2);
	delete $1;
      }

  | tokID tokASSIGN tokID
      {
        $$ = new enumPropertyExprAnn(Broadway::None,
				     (const parserID *)0, $1, Broadway::Assign,
				     $3, $2);
	delete $1;
	delete $3;
      }

  | tokID tokWEAKASSIGN tokID
      {
        enumPropertyExprAnn * tmp = new enumPropertyExprAnn(Broadway::None,
							    (const parserID *)0, $1, Broadway::Assign,
							    $3, $2);
	tmp->set_weak();
	$$ = tmp;
	delete $1;
	delete $3;
      }

  | tokADD tokID
      {
        $$ = new setPropertyExprAnn(Broadway::None,
				    (const parserID *)0, $2, Broadway::Add_Elements,
				    (const parserID *)0, $1);
	delete $2;
      }

  | tokID tokID tokID
      {
        $$ = new setPropertyExprAnn(Broadway::None,
				    $2, $1, Broadway::Add_Equivalences, $3, $1->line());
	delete $1;
	delete $2;
	delete $3;
      }
  ;

binary_property_operator:

     tokIS_EXACTLY
      { $$.line = $1;
        $$.op = Broadway::Is_Exactly; }

  |  tokIS_ATLEAST
      { $$.line = $1;
        $$.op = Broadway::Is_AtLeast; }

  |  tokCOULD_BE
      { $$.line = $1;
        $$.op = Broadway::Could_Be; }

  |  tokIS_ATMOST
      { $$.line = $1;
        $$.op = Broadway::Is_AtMost; }
  ;

property_sensitivity:

     tokBEFORE
       { $$.line = $1;
         $$.fs = Broadway::Before; }

  |  tokAFTER
       { $$.line = $1;
         $$.fs = Broadway::After; }

  |  tokALWAYS
       { $$.line = $1;
         $$.fs = Broadway::Always; }

  |  tokEVER
       { $$.line = $1;
         $$.fs = Broadway::Ever; }

  |  tokTRACE
       { $$.line = $1;
         $$.fs = Broadway::Trace; }

  |  tokCONFIDENCE
       { $$.line = $1;
         $$.fs = Broadway::Confidence; }

  |
       { $$.line =  0;
         $$.fs = Broadway::Before; }
  ;

/* --- Report --------------------------------- */

report_annotation:

     tokREPORT report_element_list ';'
       {
         procedureAnn::Current->add_report(new reportAnn((exprAnn *)0, $2, $1));
       }

  |  tokREPORT tokIF '(' condition ')' report_element_list ';'
       {
         procedureAnn::Current->add_report(new reportAnn($4, $6, $1));
       }
  ;

report_element_list:

     report_element
       {
         $$ = new report_element_list();
         $$->push_back( $1 );
       }

  |  report_element_list tokAPPEND report_element
       {
         $$ = $1;
         $$->push_back($3);
       }

  ;

report_element:

     tokSTRING
       {
         $$ = new literalReportElementAnn($1);
         delete $1;
       }

  | tokID ':' tokID property_sensitivity
      {
        $$ = new expressionReportElementAnn($4.fs,
	                                    new enumPropertyExprAnn($4.fs, $1, $3, Broadway::Report,
                                                                (const parserID *)0, $1->line()),
                                            annlineno);
	delete $1;
	delete $3;
      }

  | c_expression property_sensitivity
      {
        $$ = new expressionReportElementAnn($2.fs,
                                            new numericExprAnn($1, $2.line),
                                            annlineno);
      }

  | '@' tokID
      {
        $$ = new locationReportElementAnn($2);
      }

  | '[' tokID ']'
      {
        $$ = new bindingReportElementAnn($2, false);
      }

  | '|' tokID '|'
      {
        $$ = new bindingReportElementAnn($2, true);
      }
  ;

/* --- Actions -------------------------- */

action_annotation:
    tokWHEN '(' condition ')' tokREPLACE statement
      {
        procedureAnn::Current->add_action(new actionAnn($3, $6, $1));
      }

  | tokWHEN '(' condition ')' tokINLINE ';'
      {
        procedureAnn::Current->add_action(new actionAnn($3, $1));
      }
  ;

/* --- Pattern -------------------------------- */

pattern:
    tokPATTERN
      {
      }
  ;

/* --- Miscellaneous -------------------------- */

identifier_list:
    qualified_identifier
      { $$ = new parserid_list();
        $$->push_back( * $1 );
	delete $1;
      } 

  | identifier_list ',' qualified_identifier
      { $$ = $1;
        $$->push_back( * $3);
        delete $3;
      }
  ;

qualified_identifier:
    tokID
      { $$ = $1; } 

  | tokIO tokID
      { $$ = $2;
        $$->set_io();
      } 


/* --- C constant expression ------------------ */

c_compare_expression:

    c_expression tokEQUALS_EQUALS c_expression
      { $$ = new binaryNode(Operator::EQ, $1, $3); }

  | c_expression tokNOT_EQUALS c_expression
      { $$ = new binaryNode(Operator::NE, $1, $3); }

  | c_expression '<' c_expression
      { $$ = new binaryNode('<', $1, $3); }

  | c_expression tokLESS_EQUALS c_expression
      { $$ = new binaryNode(Operator::LE, $1, $3); }

  | c_expression '>' c_expression
      { $$ = new binaryNode('>', $1, $3); }

  | c_expression tokGREATER_EQUALS c_expression
      { $$ = new binaryNode(Operator::GE, $1, $3); }
  ;


c_expression:
    tokCONSTANT
      { $$ = $1; }

  | tokID
      { $$ = new idNodeAnn($1);
        delete $1;
      }

  | '(' c_expression ')'
      { $$ = $2; $$->parenthesized(true); }

  | c_expression '+' c_expression
      { $$ = new binaryNode('+', $1, $3); }

  | c_expression '-' c_expression
      { $$ = new binaryNode('-', $1, $3); }

  | c_expression '|' c_expression
      { $$ = new binaryNode('|', $1, $3); }

  | c_expression '^' c_expression
      { $$ = new binaryNode('^', $1, $3); }

  | c_expression '&' c_expression
      { $$ = new binaryNode('&', $1, $3); }

  | c_expression '*' c_expression
      { $$ = new binaryNode('*', $1, $3); }

  | c_expression '/' c_expression
      { $$ = new binaryNode('/', $1, $3); }

  | c_expression '%' c_expression
      { $$ = new binaryNode('%', $1, $3); }

  | '-' c_expression
      { $$ = new unaryNode('-', $2); }

  | '+' c_expression
      { $$ = new unaryNode('+', $2); }

  | '~' c_expression
      { $$ = new unaryNode('~', $2); }
  ;

